(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@flowable/forms'), require('react'), require('react-dom')) :
    typeof define === 'function' && define.amd ? define(['exports', '@flowable/forms', 'react', 'react-dom'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.flowable = global.flowable || {}, global.flowable.externals = {}), global.flowable.Forms, global.flowable.React, global.flowable.ReactDOM));
})(this, (function (exports, forms, React, ReactDOM) { 'use strict';

    function _interopNamespaceDefault(e) {
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n.default = e;
        return Object.freeze(n);
    }

    var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);
    var ReactDOM__namespace = /*#__PURE__*/_interopNamespaceDefault(ReactDOM);

    function HelloWorld(props) {
        props.Components;
        var extraSettings = props.config.extraSettings;
        // Used to generate style class names. See: https://getbem.com/introduction/
        var bem = forms._.bem("helloWorld");
        var locationToGreet = forms._.get(extraSettings, "locationToGreet", "World");
        return (React.createElement("div", { className: bem('container') },
            React.createElement("div", null,
                "Hello ",
                React.createElement("b", null, locationToGreet))));
    }

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }

      return target;
    }

    function _defineProperty$1(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _inheritsLoose$1(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;

      _setPrototypeOf$1(subClass, superClass);
    }

    function _setPrototypeOf$1(o, p) {
      _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf$1(o, p);
    }

    function _assertThisInitialized$1(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function debounce$2(func, wait) {
      var timeout;
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var context = this;
        clearTimeout(timeout);
        timeout = setTimeout(function () {
          return func.apply(context, args);
        }, wait);
      };
    }
    function parentHasClass(element, className) {
      while (element) {
        if (element.classList && element.classList.contains(className)) {
          return true;
        }

        element = element.parentElement;
      }

      return false;
    }
    function parentPosition(element) {
      var rect = element.getBoundingClientRect();
      return {
        x: rect.left,
        y: rect.top
      };
    }

    function osm(x, y, z) {
      var s = String.fromCharCode(97 + (x + y + z) % 3);
      return "https://" + s + ".tile.openstreetmap.org/" + z + "/" + x + "/" + y + ".png";
    }

    var ANIMATION_TIME = 300;
    var DIAGONAL_THROW_TIME = 1500;
    var SCROLL_PIXELS_FOR_ZOOM_LEVEL = 150;
    var MIN_DRAG_FOR_THROW = 40;
    var CLICK_TOLERANCE = 2;
    var DOUBLE_CLICK_DELAY = 300;
    var DEBOUNCE_DELAY = 60;
    var PINCH_RELEASE_THROW_DELAY = 300;
    var WARNING_DISPLAY_TIMEOUT = 300;

    var NOOP = function NOOP() {
      return true;
    };

    var lng2tile = function lng2tile(lon, zoom) {
      return (lon + 180) / 360 * Math.pow(2, zoom);
    };

    var lat2tile = function lat2tile(lat, zoom) {
      return (1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom);
    };

    function tile2lng(x, z) {
      return x / Math.pow(2, z) * 360 - 180;
    }

    function tile2lat(y, z) {
      var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);
      return 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));
    }

    function getMousePixel(dom, event) {
      var parent = parentPosition(dom);
      return [event.clientX - parent.x, event.clientY - parent.y];
    }

    function easeOutQuad(t) {
      return t * (2 - t);
    }

    var absoluteMinMax = [tile2lat(Math.pow(2, 10), 10), tile2lat(0, 10), tile2lng(0, 10), tile2lng(Math.pow(2, 10), 10)];
    var hasWindow = typeof window !== 'undefined';
    var performanceNow = hasWindow && window.performance && window.performance.now ? function () {
      return window.performance.now();
    } : function () {
      var timeStart = new Date().getTime();
      return function () {
        return new Date().getTime() - timeStart;
      };
    }();

    var requestAnimationFrame = function requestAnimationFrame(callback) {
      if (hasWindow) {
        return (window.requestAnimationFrame || window.setTimeout)(callback);
      } else {
        callback(new Date().getTime());
        return null;
      }
    };

    var cancelAnimationFrame$1 = function cancelAnimationFrame(animFrame) {
      return hasWindow && animFrame ? (window.cancelAnimationFrame || window.clearTimeout)(animFrame) : false;
    };

    function srcSet(dprs, url, x, y, z) {
      if (!dprs || dprs.length === 0) {
        return '';
      }

      return dprs.map(function (dpr) {
        return url(x, y, z, dpr) + (dpr === 1 ? '' : " " + dpr + "x");
      }).join(', ');
    }

    var ImgTile = function ImgTile(_ref) {
      var tile = _ref.tile,
          tileLoaded = _ref.tileLoaded;
      return /*#__PURE__*/React.createElement("img", {
        src: tile.url,
        srcSet: tile.srcSet,
        width: tile.width,
        height: tile.height,
        loading: 'lazy',
        onLoad: tileLoaded,
        alt: '',
        style: {
          position: 'absolute',
          left: tile.left,
          top: tile.top,
          willChange: 'transform',
          transformOrigin: 'top left',
          opacity: 1
        }
      });
    };

    var Map$1 = /*#__PURE__*/function (_Component) {
      _inheritsLoose$1(Map, _Component);

      function Map(props) {
        var _ref2, _props$defaultZoom, _ref3, _props$defaultCenter, _ref4, _props$width, _ref5, _props$height;

        var _this;

        _this = _Component.call(this, props) || this;

        _defineProperty$1(_assertThisInitialized$1(_this), "_containerRef", void 0);

        _defineProperty$1(_assertThisInitialized$1(_this), "_mousePosition", void 0);

        _defineProperty$1(_assertThisInitialized$1(_this), "_loadTracker", void 0);

        _defineProperty$1(_assertThisInitialized$1(_this), "_dragStart", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_mouseDown", false);

        _defineProperty$1(_assertThisInitialized$1(_this), "_moveEvents", []);

        _defineProperty$1(_assertThisInitialized$1(_this), "_lastClick", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_lastTap", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_lastWheel", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_touchStartPixel", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_touchStartMidPoint", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_touchStartDistance", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_secondTouchEnd", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_warningClearTimeout", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_isAnimating", false);

        _defineProperty$1(_assertThisInitialized$1(_this), "_animationStart", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_animationEnd", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_zoomStart", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_centerTarget", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_zoomTarget", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_zoomAround", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_animFrame", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_boundsSynced", false);

        _defineProperty$1(_assertThisInitialized$1(_this), "_minMaxCache", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "_lastZoom", void 0);

        _defineProperty$1(_assertThisInitialized$1(_this), "_lastCenter", void 0);

        _defineProperty$1(_assertThisInitialized$1(_this), "_centerStart", void 0);

        _defineProperty$1(_assertThisInitialized$1(_this), "_resizeObserver", null);

        _defineProperty$1(_assertThisInitialized$1(_this), "updateWidthHeight", function () {
          if (_this._containerRef) {
            var rect = _this._containerRef.getBoundingClientRect();

            if (rect && rect.width > 0 && rect.height > 0) {
              _this.setState({
                width: rect.width,
                height: rect.height
              });

              return true;
            }
          }

          return false;
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "wa", function () {
          var _window;

          return (_window = window).addEventListener.apply(_window, arguments);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "wr", function () {
          var _window2;

          return (_window2 = window).removeEventListener.apply(_window2, arguments);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "bindMouseEvents", function () {
          _this.wa('mousedown', _this.handleMouseDown);

          _this.wa('mouseup', _this.handleMouseUp);

          _this.wa('mousemove', _this.handleMouseMove);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "bindTouchEvents", function () {
          _this.wa('touchstart', _this.handleTouchStart, {
            passive: false
          });

          _this.wa('touchmove', _this.handleTouchMove, {
            passive: false
          });

          _this.wa('touchend', _this.handleTouchEnd, {
            passive: false
          });
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "unbindMouseEvents", function () {
          _this.wr('mousedown', _this.handleMouseDown);

          _this.wr('mouseup', _this.handleMouseUp);

          _this.wr('mousemove', _this.handleMouseMove);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "unbindTouchEvents", function () {
          _this.wr('touchstart', _this.handleTouchStart);

          _this.wr('touchmove', _this.handleTouchMove);

          _this.wr('touchend', _this.handleTouchEnd);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "bindResizeEvent", function () {
          _this.wa('resize', _this.updateWidthHeight);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "unbindResizeEvent", function () {
          _this.wr('resize', _this.updateWidthHeight);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "bindWheelEvent", function () {
          if (_this._containerRef) {
            _this._containerRef.addEventListener('wheel', _this.handleWheel, {
              passive: false
            });
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "unbindWheelEvent", function () {
          if (_this._containerRef) {
            _this._containerRef.removeEventListener('wheel', _this.handleWheel);
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "setCenterZoomTarget", function (center, zoom, fromProps, zoomAround, animationDuration) {
          if (fromProps === void 0) {
            fromProps = false;
          }

          if (zoomAround === void 0) {
            zoomAround = null;
          }

          if (animationDuration === void 0) {
            animationDuration = ANIMATION_TIME;
          }

          if (_this.props.animate && (!fromProps || _this.distanceInScreens(center, zoom, _this.state.center, _this.state.zoom) <= _this.props.animateMaxScreens)) {
            if (_this._isAnimating) {
              cancelAnimationFrame$1(_this._animFrame);

              var _this$animationStep = _this.animationStep(performanceNow()),
                  centerStep = _this$animationStep.centerStep,
                  zoomStep = _this$animationStep.zoomStep;

              _this._centerStart = centerStep;
              _this._zoomStart = zoomStep;
            } else {
              _this._isAnimating = true;
              _this._centerStart = _this.limitCenterAtZoom([_this._lastCenter[0], _this._lastCenter[1]], _this._lastZoom);
              _this._zoomStart = _this._lastZoom;

              _this.onAnimationStart();
            }

            _this._animationStart = performanceNow();
            _this._animationEnd = _this._animationStart + animationDuration;

            if (zoomAround) {
              _this._zoomAround = zoomAround;
              _this._centerTarget = _this.calculateZoomCenter(_this._lastCenter, zoomAround, _this._lastZoom, zoom);
            } else {
              _this._zoomAround = null;
              _this._centerTarget = center;
            }

            _this._zoomTarget = zoom;
            _this._animFrame = requestAnimationFrame(_this.animate);
          } else {
            _this.stopAnimating();

            if (zoomAround) {
              var _center = _this.calculateZoomCenter(_this._lastCenter, zoomAround, _this._lastZoom, zoom);

              _this.setCenterZoom(_center, zoom, fromProps);
            } else {
              _this.setCenterZoom(center || _this.state.center, zoom, fromProps);
            }
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "setCenterZoomForChildren", function (center, zoom) {
          _this.setCenterZoomTarget(center || _this.state.center, zoom || _this.state.zoom, true);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "distanceInScreens", function (centerTarget, zoomTarget, center, zoom) {
          var _this$state = _this.state,
              width = _this$state.width,
              height = _this$state.height;

          var l1 = _this.latLngToPixel(center, center, zoom);

          var l2 = _this.latLngToPixel(centerTarget, center, zoom);

          var z1 = _this.latLngToPixel(center, center, zoomTarget);

          var z2 = _this.latLngToPixel(centerTarget, center, zoomTarget);

          var w = (Math.abs(l1[0] - l2[0]) + Math.abs(z1[0] - z2[0])) / 2 / width;
          var h = (Math.abs(l1[1] - l2[1]) + Math.abs(z1[1] - z2[1])) / 2 / height;
          return Math.sqrt(w * w + h * h);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "animationStep", function (timestamp) {
          if (!_this._animationEnd || !_this._animationStart || !_this._zoomTarget || !_this._zoomStart || !_this._centerStart || !_this._centerTarget) {
            return {
              centerStep: _this.state.center,
              zoomStep: _this.state.zoom
            };
          }

          var length = _this._animationEnd - _this._animationStart;
          var progress = Math.max(timestamp - _this._animationStart, 0);
          var percentage = easeOutQuad(progress / length);
          var zoomDiff = (_this._zoomTarget - _this._zoomStart) * percentage;
          var zoomStep = _this._zoomStart + zoomDiff;

          if (_this._zoomAround) {
            var centerStep = _this.calculateZoomCenter(_this._centerStart, _this._zoomAround, _this._zoomStart, zoomStep);

            return {
              centerStep: centerStep,
              zoomStep: zoomStep
            };
          } else {
            var _centerStep = [_this._centerStart[0] + (_this._centerTarget[0] - _this._centerStart[0]) * percentage, _this._centerStart[1] + (_this._centerTarget[1] - _this._centerStart[1]) * percentage];
            return {
              centerStep: _centerStep,
              zoomStep: zoomStep
            };
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "animate", function (timestamp) {
          if (!_this._animationEnd || timestamp >= _this._animationEnd) {
            _this._isAnimating = false;

            _this.setCenterZoom(_this._centerTarget, _this._zoomTarget, true);

            _this.onAnimationStop();
          } else {
            var _this$animationStep2 = _this.animationStep(timestamp),
                centerStep = _this$animationStep2.centerStep,
                zoomStep = _this$animationStep2.zoomStep;

            _this.setCenterZoom(centerStep, zoomStep);

            _this._animFrame = requestAnimationFrame(_this.animate);
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "stopAnimating", function () {
          if (_this._isAnimating) {
            _this._isAnimating = false;

            _this.onAnimationStop();

            cancelAnimationFrame$1(_this._animFrame);
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "limitCenterAtZoom", function (center, zoom) {
          var minMax = _this.getBoundsMinMax(zoom || _this.state.zoom);

          return [Math.max(Math.min(!center || isNaN(center[0]) ? _this.state.center[0] : center[0], minMax[1]), minMax[0]), Math.max(Math.min(!center || isNaN(center[1]) ? _this.state.center[1] : center[1], minMax[3]), minMax[2])];
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "onAnimationStart", function () {
          _this.props.onAnimationStart && _this.props.onAnimationStart();
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "onAnimationStop", function () {
          _this.props.onAnimationStop && _this.props.onAnimationStop();
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "setCenterZoom", function (center, zoom, animationEnded) {
          if (animationEnded === void 0) {
            animationEnded = false;
          }

          var limitedCenter = _this.limitCenterAtZoom(center, zoom);

          if (zoom && Math.round(_this.state.zoom) !== Math.round(zoom)) {
            var tileValues = _this.tileValues(_this.state);

            var nextValues = _this.tileValues({
              center: limitedCenter,
              zoom: zoom,
              width: _this.state.width,
              height: _this.state.height
            });

            var oldTiles = _this.state.oldTiles;

            _this.setState({
              oldTiles: oldTiles.filter(function (o) {
                return o.roundedZoom !== tileValues.roundedZoom;
              }).concat(tileValues)
            }, NOOP);

            var loadTracker = {};

            for (var x = nextValues.tileMinX; x <= nextValues.tileMaxX; x++) {
              for (var y = nextValues.tileMinY; y <= nextValues.tileMaxY; y++) {
                var key = x + "-" + y + "-" + nextValues.roundedZoom;
                loadTracker[key] = false;
              }
            }

            _this._loadTracker = loadTracker;
          }

          _this.setState({
            center: limitedCenter,
            zoom: zoom || _this.state.zoom
          }, NOOP);

          var maybeZoom = _this.props.zoom ? _this.props.zoom : _this._lastZoom;
          var maybeCenter = _this.props.center ? _this.props.center : _this._lastCenter;

          if (zoom && (animationEnded || Math.abs(maybeZoom - zoom) > 0.001 || Math.abs(maybeCenter[0] - limitedCenter[0]) > 0.00001 || Math.abs(maybeCenter[1] - limitedCenter[1]) > 0.00001)) {
            _this._lastZoom = zoom;
            _this._lastCenter = [].concat(limitedCenter);

            _this.syncToProps(limitedCenter, zoom);
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "getBoundsMinMax", function (zoom) {
          if (_this.props.limitBounds === 'center') {
            return absoluteMinMax;
          }

          var _this$state2 = _this.state,
              width = _this$state2.width,
              height = _this$state2.height;

          if (_this._minMaxCache && _this._minMaxCache[0] === zoom && _this._minMaxCache[1] === width && _this._minMaxCache[2] === height) {
            return _this._minMaxCache[3];
          }

          var pixelsAtZoom = Math.pow(2, zoom) * 256;
          var minLng = width > pixelsAtZoom ? 0 : tile2lng(width / 512, zoom);
          var minLat = height > pixelsAtZoom ? 0 : tile2lat(Math.pow(2, zoom) - height / 512, zoom);
          var maxLng = width > pixelsAtZoom ? 0 : tile2lng(Math.pow(2, zoom) - width / 512, zoom);
          var maxLat = height > pixelsAtZoom ? 0 : tile2lat(height / 512, zoom);
          var minMax = [minLat, maxLat, minLng, maxLng];
          _this._minMaxCache = [zoom, width, height, minMax];
          return minMax;
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "tileLoaded", function (key) {
          if (_this._loadTracker && key in _this._loadTracker) {
            _this._loadTracker[key] = true;
            var unloadedCount = Object.values(_this._loadTracker).filter(function (v) {
              return !v;
            }).length;

            if (unloadedCount === 0) {
              _this.setState({
                oldTiles: []
              }, NOOP);
            }
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "handleTouchStart", function (event) {
          if (!_this._containerRef) {
            return;
          }

          if (event.target && parentHasClass(event.target, 'pigeon-drag-block')) {
            return;
          }

          if (event.touches.length === 1) {
            var touch = event.touches[0];
            var pixel = getMousePixel(_this._containerRef, touch);

            if (_this.coordsInside(pixel)) {
              _this._touchStartPixel = [pixel];

              if (!_this.props.twoFingerDrag) {
                _this.stopAnimating();

                if (_this._lastTap && performanceNow() - _this._lastTap < DOUBLE_CLICK_DELAY) {
                  event.preventDefault();

                  var latLngNow = _this.pixelToLatLng(_this._touchStartPixel[0]);

                  _this.setCenterZoomTarget(null, Math.max(_this.props.minZoom, Math.min(_this.state.zoom + 1, _this.props.maxZoom)), false, latLngNow);
                } else {
                  _this._lastTap = performanceNow();

                  _this.trackMoveEvents(pixel);
                }
              }
            }
          } else if (event.touches.length === 2 && _this._touchStartPixel) {
            event.preventDefault();

            _this.stopTrackingMoveEvents();

            if (_this.state.pixelDelta || _this.state.zoomDelta) {
              _this.sendDeltaChange();
            }

            var t1 = getMousePixel(_this._containerRef, event.touches[0]);
            var t2 = getMousePixel(_this._containerRef, event.touches[1]);
            _this._touchStartPixel = [t1, t2];
            _this._touchStartMidPoint = [(t1[0] + t2[0]) / 2, (t1[1] + t2[1]) / 2];
            _this._touchStartDistance = Math.sqrt(Math.pow(t1[0] - t2[0], 2) + Math.pow(t1[1] - t2[1], 2));
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "handleTouchMove", function (event) {
          if (!_this._containerRef) {
            _this._touchStartPixel = null;
            return;
          }

          if (event.touches.length === 1 && _this._touchStartPixel) {
            var touch = event.touches[0];
            var pixel = getMousePixel(_this._containerRef, touch);

            if (_this.props.twoFingerDrag) {
              if (_this.coordsInside(pixel)) {
                _this.showWarning('fingers');
              }
            } else {
              event.preventDefault();

              _this.trackMoveEvents(pixel);

              _this.setState({
                pixelDelta: [pixel[0] - _this._touchStartPixel[0][0], pixel[1] - _this._touchStartPixel[0][1]]
              }, NOOP);
            }
          } else if (event.touches.length === 2 && _this._touchStartPixel && _this._touchStartMidPoint && _this._touchStartDistance) {
            var _this$state3 = _this.state,
                width = _this$state3.width,
                height = _this$state3.height,
                zoom = _this$state3.zoom;
            event.preventDefault();
            var t1 = getMousePixel(_this._containerRef, event.touches[0]);
            var t2 = getMousePixel(_this._containerRef, event.touches[1]);
            var midPoint = [(t1[0] + t2[0]) / 2, (t1[1] + t2[1]) / 2];
            var midPointDiff = [midPoint[0] - _this._touchStartMidPoint[0], midPoint[1] - _this._touchStartMidPoint[1]];
            var distance = Math.sqrt(Math.pow(t1[0] - t2[0], 2) + Math.pow(t1[1] - t2[1], 2));
            var zoomDelta = Math.max(_this.props.minZoom, Math.min(_this.props.maxZoom, zoom + Math.log2(distance / _this._touchStartDistance))) - zoom;
            var scale = Math.pow(2, zoomDelta);
            var centerDiffDiff = [(width / 2 - midPoint[0]) * (scale - 1), (height / 2 - midPoint[1]) * (scale - 1)];

            _this.setState({
              zoomDelta: zoomDelta,
              pixelDelta: [centerDiffDiff[0] + midPointDiff[0] * scale, centerDiffDiff[1] + midPointDiff[1] * scale]
            }, NOOP);
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "handleTouchEnd", function (event) {
          if (!_this._containerRef) {
            _this._touchStartPixel = null;
            return;
          }

          if (_this._touchStartPixel) {
            var _this$props = _this.props,
                zoomSnap = _this$props.zoomSnap,
                twoFingerDrag = _this$props.twoFingerDrag,
                minZoom = _this$props.minZoom,
                maxZoom = _this$props.maxZoom;
            var zoomDelta = _this.state.zoomDelta;

            var _this$sendDeltaChange = _this.sendDeltaChange(),
                center = _this$sendDeltaChange.center,
                zoom = _this$sendDeltaChange.zoom;

            if (event.touches.length === 0) {
              if (twoFingerDrag) {
                _this.clearWarning();
              } else {
                var oldTouchPixel = _this._touchStartPixel[0];
                var newTouchPixel = getMousePixel(_this._containerRef, event.changedTouches[0]);

                if (Math.abs(oldTouchPixel[0] - newTouchPixel[0]) > CLICK_TOLERANCE || Math.abs(oldTouchPixel[1] - newTouchPixel[1]) > CLICK_TOLERANCE) {
                  if (!_this._secondTouchEnd || performanceNow() - _this._secondTouchEnd > PINCH_RELEASE_THROW_DELAY) {
                    event.preventDefault();

                    _this.throwAfterMoving(newTouchPixel, center, zoom);
                  }
                }

                _this._touchStartPixel = null;
                _this._secondTouchEnd = null;
              }
            } else if (event.touches.length === 1) {
              event.preventDefault();
              var touch = getMousePixel(_this._containerRef, event.touches[0]);
              _this._secondTouchEnd = performanceNow();
              _this._touchStartPixel = [touch];

              _this.trackMoveEvents(touch);

              if (zoomSnap) {
                var latLng = _this._touchStartMidPoint ? _this.pixelToLatLng(_this._touchStartMidPoint) : _this.state.center;
                var zoomTarget;

                if (twoFingerDrag && Math.round(_this.state.zoom) === Math.round(_this.state.zoom + zoomDelta)) {
                  zoomTarget = Math.round(_this.state.zoom);
                } else {
                  zoomTarget = zoomDelta > 0 ? Math.ceil(_this.state.zoom) : Math.floor(_this.state.zoom);
                }

                var _zoom = Math.max(minZoom, Math.min(zoomTarget, maxZoom));

                _this.setCenterZoomTarget(latLng, _zoom, false, latLng);
              }
            }
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "handleMouseDown", function (event) {
          if (!_this._containerRef) {
            return;
          }

          var pixel = getMousePixel(_this._containerRef, event);

          if (event.button === 0 && (!event.target || !parentHasClass(event.target, 'pigeon-drag-block')) && _this.coordsInside(pixel)) {
            _this.stopAnimating();

            event.preventDefault();

            if (_this._lastClick && performanceNow() - _this._lastClick < DOUBLE_CLICK_DELAY) {
              if (!parentHasClass(event.target, 'pigeon-click-block')) {
                var latLngNow = _this.pixelToLatLng(_this._mousePosition || pixel);

                _this.setCenterZoomTarget(null, Math.max(_this.props.minZoom, Math.min(_this.state.zoom + 1, _this.props.maxZoom)), false, latLngNow);
              }
            } else {
              _this._lastClick = performanceNow();
              _this._mouseDown = true;
              _this._dragStart = pixel;

              _this.trackMoveEvents(pixel);
            }
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "handleMouseMove", function (event) {
          if (!_this._containerRef) {
            return;
          }

          _this._mousePosition = getMousePixel(_this._containerRef, event);

          if (_this._mouseDown && _this._dragStart) {
            _this.trackMoveEvents(_this._mousePosition);

            _this.setState({
              pixelDelta: [_this._mousePosition[0] - _this._dragStart[0], _this._mousePosition[1] - _this._dragStart[1]]
            }, NOOP);
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "handleMouseUp", function (event) {
          if (!_this._containerRef) {
            _this._mouseDown = false;
            return;
          }

          var pixelDelta = _this.state.pixelDelta;

          if (_this._mouseDown) {
            _this._mouseDown = false;
            var pixel = getMousePixel(_this._containerRef, event);

            if (_this.props.onClick && (!event.target || !parentHasClass(event.target, 'pigeon-click-block')) && (!pixelDelta || Math.abs(pixelDelta[0]) + Math.abs(pixelDelta[1]) <= CLICK_TOLERANCE)) {
              var latLng = _this.pixelToLatLng(pixel);

              _this.props.onClick({
                event: event,
                latLng: latLng,
                pixel: pixel
              });

              _this.setState({
                pixelDelta: undefined
              }, NOOP);
            } else {
              var _this$sendDeltaChange2 = _this.sendDeltaChange(),
                  center = _this$sendDeltaChange2.center,
                  zoom = _this$sendDeltaChange2.zoom;

              _this.throwAfterMoving(pixel, center, zoom);
            }
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "stopTrackingMoveEvents", function () {
          _this._moveEvents = [];
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "trackMoveEvents", function (coords) {
          var timestamp = performanceNow();

          if (_this._moveEvents.length === 0 || timestamp - _this._moveEvents[_this._moveEvents.length - 1].timestamp > 40) {
            _this._moveEvents.push({
              timestamp: timestamp,
              coords: coords
            });

            if (_this._moveEvents.length > 2) {
              _this._moveEvents.shift();
            }
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "throwAfterMoving", function (coords, center, zoom) {
          var _this$state4 = _this.state,
              width = _this$state4.width,
              height = _this$state4.height;
          var animate = _this.props.animate;
          var timestamp = performanceNow();

          var lastEvent = _this._moveEvents.shift();

          if (lastEvent && animate) {
            var deltaMs = Math.max(timestamp - lastEvent.timestamp, 1);
            var delta = [(coords[0] - lastEvent.coords[0]) / deltaMs * 120, (coords[1] - lastEvent.coords[1]) / deltaMs * 120];
            var distance = Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);

            if (distance > MIN_DRAG_FOR_THROW) {
              var diagonal = Math.sqrt(width * width + height * height);
              var throwTime = DIAGONAL_THROW_TIME * distance / diagonal;
              var lng = tile2lng(lng2tile(center[1], zoom) - delta[0] / 256.0, zoom);
              var lat = tile2lat(lat2tile(center[0], zoom) - delta[1] / 256.0, zoom);

              _this.setCenterZoomTarget([lat, lng], zoom, false, null, throwTime);
            }
          }

          _this.stopTrackingMoveEvents();
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "sendDeltaChange", function () {
          var _this$state5 = _this.state,
              center = _this$state5.center,
              zoom = _this$state5.zoom,
              pixelDelta = _this$state5.pixelDelta,
              zoomDelta = _this$state5.zoomDelta;
          var lat = center[0];
          var lng = center[1];

          if (pixelDelta || zoomDelta !== 0) {
            lng = tile2lng(lng2tile(center[1], zoom + zoomDelta) - (pixelDelta ? pixelDelta[0] / 256.0 : 0), zoom + zoomDelta);
            lat = tile2lat(lat2tile(center[0], zoom + zoomDelta) - (pixelDelta ? pixelDelta[1] / 256.0 : 0), zoom + zoomDelta);

            _this.setCenterZoom([lat, lng], zoom + zoomDelta);
          }

          _this.setState({
            pixelDelta: undefined,
            zoomDelta: 0
          }, NOOP);

          return {
            center: _this.limitCenterAtZoom([lat, lng], zoom + zoomDelta),
            zoom: zoom + zoomDelta
          };
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "getBounds", function (center, zoom) {
          if (center === void 0) {
            center = _this.state.center;
          }

          if (zoom === void 0) {
            zoom = _this.zoomPlusDelta();
          }

          var _this$state6 = _this.state,
              width = _this$state6.width,
              height = _this$state6.height;
          return {
            ne: _this.pixelToLatLng([width - 1, 0], center, zoom),
            sw: _this.pixelToLatLng([0, height - 1], center, zoom)
          };
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "syncToProps", function (center, zoom) {
          if (center === void 0) {
            center = _this.state.center;
          }

          if (zoom === void 0) {
            zoom = _this.state.zoom;
          }

          var onBoundsChanged = _this.props.onBoundsChanged;

          if (onBoundsChanged) {
            var bounds = _this.getBounds(center, zoom);

            onBoundsChanged({
              center: center,
              zoom: zoom,
              bounds: bounds,
              initial: !_this._boundsSynced
            });
            _this._boundsSynced = true;
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "handleWheel", function (event) {
          var _this$props2 = _this.props,
              mouseEvents = _this$props2.mouseEvents,
              metaWheelZoom = _this$props2.metaWheelZoom,
              zoomSnap = _this$props2.zoomSnap,
              animate = _this$props2.animate;

          if (!mouseEvents) {
            return;
          }

          if (!metaWheelZoom || event.metaKey || event.ctrlKey) {
            event.preventDefault();
            var addToZoom = -event.deltaY / SCROLL_PIXELS_FOR_ZOOM_LEVEL;

            if (!zoomSnap && _this._zoomTarget) {
              var stillToAdd = _this._zoomTarget - _this.state.zoom;

              _this.zoomAroundMouse(addToZoom + stillToAdd, event);
            } else {
              if (animate) {
                _this.zoomAroundMouse(addToZoom, event);
              } else {
                if (!_this._lastWheel || performanceNow() - _this._lastWheel > ANIMATION_TIME) {
                  _this._lastWheel = performanceNow();

                  _this.zoomAroundMouse(addToZoom, event);
                }
              }
            }
          } else {
            _this.showWarning('wheel');
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "showWarning", function (warningType) {
          if (!_this.state.showWarning || _this.state.warningType !== warningType) {
            _this.setState({
              showWarning: true,
              warningType: warningType
            });
          }

          if (_this._warningClearTimeout) {
            window.clearTimeout(_this._warningClearTimeout);
          }

          _this._warningClearTimeout = window.setTimeout(_this.clearWarning, WARNING_DISPLAY_TIMEOUT);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "clearWarning", function () {
          if (_this.state.showWarning) {
            _this.setState({
              showWarning: false
            });
          }
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "zoomAroundMouse", function (zoomDiff, event) {
          if (!_this._containerRef) {
            return;
          }

          var zoom = _this.state.zoom;
          var _this$props3 = _this.props,
              minZoom = _this$props3.minZoom,
              maxZoom = _this$props3.maxZoom,
              zoomSnap = _this$props3.zoomSnap;
          _this._mousePosition = getMousePixel(_this._containerRef, event);

          if (!_this._mousePosition || zoom === minZoom && zoomDiff < 0 || zoom === maxZoom && zoomDiff > 0) {
            return;
          }

          var latLngNow = _this.pixelToLatLng(_this._mousePosition);

          var zoomTarget = zoom + zoomDiff;

          if (zoomSnap) {
            zoomTarget = zoomDiff < 0 ? Math.floor(zoomTarget) : Math.ceil(zoomTarget);
          }

          zoomTarget = Math.max(minZoom, Math.min(zoomTarget, maxZoom));

          _this.setCenterZoomTarget(null, zoomTarget, false, latLngNow);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "zoomPlusDelta", function () {
          return _this.state.zoom + _this.state.zoomDelta;
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "pixelToLatLng", function (pixel, center, zoom) {
          if (center === void 0) {
            center = _this.state.center;
          }

          if (zoom === void 0) {
            zoom = _this.zoomPlusDelta();
          }

          var _this$state7 = _this.state,
              width = _this$state7.width,
              height = _this$state7.height,
              pixelDelta = _this$state7.pixelDelta;
          var pointDiff = [(pixel[0] - width / 2 - (pixelDelta ? pixelDelta[0] : 0)) / 256.0, (pixel[1] - height / 2 - (pixelDelta ? pixelDelta[1] : 0)) / 256.0];
          var tileX = lng2tile(center[1], zoom) + pointDiff[0];
          var tileY = lat2tile(center[0], zoom) + pointDiff[1];
          return [Math.max(absoluteMinMax[0], Math.min(absoluteMinMax[1], tile2lat(tileY, zoom))), Math.max(absoluteMinMax[2], Math.min(absoluteMinMax[3], tile2lng(tileX, zoom)))];
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "latLngToPixel", function (latLng, center, zoom) {
          if (center === void 0) {
            center = _this.state.center;
          }

          if (zoom === void 0) {
            zoom = _this.zoomPlusDelta();
          }

          var _this$state8 = _this.state,
              width = _this$state8.width,
              height = _this$state8.height,
              pixelDelta = _this$state8.pixelDelta;
          var tileCenterX = lng2tile(center[1], zoom);
          var tileCenterY = lat2tile(center[0], zoom);
          var tileX = lng2tile(latLng[1], zoom);
          var tileY = lat2tile(latLng[0], zoom);
          return [(tileX - tileCenterX) * 256.0 + width / 2 + (pixelDelta ? pixelDelta[0] : 0), (tileY - tileCenterY) * 256.0 + height / 2 + (pixelDelta ? pixelDelta[1] : 0)];
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "calculateZoomCenter", function (center, coords, oldZoom, newZoom) {
          var _this$state9 = _this.state,
              width = _this$state9.width,
              height = _this$state9.height;

          var pixelBefore = _this.latLngToPixel(coords, center, oldZoom);

          var pixelAfter = _this.latLngToPixel(coords, center, newZoom);

          var newCenter = _this.pixelToLatLng([width / 2 + pixelAfter[0] - pixelBefore[0], height / 2 + pixelAfter[1] - pixelBefore[1]], center, newZoom);

          return _this.limitCenterAtZoom(newCenter, newZoom);
        });

        _defineProperty$1(_assertThisInitialized$1(_this), "setRef", function (dom) {
          _this._containerRef = dom;
        });

        _this.syncToProps = debounce$2(_this.syncToProps, DEBOUNCE_DELAY);
        _this._lastZoom = (_ref2 = (_props$defaultZoom = props.defaultZoom) !== null && _props$defaultZoom !== void 0 ? _props$defaultZoom : props.zoom) !== null && _ref2 !== void 0 ? _ref2 : 14;
        _this._lastCenter = (_ref3 = (_props$defaultCenter = props.defaultCenter) !== null && _props$defaultCenter !== void 0 ? _props$defaultCenter : props.center) !== null && _ref3 !== void 0 ? _ref3 : [0, 0];
        _this.state = {
          zoom: _this._lastZoom,
          center: _this._lastCenter,
          width: (_ref4 = (_props$width = props.width) !== null && _props$width !== void 0 ? _props$width : props.defaultWidth) !== null && _ref4 !== void 0 ? _ref4 : -1,
          height: (_ref5 = (_props$height = props.height) !== null && _props$height !== void 0 ? _props$height : props.defaultHeight) !== null && _ref5 !== void 0 ? _ref5 : -1,
          zoomDelta: 0,
          pixelDelta: undefined,
          oldTiles: [],
          showWarning: false,
          warningType: undefined
        };
        return _this;
      }

      var _proto = Map.prototype;

      _proto.componentDidMount = function componentDidMount() {
        var _this2 = this;

        this.props.mouseEvents && this.bindMouseEvents();
        this.props.touchEvents && this.bindTouchEvents();

        if (!this.props.width || !this.props.height) {
          if (!this.updateWidthHeight()) {
            requestAnimationFrame(this.updateWidthHeight);
          }

          this.bindResizeEvent();
        }

        this.bindWheelEvent();
        this.syncToProps();

        if (typeof window.ResizeObserver !== 'undefined') {
          this._resizeObserver = new window.ResizeObserver(function () {
            _this2.updateWidthHeight();
          });

          this._resizeObserver.observe(this._containerRef);
        }
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.props.mouseEvents && this.unbindMouseEvents();
        this.props.touchEvents && this.unbindTouchEvents();
        this.unbindWheelEvent();

        if (!this.props.width || !this.props.height) {
          this.unbindResizeEvent();
        }

        if (this._resizeObserver) {
          this._resizeObserver.disconnect();
        }
      };

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var _prevProps$center;

        if (this.props.mouseEvents !== prevProps.mouseEvents) {
          this.props.mouseEvents ? this.bindMouseEvents() : this.unbindMouseEvents();
        }

        if (this.props.touchEvents !== prevProps.touchEvents) {
          this.props.touchEvents ? this.bindTouchEvents() : this.unbindTouchEvents();
        }

        if (this.props.width && this.props.width !== prevProps.width) {
          this.setState({
            width: this.props.width
          });
        }

        if (this.props.height && this.props.height !== prevProps.height) {
          this.setState({
            height: this.props.height
          });
        }

        if (!this.props.center && !this.props.zoom) {
          return;
        }

        if ((!this.props.center || this.props.center[0] === (prevProps === null || prevProps === void 0 ? void 0 : (_prevProps$center = prevProps.center) === null || _prevProps$center === void 0 ? void 0 : _prevProps$center[0]) && this.props.center[1] === prevProps.center[1]) && this.props.zoom === prevProps.zoom) {
          return;
        }

        var currentCenter = this._isAnimating ? this._centerTarget : this.state.center;
        var currentZoom = this._isAnimating ? this._zoomTarget : this.state.zoom;

        if (currentCenter && currentZoom) {
          var _this$props$center, _this$props$zoom;

          var nextCenter = (_this$props$center = this.props.center) !== null && _this$props$center !== void 0 ? _this$props$center : currentCenter;
          var nextZoom = (_this$props$zoom = this.props.zoom) !== null && _this$props$zoom !== void 0 ? _this$props$zoom : currentZoom;

          if (Math.abs(nextZoom - currentZoom) > 0.001 || Math.abs(nextCenter[0] - currentCenter[0]) > 0.0001 || Math.abs(nextCenter[1] - currentCenter[1]) > 0.0001) {
            this.setCenterZoomTarget(nextCenter, nextZoom, true);
          }
        }
      };

      _proto.coordsInside = function coordsInside(pixel) {
        var _this$state10 = this.state,
            width = _this$state10.width,
            height = _this$state10.height;

        if (pixel[0] < 0 || pixel[1] < 0 || pixel[0] >= width || pixel[1] >= height) {
          return false;
        }

        var parent = this._containerRef;

        if (parent) {
          var pos = parentPosition(parent);
          var element = document.elementFromPoint(pixel[0] + pos.x, pixel[1] + pos.y);
          return parent === element || parent.contains(element);
        } else {
          return false;
        }
      };

      _proto.tileValues = function tileValues(_ref6) {
        var center = _ref6.center,
            zoom = _ref6.zoom,
            pixelDelta = _ref6.pixelDelta,
            zoomDelta = _ref6.zoomDelta,
            width = _ref6.width,
            height = _ref6.height;
        var roundedZoom = Math.round(zoom + (zoomDelta || 0));
        var zoomDiff = zoom + (zoomDelta || 0) - roundedZoom;
        var scale = Math.pow(2, zoomDiff);
        var scaleWidth = width / scale;
        var scaleHeight = height / scale;
        var tileCenterX = lng2tile(center[1], roundedZoom) - (pixelDelta ? pixelDelta[0] / 256.0 / scale : 0);
        var tileCenterY = lat2tile(center[0], roundedZoom) - (pixelDelta ? pixelDelta[1] / 256.0 / scale : 0);
        var halfWidth = scaleWidth / 2 / 256.0;
        var halfHeight = scaleHeight / 2 / 256.0;
        var tileMinX = Math.floor(tileCenterX - halfWidth);
        var tileMaxX = Math.floor(tileCenterX + halfWidth);
        var tileMinY = Math.floor(tileCenterY - halfHeight);
        var tileMaxY = Math.floor(tileCenterY + halfHeight);
        return {
          tileMinX: tileMinX,
          tileMaxX: tileMaxX,
          tileMinY: tileMinY,
          tileMaxY: tileMaxY,
          tileCenterX: tileCenterX,
          tileCenterY: tileCenterY,
          roundedZoom: roundedZoom,
          zoomDelta: zoomDelta || 0,
          scaleWidth: scaleWidth,
          scaleHeight: scaleHeight,
          scale: scale
        };
      };

      _proto.renderTiles = function renderTiles() {
        var _this3 = this;

        var _this$state11 = this.state,
            oldTiles = _this$state11.oldTiles,
            width = _this$state11.width,
            height = _this$state11.height;
        var dprs = this.props.dprs;
        var mapUrl = this.props.provider || osm;

        var _this$tileValues = this.tileValues(this.state),
            tileMinX = _this$tileValues.tileMinX,
            tileMaxX = _this$tileValues.tileMaxX,
            tileMinY = _this$tileValues.tileMinY,
            tileMaxY = _this$tileValues.tileMaxY,
            tileCenterX = _this$tileValues.tileCenterX,
            tileCenterY = _this$tileValues.tileCenterY,
            roundedZoom = _this$tileValues.roundedZoom,
            scaleWidth = _this$tileValues.scaleWidth,
            scaleHeight = _this$tileValues.scaleHeight,
            scale = _this$tileValues.scale;

        var tiles = [];

        for (var i = 0; i < oldTiles.length; i++) {
          var old = oldTiles[i];
          var zoomDiff = old.roundedZoom - roundedZoom;

          if (Math.abs(zoomDiff) > 4 || zoomDiff === 0) {
            continue;
          }

          var pow = 1 / Math.pow(2, zoomDiff);
          var xDiff = -(tileMinX - old.tileMinX * pow) * 256;
          var yDiff = -(tileMinY - old.tileMinY * pow) * 256;

          var _xMin = Math.max(old.tileMinX, 0);

          var _yMin = Math.max(old.tileMinY, 0);

          var _xMax = Math.min(old.tileMaxX, Math.pow(2, old.roundedZoom) - 1);

          var _yMax = Math.min(old.tileMaxY, Math.pow(2, old.roundedZoom) - 1);

          for (var x = _xMin; x <= _xMax; x++) {
            for (var y = _yMin; y <= _yMax; y++) {
              tiles.push({
                key: x + "-" + y + "-" + old.roundedZoom,
                url: mapUrl(x, y, old.roundedZoom),
                srcSet: srcSet(dprs, mapUrl, x, y, old.roundedZoom),
                left: xDiff + (x - old.tileMinX) * 256 * pow,
                top: yDiff + (y - old.tileMinY) * 256 * pow,
                width: 256 * pow,
                height: 256 * pow,
                active: false
              });
            }
          }
        }

        var xMin = Math.max(tileMinX, 0);
        var yMin = Math.max(tileMinY, 0);
        var xMax = Math.min(tileMaxX, Math.pow(2, roundedZoom) - 1);
        var yMax = Math.min(tileMaxY, Math.pow(2, roundedZoom) - 1);

        for (var _x = xMin; _x <= xMax; _x++) {
          for (var _y = yMin; _y <= yMax; _y++) {
            tiles.push({
              key: _x + "-" + _y + "-" + roundedZoom,
              url: mapUrl(_x, _y, roundedZoom),
              srcSet: srcSet(dprs, mapUrl, _x, _y, roundedZoom),
              left: (_x - tileMinX) * 256,
              top: (_y - tileMinY) * 256,
              width: 256,
              height: 256,
              active: true
            });
          }
        }

        var boxStyle = {
          width: scaleWidth,
          height: scaleHeight,
          position: 'absolute',
          top: "calc((100% - " + height + "px) / 2)",
          left: "calc((100% - " + width + "px) / 2)",
          overflow: 'hidden',
          willChange: 'transform',
          transform: "scale(" + scale + ", " + scale + ")",
          transformOrigin: 'top left'
        };
        var boxClassname = this.props.boxClassname || 'pigeon-tiles-box';
        var left = -((tileCenterX - tileMinX) * 256 - scaleWidth / 2);
        var top = -((tileCenterY - tileMinY) * 256 - scaleHeight / 2);
        var tilesStyle = {
          position: 'absolute',
          width: (tileMaxX - tileMinX + 1) * 256,
          height: (tileMaxY - tileMinY + 1) * 256,
          willChange: 'transform',
          transform: "translate(" + left + "px, " + top + "px)"
        };
        var Tile = this.props.tileComponent;
        return /*#__PURE__*/React.createElement("div", {
          style: boxStyle,
          className: boxClassname
        }, /*#__PURE__*/React.createElement("div", {
          className: "pigeon-tiles",
          style: tilesStyle
        }, tiles.map(function (tile) {
          return /*#__PURE__*/React.createElement(Tile, {
            key: tile.key,
            tile: tile,
            tileLoaded: function tileLoaded() {
              return _this3.tileLoaded(tile.key);
            }
          });
        })));
      };

      _proto.renderOverlays = function renderOverlays() {
        var _this4 = this;

        var _this$state12 = this.state,
            width = _this$state12.width,
            height = _this$state12.height,
            center = _this$state12.center;
        var mapState = {
          bounds: this.getBounds(),
          zoom: this.zoomPlusDelta(),
          center: center,
          width: width,
          height: height
        };
        var childrenWithProps = React.Children.map(this.props.children, function (child) {
          if (!child) {
            return null;
          }

          if (! /*#__PURE__*/React.isValidElement(child)) {
            return child;
          }

          var _child$props = child.props,
              anchor = _child$props.anchor,
              position = _child$props.position,
              offset = _child$props.offset;

          var c = _this4.latLngToPixel(anchor || position || center);

          return /*#__PURE__*/React.cloneElement(child, {
            left: c[0] - (offset ? offset[0] : 0),
            top: c[1] - (offset ? offset[1] : 0),
            latLngToPixel: _this4.latLngToPixel,
            pixelToLatLng: _this4.pixelToLatLng,
            setCenterZoom: _this4.setCenterZoomForChildren,
            mapProps: _this4.props,
            mapState: mapState
          });
        });
        var childrenStyle = {
          position: 'absolute',
          width: width,
          height: height,
          top: "calc((100% - " + height + "px) / 2)",
          left: "calc((100% - " + width + "px) / 2)"
        };
        return /*#__PURE__*/React.createElement("div", {
          className: "pigeon-overlays",
          style: childrenStyle
        }, childrenWithProps);
      };

      _proto.renderAttribution = function renderAttribution() {
        var _this$props4 = this.props,
            attribution = _this$props4.attribution,
            attributionPrefix = _this$props4.attributionPrefix;

        if (attribution === false) {
          return null;
        }

        var style = {
          position: 'absolute',
          bottom: 0,
          right: 0,
          fontSize: '11px',
          padding: '2px 5px',
          background: 'rgba(255, 255, 255, 0.7)',
          fontFamily: "'Helvetica Neue', Helvetica, Arial, sans-serif",
          color: '#333'
        };
        var linkStyle = {
          color: '#0078A8',
          textDecoration: 'none'
        };
        return /*#__PURE__*/React.createElement("div", {
          key: "attr",
          className: "pigeon-attribution",
          style: style
        }, attributionPrefix === false ? null : /*#__PURE__*/React.createElement("span", null, attributionPrefix || /*#__PURE__*/React.createElement("a", {
          href: "https://pigeon-maps.js.org/",
          style: linkStyle,
          target: "_blank",
          rel: "noreferrer noopener"
        }, "Pigeon"), ' | '), attribution || /*#__PURE__*/React.createElement("span", null, ' © ', /*#__PURE__*/React.createElement("a", {
          href: "https://www.openstreetmap.org/copyright",
          style: linkStyle,
          target: "_blank",
          rel: "noreferrer noopener"
        }, "OpenStreetMap"), ' contributors'));
      };

      _proto.renderWarning = function renderWarning() {
        var _this$props5 = this.props,
            metaWheelZoom = _this$props5.metaWheelZoom,
            metaWheelZoomWarning = _this$props5.metaWheelZoomWarning,
            twoFingerDrag = _this$props5.twoFingerDrag,
            twoFingerDragWarning = _this$props5.twoFingerDragWarning,
            warningZIndex = _this$props5.warningZIndex;
        var _this$state13 = this.state,
            showWarning = _this$state13.showWarning,
            warningType = _this$state13.warningType,
            width = _this$state13.width,
            height = _this$state13.height;

        if (metaWheelZoom && metaWheelZoomWarning || twoFingerDrag && twoFingerDragWarning) {
          var style = {
            position: 'absolute',
            top: 0,
            left: 0,
            width: width,
            height: height,
            overflow: 'hidden',
            pointerEvents: 'none',
            opacity: showWarning ? 100 : 0,
            transition: 'opacity 300ms',
            background: 'rgba(0,0,0,0.5)',
            color: '#fff',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            fontSize: 22,
            fontFamily: '"Arial", sans-serif',
            textAlign: 'center',
            zIndex: warningZIndex
          };
          var meta = typeof window !== 'undefined' && window.navigator && window.navigator.platform.toUpperCase().indexOf('MAC') >= 0 ? '⌘' : 'ctrl';
          var warningText = warningType === 'fingers' ? twoFingerDragWarning : metaWheelZoomWarning;
          return /*#__PURE__*/React.createElement("div", {
            className: "pigeon-overlay-warning",
            style: style
          }, warningText.replace('META', meta));
        } else {
          return null;
        }
      };

      _proto.render = function render() {
        var _this$props6 = this.props,
            touchEvents = _this$props6.touchEvents,
            twoFingerDrag = _this$props6.twoFingerDrag;
        var _this$state14 = this.state,
            width = _this$state14.width,
            height = _this$state14.height;
        var containerStyle = {
          width: this.props.width ? width : '100%',
          height: this.props.height ? height : '100%',
          position: 'relative',
          display: 'inline-block',
          overflow: 'hidden',
          background: '#dddddd',
          touchAction: touchEvents ? twoFingerDrag ? 'pan-x pan-y' : 'none' : 'auto'
        };
        var hasSize = !!(width && height);
        return /*#__PURE__*/React.createElement("div", {
          style: containerStyle,
          ref: this.setRef,
          dir: "ltr"
        }, hasSize && this.renderTiles(), hasSize && this.renderOverlays(), hasSize && this.renderAttribution(), hasSize && this.renderWarning());
      };

      return Map;
    }(React.Component);

    _defineProperty$1(Map$1, "defaultProps", {
      animate: true,
      metaWheelZoom: false,
      metaWheelZoomWarning: 'Use META + wheel to zoom!',
      twoFingerDrag: false,
      twoFingerDragWarning: 'Use two fingers to move the map',
      zoomSnap: true,
      mouseEvents: true,
      touchEvents: true,
      warningZIndex: 100,
      animateMaxScreens: 5,
      minZoom: 1,
      maxZoom: 18,
      limitBounds: 'center',
      dprs: [],
      tileComponent: ImgTile
    });

    function Marker(props) {
      var width = typeof props.width !== 'undefined' ? props.width : typeof props.height !== 'undefined' ? props.height * 29 / 34 : 29;
      var height = typeof props.height !== 'undefined' ? props.height : typeof props.width !== 'undefined' ? props.width * 34 / 29 : 34;

      var _useState = React.useState(props.hover || false),
          internalHover = _useState[0],
          setInternalHover = _useState[1];

      var hover = typeof props.hover === 'undefined' ? internalHover : props.hover;
      var color = props.color || '#93C0D0';

      var eventParameters = function eventParameters(event) {
        return {
          event: event,
          anchor: props.anchor,
          payload: props.payload
        };
      };

      return /*#__PURE__*/React.createElement("div", {
        style: _objectSpread2({
          position: 'absolute',
          transform: "translate(" + (props.left - width / 2) + "px, " + (props.top - (height - 1)) + "px)",
          filter: hover ? 'drop-shadow(0 0 4px rgba(0, 0, 0, .3))' : '',
          pointerEvents: 'none',
          cursor: 'pointer'
        }, props.style || {}),
        className: props.className ? props.className + " pigeon-click-block" : 'pigeon-click-block',
        onClick: props.onClick ? function (event) {
          return props.onClick(eventParameters(event));
        } : null,
        onContextMenu: props.onContextMenu ? function (event) {
          return props.onContextMenu(eventParameters(event));
        } : null,
        onMouseOver: function onMouseOver(event) {
          props.onMouseOver && props.onMouseOver(eventParameters(event));
          setInternalHover(true);
        },
        onMouseOut: function onMouseOut(event) {
          props.onMouseOut && props.onMouseOut(eventParameters(event));
          setInternalHover(false);
        }
      }, props.children || /*#__PURE__*/React.createElement("svg", {
        width: width,
        height: height,
        viewBox: "0 0 61 71",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, /*#__PURE__*/React.createElement("g", {
        style: {
          pointerEvents: 'auto'
        }
      }, /*#__PURE__*/React.createElement("path", {
        d: "M52 31.5C52 36.8395 49.18 42.314 45.0107 47.6094C40.8672 52.872 35.619 57.678 31.1763 61.6922C30.7916 62.0398 30.2084 62.0398 29.8237 61.6922C25.381 57.678 20.1328 52.872 15.9893 47.6094C11.82 42.314 9 36.8395 9 31.5C9 18.5709 18.6801 9 30.5 9C42.3199 9 52 18.5709 52 31.5Z",
        fill: color,
        stroke: "white",
        strokeWidth: "4"
      }), /*#__PURE__*/React.createElement("circle", {
        cx: "30.5",
        cy: "30.5",
        r: "8.5",
        fill: "white",
        opacity: hover ? 0.98 : 0.6
      }))));
    }

    function FlowableMap(props) {
        var Components = props.Components;
        var config = props.config;
        var extraSettings = config.extraSettings, value = config.value;
        // Used to generate style class names. See: https://getbem.com/introduction/
        var bem = forms._.bem("flowableMap");
        var center = forms._.get(extraSettings, "center", []);
        return (React.createElement("div", { className: bem('container') },
            React.createElement(Components.label, __assign({}, props)),
            React.createElement(Map$1, { height: 300, width: 300, center: center }, value && React.createElement(Marker, { anchor: value }))));
    }

    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }

    function r$2(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r$2(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r$2(e))&&(n&&(n+=" "),n+=t);return n}

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1 = ReactPropTypesSecret;

    function emptyFunction() {}
    function emptyFunctionWithReset() {}
    emptyFunctionWithReset.resetWarningCache = emptyFunction;

    var factoryWithThrowingShims = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret_1) {
          // It is still safe when called from React.
          return;
        }
        var err = new Error(
          'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
          'Use PropTypes.checkPropTypes() to call them. ' +
          'Read more at http://fb.me/use-check-prop-types'
        );
        err.name = 'Invariant Violation';
        throw err;
      }  shim.isRequired = shim;
      function getShim() {
        return shim;
      }  // Important!
      // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,

        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,

        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };

      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    var propTypes = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      // By explicitly using `prop-types` you are opting into new production behavior.
      // http://fb.me/prop-types-in-prod
      module.exports = factoryWithThrowingShims();
    }
    });

    var PropTypes = propTypes;

    function isPlainObject(item) {
      return item !== null && typeof item === 'object' && item.constructor === Object;
    }
    function deepClone(source) {
      if (!isPlainObject(source)) {
        return source;
      }
      const output = {};
      Object.keys(source).forEach(key => {
        output[key] = deepClone(source[key]);
      });
      return output;
    }
    function deepmerge(target, source, options = {
      clone: true
    }) {
      const output = options.clone ? _extends({}, target) : target;
      if (isPlainObject(target) && isPlainObject(source)) {
        Object.keys(source).forEach(key => {
          // Avoid prototype pollution
          if (key === '__proto__') {
            return;
          }
          if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
            // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
            output[key] = deepmerge(target[key], source[key], options);
          } else if (options.clone) {
            output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
          } else {
            output[key] = source[key];
          }
        });
      }
      return output;
    }

    /**
     * WARNING: Don't import this directly.
     * Use `MuiError` from `@mui/utils/macros/MuiError.macro` instead.
     * @param {number} code
     */
    function formatMuiErrorMessage(code) {
      // Apply babel-plugin-transform-template-literals in loose mode
      // loose mode is safe iff we're concatenating primitives
      // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
      /* eslint-disable prefer-template */
      let url = 'https://mui.com/production-error/?code=' + code;
      for (let i = 1; i < arguments.length; i += 1) {
        // rest params over-transpile for this case
        // eslint-disable-next-line prefer-rest-params
        url += '&args[]=' + encodeURIComponent(arguments[i]);
      }
      return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
      /* eslint-enable prefer-template */
    }

    const refType = PropTypes.oneOfType([PropTypes.func, PropTypes.object]);
    var refType$1 = refType;

    // It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
    //
    // A strict capitalization should uppercase the first letter of each word in the sentence.
    // We only handle the first word.
    function capitalize(string) {
      if (typeof string !== 'string') {
        throw new Error(formatMuiErrorMessage(7));
      }
      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    /**
     * Safe chained function.
     *
     * Will only create a new function if needed,
     * otherwise will pass back existing functions or null.
     */
    function createChainedFunction(...funcs) {
      return funcs.reduce((acc, func) => {
        if (func == null) {
          return acc;
        }
        return function chainedFunction(...args) {
          acc.apply(this, args);
          func.apply(this, args);
        };
      }, () => {});
    }

    // Corresponds to 10 frames at 60 Hz.
    // A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
    function debounce$1(func, wait = 166) {
      let timeout;
      function debounced(...args) {
        const later = () => {
          // @ts-ignore
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      }
      debounced.clear = () => {
        clearTimeout(timeout);
      };
      return debounced;
    }

    function isMuiElement(element, muiNames) {
      var _muiName, _element$type;
      return /*#__PURE__*/React__namespace.isValidElement(element) && muiNames.indexOf( // For server components `muiName` is avaialble in element.type._payload.value.muiName
      // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
      // eslint-disable-next-line no-underscore-dangle
      (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName) !== -1;
    }

    function ownerDocument(node) {
      return node && node.ownerDocument || document;
    }

    function ownerWindow(node) {
      const doc = ownerDocument(node);
      return doc.defaultView || window;
    }

    /**
     * TODO v5: consider making it private
     *
     * passes {value} to {ref}
     *
     * WARNING: Be sure to only call this inside a callback that is passed as a ref.
     * Otherwise, make sure to cleanup the previous {ref} if it changes. See
     * https://github.com/mui/material-ui/issues/13539
     *
     * Useful if you want to expose the ref of an inner component to the public API
     * while still using it inside the component.
     * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
     */
    function setRef(ref, value) {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
    }

    /**
     * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.
     * This is useful for effects that are only needed for client-side rendering but not for SSR.
     *
     * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
     * and confirm it doesn't apply to your use-case.
     */
    const useEnhancedEffect = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    var useEnhancedEffect$1 = useEnhancedEffect;

    let globalId = 0;
    function useGlobalId(idOverride) {
      const [defaultId, setDefaultId] = React__namespace.useState(idOverride);
      const id = idOverride || defaultId;
      React__namespace.useEffect(() => {
        if (defaultId == null) {
          // Fallback to this default id when possible.
          // Use the incrementing value for client-side rendering only.
          // We can't use it server-side.
          // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
          globalId += 1;
          setDefaultId(`mui-${globalId}`);
        }
      }, [defaultId]);
      return id;
    }

    // downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814
    const maybeReactUseId = React__namespace['useId'.toString()];
    /**
     *
     * @example <div id={useId()} />
     * @param idOverride
     * @returns {string}
     */
    function useId(idOverride) {
      if (maybeReactUseId !== undefined) {
        const reactId = maybeReactUseId();
        return idOverride != null ? idOverride : reactId;
      }
      // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
      return useGlobalId(idOverride);
    }

    function useControlled({
      controlled,
      default: defaultProp,
      name,
      state = 'value'
    }) {
      // isControlled is ignored in the hook dependency lists as it should never change.
      const {
        current: isControlled
      } = React__namespace.useRef(controlled !== undefined);
      const [valueState, setValue] = React__namespace.useState(defaultProp);
      const value = isControlled ? controlled : valueState;
      const setValueIfUncontrolled = React__namespace.useCallback(newValue => {
        if (!isControlled) {
          setValue(newValue);
        }
      }, []);
      return [value, setValueIfUncontrolled];
    }

    /**
     * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892
     * See RFC in https://github.com/reactjs/rfcs/pull/220
     */

    function useEventCallback(fn) {
      const ref = React__namespace.useRef(fn);
      useEnhancedEffect$1(() => {
        ref.current = fn;
      });
      return React__namespace.useCallback((...args) =>
      // @ts-expect-error hide `this`
      // tslint:disable-next-line:ban-comma-operator
      (0, ref.current)(...args), []);
    }

    function useForkRef(...refs) {
      /**
       * This will create a new function if the refs passed to this hook change and are all defined.
       * This means react will call the old forkRef with `null` and the new forkRef
       * with the ref. Cleanup naturally emerges from this behavior.
       */
      return React__namespace.useMemo(() => {
        if (refs.every(ref => ref == null)) {
          return null;
        }
        return instance => {
          refs.forEach(ref => {
            setRef(ref, instance);
          });
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, refs);
    }

    let hadKeyboardEvent = true;
    let hadFocusVisibleRecently = false;
    let hadFocusVisibleRecentlyTimeout;
    const inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      'datetime-local': true
    };

    /**
     * Computes whether the given element should automatically trigger the
     * `focus-visible` class being added, i.e. whether it should always match
     * `:focus-visible` when focused.
     * @param {Element} node
     * @returns {boolean}
     */
    function focusTriggersKeyboardModality(node) {
      const {
        type,
        tagName
      } = node;
      if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
        return true;
      }
      if (tagName === 'TEXTAREA' && !node.readOnly) {
        return true;
      }
      if (node.isContentEditable) {
        return true;
      }
      return false;
    }

    /**
     * Keep track of our keyboard modality state with `hadKeyboardEvent`.
     * If the most recent user interaction was via the keyboard;
     * and the key press did not include a meta, alt/option, or control key;
     * then the modality is keyboard. Otherwise, the modality is not keyboard.
     * @param {KeyboardEvent} event
     */
    function handleKeyDown(event) {
      if (event.metaKey || event.altKey || event.ctrlKey) {
        return;
      }
      hadKeyboardEvent = true;
    }

    /**
     * If at any point a user clicks with a pointing device, ensure that we change
     * the modality away from keyboard.
     * This avoids the situation where a user presses a key on an already focused
     * element, and then clicks on a different element, focusing it with a
     * pointing device, while we still think we're in keyboard modality.
     */
    function handlePointerDown() {
      hadKeyboardEvent = false;
    }
    function handleVisibilityChange() {
      if (this.visibilityState === 'hidden') {
        // If the tab becomes active again, the browser will handle calling focus
        // on the element (Safari actually calls it twice).
        // If this tab change caused a blur on an element with focus-visible,
        // re-apply the class when the user switches back to the tab.
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
      }
    }
    function prepare(doc) {
      doc.addEventListener('keydown', handleKeyDown, true);
      doc.addEventListener('mousedown', handlePointerDown, true);
      doc.addEventListener('pointerdown', handlePointerDown, true);
      doc.addEventListener('touchstart', handlePointerDown, true);
      doc.addEventListener('visibilitychange', handleVisibilityChange, true);
    }
    function isFocusVisible(event) {
      const {
        target
      } = event;
      try {
        return target.matches(':focus-visible');
      } catch (error) {
        // Browsers not implementing :focus-visible will throw a SyntaxError.
        // We use our own heuristic for those browsers.
        // Rethrow might be better if it's not the expected error but do we really
        // want to crash if focus-visible malfunctioned?
      }

      // No need for validFocusTarget check. The user does that by attaching it to
      // focusable events only.
      return hadKeyboardEvent || focusTriggersKeyboardModality(target);
    }
    function useIsFocusVisible() {
      const ref = React__namespace.useCallback(node => {
        if (node != null) {
          prepare(node.ownerDocument);
        }
      }, []);
      const isFocusVisibleRef = React__namespace.useRef(false);

      /**
       * Should be called if a blur event is fired
       */
      function handleBlurVisible() {
        // checking against potential state variable does not suffice if we focus and blur synchronously.
        // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
        // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
        // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
        // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
        if (isFocusVisibleRef.current) {
          // To detect a tab/window switch, we look for a blur event followed
          // rapidly by a visibility change.
          // If we don't see a visibility change within 100ms, it's probably a
          // regular focus change.
          hadFocusVisibleRecently = true;
          window.clearTimeout(hadFocusVisibleRecentlyTimeout);
          hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
            hadFocusVisibleRecently = false;
          }, 100);
          isFocusVisibleRef.current = false;
          return true;
        }
        return false;
      }

      /**
       * Should be called if a blur event is fired
       */
      function handleFocusVisible(event) {
        if (isFocusVisible(event)) {
          isFocusVisibleRef.current = true;
          return true;
        }
        return false;
      }
      return {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref
      };
    }

    // A change of the browser zoom change the scrollbar size.
    // Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
    function getScrollbarSize(doc) {
      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
      const documentWidth = doc.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }

    /**
     * Add keys, values of `defaultProps` that does not exist in `props`
     * @param {object} defaultProps
     * @param {object} props
     * @returns {object} resolved props
     */
    function resolveProps(defaultProps, props) {
      const output = _extends({}, props);
      Object.keys(defaultProps).forEach(propName => {
        if (propName.toString().match(/^(components|slots)$/)) {
          output[propName] = _extends({}, defaultProps[propName], output[propName]);
        } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
          const defaultSlotProps = defaultProps[propName] || {};
          const slotProps = props[propName];
          output[propName] = {};
          if (!slotProps || !Object.keys(slotProps)) {
            // Reduce the iteration if the slot props is empty
            output[propName] = defaultSlotProps;
          } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
            // Reduce the iteration if the default slot props is empty
            output[propName] = slotProps;
          } else {
            output[propName] = _extends({}, slotProps);
            Object.keys(defaultSlotProps).forEach(slotPropName => {
              output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
            });
          }
        } else if (output[propName] === undefined) {
          output[propName] = defaultProps[propName];
        }
      });
      return output;
    }

    function composeClasses(slots, getUtilityClass, classes = undefined) {
      const output = {};
      Object.keys(slots).forEach(
      // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
      // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
      slot => {
        output[slot] = slots[slot].reduce((acc, key) => {
          if (key) {
            const utilityClass = getUtilityClass(key);
            if (utilityClass !== '') {
              acc.push(utilityClass);
            }
            if (classes && classes[key]) {
              acc.push(classes[key]);
            }
          }
          return acc;
        }, []).join(' ');
      });
      return output;
    }

    const defaultGenerator = componentName => componentName;
    const createClassNameGenerator = () => {
      let generate = defaultGenerator;
      return {
        configure(generator) {
          generate = generator;
        },
        generate(componentName) {
          return generate(componentName);
        },
        reset() {
          generate = defaultGenerator;
        }
      };
    };
    const ClassNameGenerator = createClassNameGenerator();
    var ClassNameGenerator$1 = ClassNameGenerator;

    // If GlobalStateSlot is changed, GLOBAL_STATE_CLASSES in
    // \packages\api-docs-builder\utils\parseSlotsAndClasses.ts must be updated accordingly.
    const globalStateClassesMapping = {
      active: 'active',
      checked: 'checked',
      completed: 'completed',
      disabled: 'disabled',
      error: 'error',
      expanded: 'expanded',
      focused: 'focused',
      focusVisible: 'focusVisible',
      open: 'open',
      readOnly: 'readOnly',
      required: 'required',
      selected: 'selected'
    };
    function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
      const globalStateClass = globalStateClassesMapping[slot];
      return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
    }

    function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
      const result = {};
      slots.forEach(slot => {
        result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
      });
      return result;
    }

    var THEME_ID = '$$material';

    function memoize$1(fn) {
      var cache = Object.create(null);
      return function (arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
      };
    }

    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

    var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
      /* o */
      && prop.charCodeAt(1) === 110
      /* n */
      && prop.charCodeAt(2) < 91;
    }
    /* Z+1 */
    );

    /*

    Based off glamor's StyleSheet, thanks Sunil ❤️

    high performance StyleSheet for css-in-js systems

    - uses multiple style tags behind the scenes for millions of rules
    - uses `insertRule` for appending in production for *much* faster performance

    // usage

    import { StyleSheet } from '@emotion/sheet'

    let styleSheet = new StyleSheet({ key: '', container: document.head })

    styleSheet.insert('#box { border: 1px solid red; }')
    - appends a css rule into the stylesheet

    styleSheet.flush()
    - empties the stylesheet of all its contents

    */
    // $FlowFixMe
    function sheetForTag(tag) {
      if (tag.sheet) {
        // $FlowFixMe
        return tag.sheet;
      } // this weirdness brought to you by firefox

      /* istanbul ignore next */


      for (var i = 0; i < document.styleSheets.length; i++) {
        if (document.styleSheets[i].ownerNode === tag) {
          // $FlowFixMe
          return document.styleSheets[i];
        }
      }
    }

    function createStyleElement(options) {
      var tag = document.createElement('style');
      tag.setAttribute('data-emotion', options.key);

      if (options.nonce !== undefined) {
        tag.setAttribute('nonce', options.nonce);
      }

      tag.appendChild(document.createTextNode(''));
      tag.setAttribute('data-s', '');
      return tag;
    }

    var StyleSheet = /*#__PURE__*/function () {
      // Using Node instead of HTMLElement since container may be a ShadowRoot
      function StyleSheet(options) {
        var _this = this;

        this._insertTag = function (tag) {
          var before;

          if (_this.tags.length === 0) {
            if (_this.insertionPoint) {
              before = _this.insertionPoint.nextSibling;
            } else if (_this.prepend) {
              before = _this.container.firstChild;
            } else {
              before = _this.before;
            }
          } else {
            before = _this.tags[_this.tags.length - 1].nextSibling;
          }

          _this.container.insertBefore(tag, before);

          _this.tags.push(tag);
        };

        this.isSpeedy = options.speedy === undefined ? "production" === 'production' : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
      }

      var _proto = StyleSheet.prototype;

      _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
      };

      _proto.insert = function insert(rule) {
        // the max length is how many rules we have per style tag, it's 65000 in speedy mode
        // it's 1 in dev because we insert source maps that map a single rule to a location
        // and you can only have one source map per style tag
        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
          this._insertTag(createStyleElement(this));
        }

        var tag = this.tags[this.tags.length - 1];

        if (this.isSpeedy) {
          var sheet = sheetForTag(tag);

          try {
            // this is the ultrafast version, works across browsers
            // the big drawback is that the css won't be editable in devtools
            sheet.insertRule(rule, sheet.cssRules.length);
          } catch (e) {
          }
        } else {
          tag.appendChild(document.createTextNode(rule));
        }

        this.ctr++;
      };

      _proto.flush = function flush() {
        // $FlowFixMe
        this.tags.forEach(function (tag) {
          return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
      };

      return StyleSheet;
    }();

    var e$2="-ms-";var r$1="-moz-";var a="-webkit-";var n$2="comm";var c$2="rule";var s="decl";var i="@import";var h$2="@keyframes";var $="@layer";var g$2=Math.abs;var k$2=String.fromCharCode;var m$2=Object.assign;function x$1(e,r){return O(e,0)^45?(((r<<2^O(e,0))<<2^O(e,1))<<2^O(e,2))<<2^O(e,3):0}function y$1(e){return e.trim()}function j(e,r){return (e=r.exec(e))?e[0]:e}function z$1(e,r,a){return e.replace(r,a)}function C(e,r){return e.indexOf(r)}function O(e,r){return e.charCodeAt(r)|0}function A$1(e,r,a){return e.slice(r,a)}function M(e){return e.length}function S(e){return e.length}function q$2(e,r){return r.push(e),e}function B(e,r){return e.map(r).join("")}var D=1;var E=1;var F=0;var G=0;var H=0;var I="";function J(e,r,a,n,c,s,t){return {value:e,root:r,parent:a,type:n,props:c,children:s,line:D,column:E,length:t,return:""}}function K(e,r){return m$2(J("",null,null,"",null,null,0),e,{length:-e.length},r)}function L(){return H}function N(){H=G>0?O(I,--G):0;if(E--,H===10)E=1,D--;return H}function P(){H=G<F?O(I,G++):0;if(E++,H===10)E=1,D++;return H}function Q(){return O(I,G)}function R(){return G}function T(e,r){return A$1(I,e,r)}function U(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function V(e){return D=E=1,F=M(I=e),G=0,[]}function W(e){return I="",e}function X(e){return y$1(T(G-1,re(e===91?e+2:e===40?e+1:e)))}function Z(e){while(H=Q())if(H<33)P();else break;return U(e)>2||U(H)>3?"":" "}function ee(e,r){while(--r&&P())if(H<48||H>102||H>57&&H<65||H>70&&H<97)break;return T(e,R()+(r<6&&Q()==32&&P()==32))}function re(e){while(P())switch(H){case e:return G;case 34:case 39:if(e!==34&&e!==39)re(H);break;case 40:if(e===41)re(e);break;case 92:P();break}return G}function ae(e,r){while(P())if(e+H===47+10)break;else if(e+H===42+42&&Q()===47)break;return "/*"+T(r,G-1)+"*"+k$2(e===47?e:P())}function ne(e){while(!U(Q()))P();return T(e,G)}function ce(e){return W(se("",null,null,null,[""],e=V(e),0,[0],e))}function se(e,r,a,n,c,s,t,u,i){var f=0;var o=0;var l=t;var v=0;var p=0;var h=0;var b=1;var w=1;var d=1;var $=0;var g="";var m=c;var x=s;var y=n;var j=g;while(w)switch(h=$,$=P()){case 40:if(h!=108&&O(j,l-1)==58){if(C(j+=z$1(X($),"&","&\f"),"&\f")!=-1)d=-1;break}case 34:case 39:case 91:j+=X($);break;case 9:case 10:case 13:case 32:j+=Z(h);break;case 92:j+=ee(R()-1,7);continue;case 47:switch(Q()){case 42:case 47:q$2(ue(ae(P(),R()),r,a),i);break;default:j+="/";}break;case 123*b:u[f++]=M(j)*d;case 125*b:case 59:case 0:switch($){case 0:case 125:w=0;case 59+o:if(d==-1)j=z$1(j,/\f/g,"");if(p>0&&M(j)-l)q$2(p>32?ie(j+";",n,a,l-1):ie(z$1(j," ","")+";",n,a,l-2),i);break;case 59:j+=";";default:q$2(y=te(j,r,a,f,o,c,u,g,m=[],x=[],l),s);if($===123)if(o===0)se(j,r,y,y,m,s,l,u,x);else switch(v===99&&O(j,3)===110?100:v){case 100:case 108:case 109:case 115:se(e,y,y,n&&q$2(te(e,y,y,0,0,c,u,g,c,m=[],l),x),c,x,l,u,n?m:x);break;default:se(j,y,y,y,[""],x,0,u,x);}}f=o=p=0,b=d=1,g=j="",l=t;break;case 58:l=1+M(j),p=h;default:if(b<1)if($==123)--b;else if($==125&&b++==0&&N()==125)continue;switch(j+=k$2($),$*b){case 38:d=o>0?1:(j+="\f",-1);break;case 44:u[f++]=(M(j)-1)*d,d=1;break;case 64:if(Q()===45)j+=X(P());v=Q(),o=l=M(g=j+=ne(R())),$++;break;case 45:if(h===45&&M(j)==2)b=0;}}return s}function te(e,r,a,n,s,t,u,i,f,o,l){var v=s-1;var p=s===0?t:[""];var h=S(p);for(var b=0,w=0,d=0;b<n;++b)for(var $=0,k=A$1(e,v+1,v=g$2(w=u[b])),m=e;$<h;++$)if(m=y$1(w>0?p[$]+" "+k:z$1(k,/&\f/g,p[$])))f[d++]=m;return J(e,r,a,s===0?c$2:i,f,o,l)}function ue(e,r,a){return J(e,r,a,n$2,k$2(L()),A$1(e,2,-2),0)}function ie(e,r,a,n){return J(e,r,a,s,A$1(e,0,n),A$1(e,n+1,-1),n)}function oe(e,r){var a="";var n=S(e);for(var c=0;c<n;c++)a+=r(e[c],c,e,r)||"";return a}function le(e,r,a,t){switch(e.type){case $:if(e.children.length)break;case i:case s:return e.return=e.return||e.value;case n$2:return "";case h$2:return e.return=e.value+"{"+oe(e.children,t)+"}";case c$2:e.value=e.props.join(",");}return M(a=oe(e.children,t))?e.return=e.value+"{"+a+"}":""}function ve(e){var r=S(e);return function(a,n,c,s){var t="";for(var u=0;u<r;u++)t+=e[u](a,n,c,s)||"";return t}}function pe(e){return function(r){if(!r.root)if(r=r.return)e(r);}}

    var weakMemoize = function weakMemoize(func) {
      // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
      var cache = new WeakMap();
      return function (arg) {
        if (cache.has(arg)) {
          // $FlowFixMe
          return cache.get(arg);
        }

        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
      };
    };

    var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
      var previous = 0;
      var character = 0;

      while (true) {
        previous = character;
        character = Q(); // &\f

        if (previous === 38 && character === 12) {
          points[index] = 1;
        }

        if (U(character)) {
          break;
        }

        P();
      }

      return T(begin, G);
    };

    var toRules = function toRules(parsed, points) {
      // pretend we've started with a comma
      var index = -1;
      var character = 44;

      do {
        switch (U(character)) {
          case 0:
            // &\f
            if (character === 38 && Q() === 12) {
              // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
              // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
              // and when it should just concatenate the outer and inner selectors
              // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
              points[index] = 1;
            }

            parsed[index] += identifierWithPointTracking(G - 1, points, index);
            break;

          case 2:
            parsed[index] += X(character);
            break;

          case 4:
            // comma
            if (character === 44) {
              // colon
              parsed[++index] = Q() === 58 ? '&\f' : '';
              points[index] = parsed[index].length;
              break;
            }

          // fallthrough

          default:
            parsed[index] += k$2(character);
        }
      } while (character = P());

      return parsed;
    };

    var getRules = function getRules(value, points) {
      return W(toRules(V(value), points));
    }; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


    var fixedElements = /* #__PURE__ */new WeakMap();
    var compat = function compat(element) {
      if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
      // negative .length indicates that this rule has been already prefixed
      element.length < 1) {
        return;
      }

      var value = element.value,
          parent = element.parent;
      var isImplicitRule = element.column === parent.column && element.line === parent.line;

      while (parent.type !== 'rule') {
        parent = parent.parent;
        if (!parent) return;
      } // short-circuit for the simplest case


      if (element.props.length === 1 && value.charCodeAt(0) !== 58
      /* colon */
      && !fixedElements.get(parent)) {
        return;
      } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
      // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


      if (isImplicitRule) {
        return;
      }

      fixedElements.set(element, true);
      var points = [];
      var rules = getRules(value, points);
      var parentRules = parent.props;

      for (var i = 0, k = 0; i < rules.length; i++) {
        for (var j = 0; j < parentRules.length; j++, k++) {
          element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
        }
      }
    };
    var removeLabel = function removeLabel(element) {
      if (element.type === 'decl') {
        var value = element.value;

        if ( // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98) {
          // this ignores label
          element["return"] = '';
          element.value = '';
        }
      }
    };

    /* eslint-disable no-fallthrough */

    function prefix(value, length) {
      switch (x$1(value, length)) {
        // color-adjust
        case 5103:
          return a + 'print-' + value + value;
        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
          return a + value + value;
        // appearance, user-select, transform, hyphens, text-size-adjust

        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
          return a + value + r$1 + value + e$2 + value + value;
        // flex, flex-direction

        case 6828:
        case 4268:
          return a + value + e$2 + value + value;
        // order

        case 6165:
          return a + value + e$2 + 'flex-' + value + value;
        // align-items

        case 5187:
          return a + value + z$1(value, /(\w+).+(:[^]+)/, a + 'box-$1$2' + e$2 + 'flex-$1$2') + value;
        // align-self

        case 5443:
          return a + value + e$2 + 'flex-item-' + z$1(value, /flex-|-self/, '') + value;
        // align-content

        case 4675:
          return a + value + e$2 + 'flex-line-pack' + z$1(value, /align-content|flex-|-self/, '') + value;
        // flex-shrink

        case 5548:
          return a + value + e$2 + z$1(value, 'shrink', 'negative') + value;
        // flex-basis

        case 5292:
          return a + value + e$2 + z$1(value, 'basis', 'preferred-size') + value;
        // flex-grow

        case 6060:
          return a + 'box-' + z$1(value, '-grow', '') + a + value + e$2 + z$1(value, 'grow', 'positive') + value;
        // transition

        case 4554:
          return a + z$1(value, /([^-])(transform)/g, '$1' + a + '$2') + value;
        // cursor

        case 6187:
          return z$1(z$1(z$1(value, /(zoom-|grab)/, a + '$1'), /(image-set)/, a + '$1'), value, '') + value;
        // background, background-image

        case 5495:
        case 3959:
          return z$1(value, /(image-set\([^]*)/, a + '$1' + '$`$1');
        // justify-content

        case 4968:
          return z$1(z$1(value, /(.+:)(flex-)?(.*)/, a + 'box-pack:$3' + e$2 + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + a + value + value;
        // (margin|padding)-inline-(start|end)

        case 4095:
        case 3583:
        case 4068:
        case 2532:
          return z$1(value, /(.+)-inline(.+)/, a + '$1$2') + value;
        // (min|max)?(width|height|inline-size|block-size)

        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
          // stretch, max-content, min-content, fill-available
          if (M(value) - 1 - length > 6) switch (O(value, length + 1)) {
            // (m)ax-content, (m)in-content
            case 109:
              // -
              if (O(value, length + 4) !== 45) break;
            // (f)ill-available, (f)it-content

            case 102:
              return z$1(value, /(.+:)(.+)-([^]+)/, '$1' + a + '$2-$3' + '$1' + r$1 + (O(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
            // (s)tretch

            case 115:
              return ~C(value, 'stretch') ? prefix(z$1(value, 'stretch', 'fill-available'), length) + value : value;
          }
          break;
        // position: sticky

        case 4949:
          // (s)ticky?
          if (O(value, length + 1) !== 115) break;
        // display: (flex|inline-flex)

        case 6444:
          switch (O(value, M(value) - 3 - (~C(value, '!important') && 10))) {
            // stic(k)y
            case 107:
              return z$1(value, ':', ':' + a) + value;
            // (inline-)?fl(e)x

            case 101:
              return z$1(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + a + (O(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + a + '$2$3' + '$1' + e$2 + '$2box$3') + value;
          }

          break;
        // writing-mode

        case 5936:
          switch (O(value, length + 11)) {
            // vertical-l(r)
            case 114:
              return a + value + e$2 + z$1(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
            // vertical-r(l)

            case 108:
              return a + value + e$2 + z$1(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
            // horizontal(-)tb

            case 45:
              return a + value + e$2 + z$1(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
          }

          return a + value + e$2 + value + value;
      }

      return value;
    }

    var prefixer = function prefixer(element, index, children, callback) {
      if (element.length > -1) if (!element["return"]) switch (element.type) {
        case s:
          element["return"] = prefix(element.value, element.length);
          break;

        case h$2:
          return oe([K(element, {
            value: z$1(element.value, '@', '@' + a)
          })], callback);

        case c$2:
          if (element.length) return B(element.props, function (value) {
            switch (j(value, /(::plac\w+|:read-\w+)/)) {
              // :read-(only|write)
              case ':read-only':
              case ':read-write':
                return oe([K(element, {
                  props: [z$1(value, /:(read-\w+)/, ':' + r$1 + '$1')]
                })], callback);
              // :placeholder

              case '::placeholder':
                return oe([K(element, {
                  props: [z$1(value, /:(plac\w+)/, ':' + a + 'input-$1')]
                }), K(element, {
                  props: [z$1(value, /:(plac\w+)/, ':' + r$1 + '$1')]
                }), K(element, {
                  props: [z$1(value, /:(plac\w+)/, e$2 + 'input-$1')]
                })], callback);
            }

            return '';
          });
      }
    };

    var isBrowser$4 = typeof document !== 'undefined';
    var getServerStylisCache = isBrowser$4 ? undefined : weakMemoize(function () {
      return memoize$1(function () {
        var cache = {};
        return function (name) {
          return cache[name];
        };
      });
    });
    var defaultStylisPlugins = [prefixer];

    var createCache = function createCache(options) {
      var key = options.key;

      if (isBrowser$4 && key === 'css') {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
        // note this very very intentionally targets all style elements regardless of the key to ensure
        // that creating a cache works inside of render of a React component

        Array.prototype.forEach.call(ssrStyles, function (node) {
          // we want to only move elements which have a space in the data-emotion attribute value
          // because that indicates that it is an Emotion 11 server-side rendered style elements
          // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
          // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
          // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
          // will not result in the Emotion 10 styles being destroyed
          var dataEmotionAttribute = node.getAttribute('data-emotion');

          if (dataEmotionAttribute.indexOf(' ') === -1) {
            return;
          }
          document.head.appendChild(node);
          node.setAttribute('data-s', '');
        });
      }

      var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

      var inserted = {};
      var container;
      var nodesToHydrate = [];

      if (isBrowser$4) {
        container = options.container || document.head;
        Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
          var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

          for (var i = 1; i < attrib.length; i++) {
            inserted[attrib[i]] = true;
          }

          nodesToHydrate.push(node);
        });
      }

      var _insert;

      var omnipresentPlugins = [compat, removeLabel];

      if (isBrowser$4) {
        var currentSheet;
        var finalizingPlugins = [le, pe(function (rule) {
          currentSheet.insert(rule);
        })];
        var serializer = ve(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

        var stylis = function stylis(styles) {
          return oe(ce(styles), serializer);
        };

        _insert = function insert(selector, serialized, sheet, shouldCache) {
          currentSheet = sheet;

          stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

          if (shouldCache) {
            cache.inserted[serialized.name] = true;
          }
        };
      } else {
        var _finalizingPlugins = [le];

        var _serializer = ve(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));

        var _stylis = function _stylis(styles) {
          return oe(ce(styles), _serializer);
        }; // $FlowFixMe


        var serverStylisCache = getServerStylisCache(stylisPlugins)(key);

        var getRules = function getRules(selector, serialized) {
          var name = serialized.name;

          if (serverStylisCache[name] === undefined) {
            serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
          }

          return serverStylisCache[name];
        };

        _insert = function _insert(selector, serialized, sheet, shouldCache) {
          var name = serialized.name;
          var rules = getRules(selector, serialized);

          if (cache.compat === undefined) {
            // in regular mode, we don't set the styles on the inserted cache
            // since we don't need to and that would be wasting memory
            // we return them so that they are rendered in a style tag
            if (shouldCache) {
              cache.inserted[name] = true;
            }

            return rules;
          } else {
            // in compat mode, we put the styles on the inserted cache so
            // that emotion-server can pull out the styles
            // except when we don't want to cache it which was in Global but now
            // is nowhere but we don't want to do a major right now
            // and just in case we're going to leave the case here
            // it's also not affecting client side bundle size
            // so it's really not a big deal
            if (shouldCache) {
              cache.inserted[name] = rules;
            } else {
              return rules;
            }
          }
        };
      }

      var cache = {
        key: key,
        sheet: new StyleSheet({
          key: key,
          container: container,
          nonce: options.nonce,
          speedy: options.speedy,
          prepend: options.prepend,
          insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted: inserted,
        registered: {},
        insert: _insert
      };
      cache.sheet.hydrate(nodesToHydrate);
      return cache;
    };

    /** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$1="function"===typeof Symbol&&Symbol.for,c$1=b$1?Symbol.for("react.element"):60103,d$1=b$1?Symbol.for("react.portal"):60106,e$1=b$1?Symbol.for("react.fragment"):60107,f$1=b$1?Symbol.for("react.strict_mode"):60108,g$1=b$1?Symbol.for("react.profiler"):60114,h$1=b$1?Symbol.for("react.provider"):60109,k$1=b$1?Symbol.for("react.context"):60110,l$1=b$1?Symbol.for("react.async_mode"):60111,m$1=b$1?Symbol.for("react.concurrent_mode"):60111,n$1=b$1?Symbol.for("react.forward_ref"):60112,p$1=b$1?Symbol.for("react.suspense"):60113,q$1=b$1?
    Symbol.for("react.suspense_list"):60120,r=b$1?Symbol.for("react.memo"):60115,t$1=b$1?Symbol.for("react.lazy"):60116,v$1=b$1?Symbol.for("react.block"):60121,w=b$1?Symbol.for("react.fundamental"):60117,x=b$1?Symbol.for("react.responder"):60118,y=b$1?Symbol.for("react.scope"):60119;
    function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$1:switch(a=a.type,a){case l$1:case m$1:case e$1:case g$1:case f$1:case p$1:return a;default:switch(a=a&&a.$$typeof,a){case k$1:case n$1:case t$1:case r:case h$1:return a;default:return u}}case d$1:return u}}}function A(a){return z(a)===m$1}var AsyncMode=l$1;var ConcurrentMode=m$1;var ContextConsumer$1=k$1;var ContextProvider$1=h$1;var Element$2=c$1;var ForwardRef$1=n$1;var Fragment$1=e$1;var Lazy$1=t$1;var Memo$1=r;var Portal$2=d$1;
    var Profiler$1=g$1;var StrictMode$1=f$1;var Suspense$1=p$1;var isAsyncMode$1=function(a){return A(a)||z(a)===l$1};var isConcurrentMode$1=A;var isContextConsumer$1=function(a){return z(a)===k$1};var isContextProvider$1=function(a){return z(a)===h$1};var isElement$2=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$1};var isForwardRef$1=function(a){return z(a)===n$1};var isFragment$1=function(a){return z(a)===e$1};var isLazy$1=function(a){return z(a)===t$1};
    var isMemo$1=function(a){return z(a)===r};var isPortal$1=function(a){return z(a)===d$1};var isProfiler$1=function(a){return z(a)===g$1};var isStrictMode$1=function(a){return z(a)===f$1};var isSuspense$1=function(a){return z(a)===p$1};
    var isValidElementType$1=function(a){return "string"===typeof a||"function"===typeof a||a===e$1||a===m$1||a===g$1||a===f$1||a===p$1||a===q$1||"object"===typeof a&&null!==a&&(a.$$typeof===t$1||a.$$typeof===r||a.$$typeof===h$1||a.$$typeof===k$1||a.$$typeof===n$1||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v$1)};var typeOf$1=z;

    var reactIs_production_min$1 = {
    	AsyncMode: AsyncMode,
    	ConcurrentMode: ConcurrentMode,
    	ContextConsumer: ContextConsumer$1,
    	ContextProvider: ContextProvider$1,
    	Element: Element$2,
    	ForwardRef: ForwardRef$1,
    	Fragment: Fragment$1,
    	Lazy: Lazy$1,
    	Memo: Memo$1,
    	Portal: Portal$2,
    	Profiler: Profiler$1,
    	StrictMode: StrictMode$1,
    	Suspense: Suspense$1,
    	isAsyncMode: isAsyncMode$1,
    	isConcurrentMode: isConcurrentMode$1,
    	isContextConsumer: isContextConsumer$1,
    	isContextProvider: isContextProvider$1,
    	isElement: isElement$2,
    	isForwardRef: isForwardRef$1,
    	isFragment: isFragment$1,
    	isLazy: isLazy$1,
    	isMemo: isMemo$1,
    	isPortal: isPortal$1,
    	isProfiler: isProfiler$1,
    	isStrictMode: isStrictMode$1,
    	isSuspense: isSuspense$1,
    	isValidElementType: isValidElementType$1,
    	typeOf: typeOf$1
    };

    var reactIs$1 = createCommonjsModule(function (module) {

    {
      module.exports = reactIs_production_min$1;
    }
    });

    var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;

    var isBrowser$3 = typeof document !== 'undefined';
    function getRegisteredStyles(registered, registeredStyles, classNames) {
      var rawClassName = '';
      classNames.split(' ').forEach(function (className) {
        if (registered[className] !== undefined) {
          registeredStyles.push(registered[className] + ";");
        } else {
          rawClassName += className + " ";
        }
      });
      return rawClassName;
    }
    var registerStyles = function registerStyles(cache, serialized, isStringTag) {
      var className = cache.key + "-" + serialized.name;

      if ( // we only need to add the styles to the registered cache if the
      // class name could be used further down
      // the tree but if it's a string tag, we know it won't
      // so we don't have to add it to registered cache.
      // this improves memory usage since we can avoid storing the whole style string
      (isStringTag === false || // we need to always store it if we're in compat mode and
      // in node since emotion-server relies on whether a style is in
      // the registered cache to know whether a style is global or not
      // also, note that this check will be dead code eliminated in the browser
      isBrowser$3 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
        cache.registered[className] = serialized.styles;
      }
    };
    var insertStyles = function insertStyles(cache, serialized, isStringTag) {
      registerStyles(cache, serialized, isStringTag);
      var className = cache.key + "-" + serialized.name;

      if (cache.inserted[serialized.name] === undefined) {
        var stylesForSSR = '';
        var current = serialized;

        do {
          var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

          if (!isBrowser$3 && maybeStyles !== undefined) {
            stylesForSSR += maybeStyles;
          }

          current = current.next;
        } while (current !== undefined);

        if (!isBrowser$3 && stylesForSSR.length !== 0) {
          return stylesForSSR;
        }
      }
    };

    /* eslint-disable */
    // Inspired by https://github.com/garycourt/murmurhash-js
    // Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
    function murmur2(str) {
      // 'm' and 'r' are mixing constants generated offline.
      // They're not really 'magic', they just happen to work well.
      // const m = 0x5bd1e995;
      // const r = 24;
      // Initialize the hash
      var h = 0; // Mix 4 bytes at a time into the hash

      var k,
          i = 0,
          len = str.length;

      for (; len >= 4; ++i, len -= 4) {
        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
        k =
        /* Math.imul(k, m): */
        (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
        k ^=
        /* k >>> r: */
        k >>> 24;
        h =
        /* Math.imul(k, m): */
        (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
        /* Math.imul(h, m): */
        (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
      } // Handle the last few bytes of the input array


      switch (len) {
        case 3:
          h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

        case 2:
          h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

        case 1:
          h ^= str.charCodeAt(i) & 0xff;
          h =
          /* Math.imul(h, m): */
          (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
      } // Do a few final mixes of the hash to ensure the last few
      // bytes are well-incorporated.


      h ^= h >>> 13;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
      return ((h ^ h >>> 15) >>> 0).toString(36);
    }

    var unitlessKeys = {
      animationIterationCount: 1,
      aspectRatio: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      // SVG-related properties
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };

    var hyphenateRegex = /[A-Z]|^ms/g;
    var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

    var isCustomProperty = function isCustomProperty(property) {
      return property.charCodeAt(1) === 45;
    };

    var isProcessableValue = function isProcessableValue(value) {
      return value != null && typeof value !== 'boolean';
    };

    var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
      return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
    });

    var processStyleValue = function processStyleValue(key, value) {
      switch (key) {
        case 'animation':
        case 'animationName':
          {
            if (typeof value === 'string') {
              return value.replace(animationRegex, function (match, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
      }

      if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
        return value + 'px';
      }

      return value;
    };

    var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

    function handleInterpolation(mergedProps, registered, interpolation) {
      if (interpolation == null) {
        return '';
      }

      if (interpolation.__emotion_styles !== undefined) {

        return interpolation;
      }

      switch (typeof interpolation) {
        case 'boolean':
          {
            return '';
          }

        case 'object':
          {
            if (interpolation.anim === 1) {
              cursor = {
                name: interpolation.name,
                styles: interpolation.styles,
                next: cursor
              };
              return interpolation.name;
            }

            if (interpolation.styles !== undefined) {
              var next = interpolation.next;

              if (next !== undefined) {
                // not the most efficient thing ever but this is a pretty rare case
                // and there will be very few iterations of this generally
                while (next !== undefined) {
                  cursor = {
                    name: next.name,
                    styles: next.styles,
                    next: cursor
                  };
                  next = next.next;
                }
              }

              var styles = interpolation.styles + ";";

              return styles;
            }

            return createStringFromObject(mergedProps, registered, interpolation);
          }

        case 'function':
          {
            if (mergedProps !== undefined) {
              var previousCursor = cursor;
              var result = interpolation(mergedProps);
              cursor = previousCursor;
              return handleInterpolation(mergedProps, registered, result);
            }

            break;
          }
      } // finalize string values (regular strings and functions interpolated into css calls)


      if (registered == null) {
        return interpolation;
      }

      var cached = registered[interpolation];
      return cached !== undefined ? cached : interpolation;
    }

    function createStringFromObject(mergedProps, registered, obj) {
      var string = '';

      if (Array.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
          string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
        }
      } else {
        for (var _key in obj) {
          var value = obj[_key];

          if (typeof value !== 'object') {
            if (registered != null && registered[value] !== undefined) {
              string += _key + "{" + registered[value] + "}";
            } else if (isProcessableValue(value)) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
            }
          } else {
            if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {
              throw new Error(noComponentSelectorMessage);
            }

            if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
              for (var _i = 0; _i < value.length; _i++) {
                if (isProcessableValue(value[_i])) {
                  string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
                }
              }
            } else {
              var interpolated = handleInterpolation(mergedProps, registered, value);

              switch (_key) {
                case 'animation':
                case 'animationName':
                  {
                    string += processStyleName(_key) + ":" + interpolated + ";";
                    break;
                  }

                default:
                  {

                    string += _key + "{" + interpolated + "}";
                  }
              }
            }
          }
        }
      }

      return string;
    }

    var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
    // keyframes are stored on the SerializedStyles object as a linked list


    var cursor;
    var serializeStyles = function serializeStyles(args, registered, mergedProps) {
      if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
        return args[0];
      }

      var stringMode = true;
      var styles = '';
      cursor = undefined;
      var strings = args[0];

      if (strings == null || strings.raw === undefined) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
      } else {

        styles += strings[0];
      } // we start at 1 since we've already handled the first arg


      for (var i = 1; i < args.length; i++) {
        styles += handleInterpolation(mergedProps, registered, args[i]);

        if (stringMode) {

          styles += strings[i];
        }
      }


      labelPattern.lastIndex = 0;
      var identifierName = '';
      var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

      while ((match = labelPattern.exec(styles)) !== null) {
        identifierName += '-' + // $FlowFixMe we know it's not null
        match[1];
      }

      var name = murmur2(styles) + identifierName;

      return {
        name: name,
        styles: styles,
        next: cursor
      };
    };

    var isBrowser$2 = typeof document !== 'undefined';

    var syncFallback = function syncFallback(create) {
      return create();
    };

    var useInsertionEffect = React__namespace['useInsertion' + 'Effect'] ? React__namespace['useInsertion' + 'Effect'] : false;
    var useInsertionEffectAlwaysWithSyncFallback = !isBrowser$2 ? syncFallback : useInsertionEffect || syncFallback;
    var useInsertionEffectWithLayoutFallback = useInsertionEffect || React__namespace.useLayoutEffect;

    var isBrowser$1 = typeof document !== 'undefined';

    var EmotionCacheContext = /* #__PURE__ */React__namespace.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
    // because this module is primarily intended for the browser and node
    // but it's also required in react native and similar environments sometimes
    // and we could have a special build just for that
    // but this is much easier and the native packages
    // might use a different theme context in the future anyway
    typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
      key: 'css'
    }) : null);

    EmotionCacheContext.Provider;

    var withEmotionCache = function withEmotionCache(func) {
      // $FlowFixMe
      return /*#__PURE__*/React.forwardRef(function (props, ref) {
        // the cache will never be null in the browser
        var cache = React.useContext(EmotionCacheContext);
        return func(props, cache, ref);
      });
    };

    if (!isBrowser$1) {
      withEmotionCache = function withEmotionCache(func) {
        return function (props) {
          var cache = React.useContext(EmotionCacheContext);

          if (cache === null) {
            // yes, we're potentially creating this on every render
            // it doesn't actually matter though since it's only on the server
            // so there will only every be a single render
            // that could change in the future because of suspense and etc. but for now,
            // this works and i don't want to optimise for a future thing that we aren't sure about
            cache = createCache({
              key: 'css'
            });
            return /*#__PURE__*/React__namespace.createElement(EmotionCacheContext.Provider, {
              value: cache
            }, func(props, cache));
          } else {
            return func(props, cache);
          }
        };
      };
    }

    var ThemeContext = /* #__PURE__ */React__namespace.createContext({});

    var _extends_1 = createCommonjsModule(function (module) {
    function _extends() {
      module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _extends.apply(this, arguments);
    }
    module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    unwrapExports(_extends_1);

    // initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
    // initial client-side render from SSR, use place of hydrating tag

    var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {

      var styles = props.styles;
      var serialized = serializeStyles([styles], undefined, React__namespace.useContext(ThemeContext));

      if (!isBrowser$1) {
        var _ref;

        var serializedNames = serialized.name;
        var serializedStyles = serialized.styles;
        var next = serialized.next;

        while (next !== undefined) {
          serializedNames += ' ' + next.name;
          serializedStyles += next.styles;
          next = next.next;
        }

        var shouldCache = cache.compat === true;
        var rules = cache.insert("", {
          name: serializedNames,
          styles: serializedStyles
        }, cache.sheet, shouldCache);

        if (shouldCache) {
          return null;
        }

        return /*#__PURE__*/React__namespace.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
          __html: rules
        }, _ref.nonce = cache.sheet.nonce, _ref));
      } // yes, i know these hooks are used conditionally
      // but it is based on a constant that will never change at runtime
      // it's effectively like having two implementations and switching them out
      // so it's not actually breaking anything


      var sheetRef = React__namespace.useRef();
      useInsertionEffectWithLayoutFallback(function () {
        var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

        var sheet = new cache.sheet.constructor({
          key: key,
          nonce: cache.sheet.nonce,
          container: cache.sheet.container,
          speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false; // $FlowFixMe

        var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

        if (cache.sheet.tags.length) {
          sheet.before = cache.sheet.tags[0];
        }

        if (node !== null) {
          rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

          node.setAttribute('data-emotion', key);
          sheet.hydrate([node]);
        }

        sheetRef.current = [sheet, rehydrating];
        return function () {
          sheet.flush();
        };
      }, [cache]);
      useInsertionEffectWithLayoutFallback(function () {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0],
            rehydrating = sheetRefCurrent[1];

        if (rehydrating) {
          sheetRefCurrent[1] = false;
          return;
        }

        if (serialized.next !== undefined) {
          // insert keyframes
          insertStyles(cache, serialized.next, true);
        }

        if (sheet.tags.length) {
          // if this doesn't exist then it will be null so the style element will be appended
          var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
          sheet.before = element;
          sheet.flush();
        }

        cache.insert("", serialized, sheet, false);
      }, [cache, serialized.name]);
      return null;
    });

    function css() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return serializeStyles(args);
    }

    var keyframes = function keyframes() {
      var insertable = css.apply(void 0, arguments);
      var name = "animation-" + insertable.name; // $FlowFixMe

      return {
        name: name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
          return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
      };
    };

    var testOmitPropsOnStringTag = isPropValid;

    var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
      return key !== 'theme';
    };

    var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
      return typeof tag === 'string' && // 96 is one less than the char code
      // for "a" so this is checking that
      // it's a lowercase character
      tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
    };
    var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
      var shouldForwardProp;

      if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
          return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
      }

      if (typeof shouldForwardProp !== 'function' && isReal) {
        shouldForwardProp = tag.__emotion_forwardProp;
      }

      return shouldForwardProp;
    };
    var isBrowser = typeof document !== 'undefined';

    var Insertion = function Insertion(_ref) {
      var cache = _ref.cache,
          serialized = _ref.serialized,
          isStringTag = _ref.isStringTag;
      registerStyles(cache, serialized, isStringTag);
      var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
        return insertStyles(cache, serialized, isStringTag);
      });

      if (!isBrowser && rules !== undefined) {
        var _ref2;

        var serializedNames = serialized.name;
        var next = serialized.next;

        while (next !== undefined) {
          serializedNames += ' ' + next.name;
          next = next.next;
        }

        return /*#__PURE__*/React__namespace.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
          __html: rules
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
      }

      return null;
    };

    var createStyled$1 = function createStyled(tag, options) {

      var isReal = tag.__emotion_real === tag;
      var baseTag = isReal && tag.__emotion_base || tag;
      var identifierName;
      var targetClassName;

      if (options !== undefined) {
        identifierName = options.label;
        targetClassName = options.target;
      }

      var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
      var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
      var shouldUseAs = !defaultShouldForwardProp('as');
      return function () {
        var args = arguments;
        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

        if (identifierName !== undefined) {
          styles.push("label:" + identifierName + ";");
        }

        if (args[0] == null || args[0].raw === undefined) {
          styles.push.apply(styles, args);
        } else {

          styles.push(args[0][0]);
          var len = args.length;
          var i = 1;

          for (; i < len; i++) {

            styles.push(args[i], args[0][i]);
          }
        } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


        var Styled = withEmotionCache(function (props, cache, ref) {
          var FinalTag = shouldUseAs && props.as || baseTag;
          var className = '';
          var classInterpolations = [];
          var mergedProps = props;

          if (props.theme == null) {
            mergedProps = {};

            for (var key in props) {
              mergedProps[key] = props[key];
            }

            mergedProps.theme = React__namespace.useContext(ThemeContext);
          }

          if (typeof props.className === 'string') {
            className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
          } else if (props.className != null) {
            className = props.className + " ";
          }

          var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
          className += cache.key + "-" + serialized.name;

          if (targetClassName !== undefined) {
            className += " " + targetClassName;
          }

          var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
          var newProps = {};

          for (var _key in props) {
            if (shouldUseAs && _key === 'as') continue;

            if ( // $FlowFixMe
            finalShouldForwardProp(_key)) {
              newProps[_key] = props[_key];
            }
          }

          newProps.className = className;
          newProps.ref = ref;
          return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement(Insertion, {
            cache: cache,
            serialized: serialized,
            isStringTag: typeof FinalTag === 'string'
          }), /*#__PURE__*/React__namespace.createElement(FinalTag, newProps));
        });
        Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles;
        Styled.__emotion_forwardProp = shouldForwardProp;
        Object.defineProperty(Styled, 'toString', {
          value: function value() {
            if (targetClassName === undefined && "production" !== 'production') {
              return 'NO_COMPONENT_SELECTOR';
            } // $FlowFixMe: coerce undefined to string


            return "." + targetClassName;
          }
        });

        Styled.withComponent = function (nextTag, nextOptions) {
          return createStyled(nextTag, _extends({}, options, nextOptions, {
            shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
          })).apply(void 0, styles);
        };

        return Styled;
      };
    };

    var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
    'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

    var newStyled = createStyled$1.bind();
    tags.forEach(function (tagName) {
      // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
      newStyled[tagName] = newStyled(tagName);
    });

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
    	if (val === null || val === undefined) {
    		throw new TypeError('Object.assign cannot be called with null or undefined');
    	}

    	return Object(val);
    }

    function shouldUseNative() {
    	try {
    		if (!Object.assign) {
    			return false;
    		}

    		// Detect buggy property enumeration order in older V8 versions.

    		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
    		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
    		test1[5] = 'de';
    		if (Object.getOwnPropertyNames(test1)[0] === '5') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test2 = {};
    		for (var i = 0; i < 10; i++) {
    			test2['_' + String.fromCharCode(i)] = i;
    		}
    		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    			return test2[n];
    		});
    		if (order2.join('') !== '0123456789') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test3 = {};
    		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    			test3[letter] = letter;
    		});
    		if (Object.keys(Object.assign({}, test3)).join('') !==
    				'abcdefghijklmnopqrst') {
    			return false;
    		}

    		return true;
    	} catch (err) {
    		// We don't expect any of the above to throw, but better to be safe.
    		return false;
    	}
    }

    shouldUseNative() ? Object.assign : function (target, source) {
    	var from;
    	var to = toObject(target);
    	var symbols;

    	for (var s = 1; s < arguments.length; s++) {
    		from = Object(arguments[s]);

    		for (var key in from) {
    			if (hasOwnProperty.call(from, key)) {
    				to[key] = from[key];
    			}
    		}

    		if (getOwnPropertySymbols) {
    			symbols = getOwnPropertySymbols(from);
    			for (var i = 0; i < symbols.length; i++) {
    				if (propIsEnumerable.call(from, symbols[i])) {
    					to[symbols[i]] = from[symbols[i]];
    				}
    			}
    		}
    	}

    	return to;
    };

    var reactJsxRuntime_production_min = createCommonjsModule(function (module, exports) {
    var g=60103;exports.Fragment=60107;if("function"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element");exports.Fragment=h("react.fragment");}var m=React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};
    function q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=""+k);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;
    });
    reactJsxRuntime_production_min.Fragment;
    reactJsxRuntime_production_min.jsx;
    reactJsxRuntime_production_min.jsxs;

    var jsxRuntime = createCommonjsModule(function (module) {

    {
      module.exports = reactJsxRuntime_production_min;
    }
    });
    var jsxRuntime_1 = jsxRuntime.jsx;
    var jsxRuntime_2 = jsxRuntime.jsxs;

    function isEmpty$4(obj) {
      return obj === undefined || obj === null || Object.keys(obj).length === 0;
    }
    function GlobalStyles$2(props) {
      const {
        styles,
        defaultTheme = {}
      } = props;
      const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$4(themeInput) ? defaultTheme : themeInput) : styles;
      return /*#__PURE__*/jsxRuntime_1(Global, {
        styles: globalStyles
      });
    }

    /**
     * @mui/styled-engine v5.14.13
     *
     * @license MIT
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    function styled$2(tag, options) {
      const stylesFactory = newStyled(tag, options);
      return stylesFactory;
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention
    const internal_processStyles = (tag, processor) => {
      // Emotion attaches all the styles as `__emotion_styles`.
      // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
      if (Array.isArray(tag.__emotion_styles)) {
        tag.__emotion_styles = processor(tag.__emotion_styles);
      }
    };

    const _excluded$15 = ["values", "unit", "step"];
    const sortBreakpointsValues = values => {
      const breakpointsAsArray = Object.keys(values).map(key => ({
        key,
        val: values[key]
      })) || [];
      // Sort in ascending order
      breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
      return breakpointsAsArray.reduce((acc, obj) => {
        return _extends({}, acc, {
          [obj.key]: obj.val
        });
      }, {});
    };

    // Keep in mind that @media is inclusive by the CSS specification.
    function createBreakpoints(breakpoints) {
      const {
          // The breakpoint **start** at this value.
          // For instance with the first breakpoint xs: [xs, sm).
          values = {
            xs: 0,
            // phone
            sm: 600,
            // tablet
            md: 900,
            // small laptop
            lg: 1200,
            // desktop
            xl: 1536 // large screen
          },

          unit = 'px',
          step = 5
        } = breakpoints,
        other = _objectWithoutPropertiesLoose(breakpoints, _excluded$15);
      const sortedValues = sortBreakpointsValues(values);
      const keys = Object.keys(sortedValues);
      function up(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (min-width:${value}${unit})`;
      }
      function down(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (max-width:${value - step / 100}${unit})`;
      }
      function between(start, end) {
        const endIndex = keys.indexOf(end);
        return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
      }
      function only(key) {
        if (keys.indexOf(key) + 1 < keys.length) {
          return between(key, keys[keys.indexOf(key) + 1]);
        }
        return up(key);
      }
      function not(key) {
        // handle first and last key separately, for better readability
        const keyIndex = keys.indexOf(key);
        if (keyIndex === 0) {
          return up(keys[1]);
        }
        if (keyIndex === keys.length - 1) {
          return down(keys[keyIndex]);
        }
        return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
      }
      return _extends({
        keys,
        values: sortedValues,
        up,
        down,
        between,
        only,
        not,
        unit
      }, other);
    }

    const shape = {
      borderRadius: 4
    };
    var shape$1 = shape;

    function merge(acc, item) {
      if (!item) {
        return acc;
      }
      return deepmerge(acc, item, {
        clone: false // No need to clone deep, it's way faster.
      });
    }

    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm[.
    const values$1 = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536 // large screen
    };

    const defaultBreakpoints = {
      // Sorted ASC by size. That's important.
      // It can't be configured as it's used statically for propTypes.
      keys: ['xs', 'sm', 'md', 'lg', 'xl'],
      up: key => `@media (min-width:${values$1[key]}px)`
    };
    function handleBreakpoints(props, propValue, styleFromPropValue) {
      const theme = props.theme || {};
      if (Array.isArray(propValue)) {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index) => {
          acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
          return acc;
        }, {});
      }
      if (typeof propValue === 'object') {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint) => {
          // key is breakpoint
          if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
            const mediaKey = themeBreakpoints.up(breakpoint);
            acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
          } else {
            const cssKey = breakpoint;
            acc[cssKey] = propValue[cssKey];
          }
          return acc;
        }, {});
      }
      const output = styleFromPropValue(propValue);
      return output;
    }
    function createEmptyBreakpointObject(breakpointsInput = {}) {
      var _breakpointsInput$key;
      const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {};
        return acc;
      }, {});
      return breakpointsInOrder || {};
    }
    function removeUnusedBreakpoints(breakpointKeys, style) {
      return breakpointKeys.reduce((acc, key) => {
        const breakpointOutput = acc[key];
        const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) {
          delete acc[key];
        }
        return acc;
      }, style);
    }

    function getPath(obj, path, checkVars = true) {
      if (!path || typeof path !== 'string') {
        return null;
      }

      // Check if CSS variables are used
      if (obj && obj.vars && checkVars) {
        const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
        if (val != null) {
          return val;
        }
      }
      return path.split('.').reduce((acc, item) => {
        if (acc && acc[item] != null) {
          return acc[item];
        }
        return null;
      }, obj);
    }
    function getStyleValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
      let value;
      if (typeof themeMapping === 'function') {
        value = themeMapping(propValueFinal);
      } else if (Array.isArray(themeMapping)) {
        value = themeMapping[propValueFinal] || userValue;
      } else {
        value = getPath(themeMapping, propValueFinal) || userValue;
      }
      if (transform) {
        value = transform(value, userValue, themeMapping);
      }
      return value;
    }
    function style$1(options) {
      const {
        prop,
        cssProperty = options.prop,
        themeKey,
        transform
      } = options;

      // false positive
      // eslint-disable-next-line react/function-component-definition
      const fn = props => {
        if (props[prop] == null) {
          return null;
        }
        const propValue = props[prop];
        const theme = props.theme;
        const themeMapping = getPath(theme, themeKey) || {};
        const styleFromPropValue = propValueFinal => {
          let value = getStyleValue$1(themeMapping, transform, propValueFinal);
          if (propValueFinal === value && typeof propValueFinal === 'string') {
            // Haven't found value
            value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value;
          }
          return {
            [cssProperty]: value
          };
        };
        return handleBreakpoints(props, propValue, styleFromPropValue);
      };
      fn.propTypes = {};
      fn.filterProps = [prop];
      return fn;
    }

    function memoize(fn) {
      const cache = {};
      return arg => {
        if (cache[arg] === undefined) {
          cache[arg] = fn(arg);
        }
        return cache[arg];
      };
    }

    const properties = {
      m: 'margin',
      p: 'padding'
    };
    const directions = {
      t: 'Top',
      r: 'Right',
      b: 'Bottom',
      l: 'Left',
      x: ['Left', 'Right'],
      y: ['Top', 'Bottom']
    };
    const aliases = {
      marginX: 'mx',
      marginY: 'my',
      paddingX: 'px',
      paddingY: 'py'
    };

    // memoize() impact:
    // From 300,000 ops/sec
    // To 350,000 ops/sec
    const getCssProperties = memoize(prop => {
      // It's not a shorthand notation.
      if (prop.length > 2) {
        if (aliases[prop]) {
          prop = aliases[prop];
        } else {
          return [prop];
        }
      }
      const [a, b] = prop.split('');
      const property = properties[a];
      const direction = directions[b] || '';
      return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
    });
    const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
    const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
    [...marginKeys, ...paddingKeys];
    function createUnaryUnit(theme, themeKey, defaultValue, propName) {
      var _getPath;
      const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
      if (typeof themeSpacing === 'number') {
        return abs => {
          if (typeof abs === 'string') {
            return abs;
          }
          return themeSpacing * abs;
        };
      }
      if (Array.isArray(themeSpacing)) {
        return abs => {
          if (typeof abs === 'string') {
            return abs;
          }
          return themeSpacing[abs];
        };
      }
      if (typeof themeSpacing === 'function') {
        return themeSpacing;
      }
      return () => undefined;
    }
    function createUnarySpacing(theme) {
      return createUnaryUnit(theme, 'spacing', 8);
    }
    function getValue(transformer, propValue) {
      if (typeof propValue === 'string' || propValue == null) {
        return propValue;
      }
      const abs = Math.abs(propValue);
      const transformed = transformer(abs);
      if (propValue >= 0) {
        return transformed;
      }
      if (typeof transformed === 'number') {
        return -transformed;
      }
      return `-${transformed}`;
    }
    function getStyleFromPropValue(cssProperties, transformer) {
      return propValue => cssProperties.reduce((acc, cssProperty) => {
        acc[cssProperty] = getValue(transformer, propValue);
        return acc;
      }, {});
    }
    function resolveCssProperty(props, keys, prop, transformer) {
      // Using a hash computation over an array iteration could be faster, but with only 28 items,
      // it's doesn't worth the bundle size.
      if (keys.indexOf(prop) === -1) {
        return null;
      }
      const cssProperties = getCssProperties(prop);
      const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
      const propValue = props[prop];
      return handleBreakpoints(props, propValue, styleFromPropValue);
    }
    function style(props, keys) {
      const transformer = createUnarySpacing(props.theme);
      return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
    }
    function margin(props) {
      return style(props, marginKeys);
    }
    margin.propTypes = {};
    margin.filterProps = marginKeys;
    function padding(props) {
      return style(props, paddingKeys);
    }
    padding.propTypes = {};
    padding.filterProps = paddingKeys;

    // The different signatures imply different meaning for their arguments that can't be expressed structurally.
    // We express the difference with variable names.
    /* tslint:disable:unified-signatures */
    /* tslint:enable:unified-signatures */

    function createSpacing(spacingInput = 8) {
      // Already transformed.
      if (spacingInput.mui) {
        return spacingInput;
      }

      // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
      // Smaller components, such as icons, can align to a 4dp grid.
      // https://m2.material.io/design/layout/understanding-layout.html
      const transform = createUnarySpacing({
        spacing: spacingInput
      });
      const spacing = (...argsInput) => {
        const args = argsInput.length === 0 ? [1] : argsInput;
        return args.map(argument => {
          const output = transform(argument);
          return typeof output === 'number' ? `${output}px` : output;
        }).join(' ');
      };
      spacing.mui = true;
      return spacing;
    }

    function compose(...styles) {
      const handlers = styles.reduce((acc, style) => {
        style.filterProps.forEach(prop => {
          acc[prop] = style;
        });
        return acc;
      }, {});

      // false positive
      // eslint-disable-next-line react/function-component-definition
      const fn = props => {
        return Object.keys(props).reduce((acc, prop) => {
          if (handlers[prop]) {
            return merge(acc, handlers[prop](props));
          }
          return acc;
        }, {});
      };
      fn.propTypes = {};
      fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
      return fn;
    }

    function borderTransform(value) {
      if (typeof value !== 'number') {
        return value;
      }
      return `${value}px solid`;
    }
    const border = style$1({
      prop: 'border',
      themeKey: 'borders',
      transform: borderTransform
    });
    const borderTop = style$1({
      prop: 'borderTop',
      themeKey: 'borders',
      transform: borderTransform
    });
    const borderRight = style$1({
      prop: 'borderRight',
      themeKey: 'borders',
      transform: borderTransform
    });
    const borderBottom = style$1({
      prop: 'borderBottom',
      themeKey: 'borders',
      transform: borderTransform
    });
    const borderLeft = style$1({
      prop: 'borderLeft',
      themeKey: 'borders',
      transform: borderTransform
    });
    const borderColor = style$1({
      prop: 'borderColor',
      themeKey: 'palette'
    });
    const borderTopColor = style$1({
      prop: 'borderTopColor',
      themeKey: 'palette'
    });
    const borderRightColor = style$1({
      prop: 'borderRightColor',
      themeKey: 'palette'
    });
    const borderBottomColor = style$1({
      prop: 'borderBottomColor',
      themeKey: 'palette'
    });
    const borderLeftColor = style$1({
      prop: 'borderLeftColor',
      themeKey: 'palette'
    });

    // false positive
    // eslint-disable-next-line react/function-component-definition
    const borderRadius = props => {
      if (props.borderRadius !== undefined && props.borderRadius !== null) {
        const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4);
        const styleFromPropValue = propValue => ({
          borderRadius: getValue(transformer, propValue)
        });
        return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
      }
      return null;
    };
    borderRadius.propTypes = {};
    borderRadius.filterProps = ['borderRadius'];
    compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);

    // false positive
    // eslint-disable-next-line react/function-component-definition
    const gap = props => {
      if (props.gap !== undefined && props.gap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8);
        const styleFromPropValue = propValue => ({
          gap: getValue(transformer, propValue)
        });
        return handleBreakpoints(props, props.gap, styleFromPropValue);
      }
      return null;
    };
    gap.propTypes = {};
    gap.filterProps = ['gap'];

    // false positive
    // eslint-disable-next-line react/function-component-definition
    const columnGap = props => {
      if (props.columnGap !== undefined && props.columnGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8);
        const styleFromPropValue = propValue => ({
          columnGap: getValue(transformer, propValue)
        });
        return handleBreakpoints(props, props.columnGap, styleFromPropValue);
      }
      return null;
    };
    columnGap.propTypes = {};
    columnGap.filterProps = ['columnGap'];

    // false positive
    // eslint-disable-next-line react/function-component-definition
    const rowGap = props => {
      if (props.rowGap !== undefined && props.rowGap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8);
        const styleFromPropValue = propValue => ({
          rowGap: getValue(transformer, propValue)
        });
        return handleBreakpoints(props, props.rowGap, styleFromPropValue);
      }
      return null;
    };
    rowGap.propTypes = {};
    rowGap.filterProps = ['rowGap'];
    const gridColumn = style$1({
      prop: 'gridColumn'
    });
    const gridRow = style$1({
      prop: 'gridRow'
    });
    const gridAutoFlow = style$1({
      prop: 'gridAutoFlow'
    });
    const gridAutoColumns = style$1({
      prop: 'gridAutoColumns'
    });
    const gridAutoRows = style$1({
      prop: 'gridAutoRows'
    });
    const gridTemplateColumns = style$1({
      prop: 'gridTemplateColumns'
    });
    const gridTemplateRows = style$1({
      prop: 'gridTemplateRows'
    });
    const gridTemplateAreas = style$1({
      prop: 'gridTemplateAreas'
    });
    const gridArea = style$1({
      prop: 'gridArea'
    });
    compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

    function paletteTransform(value, userValue) {
      if (userValue === 'grey') {
        return userValue;
      }
      return value;
    }
    const color = style$1({
      prop: 'color',
      themeKey: 'palette',
      transform: paletteTransform
    });
    const bgcolor = style$1({
      prop: 'bgcolor',
      cssProperty: 'backgroundColor',
      themeKey: 'palette',
      transform: paletteTransform
    });
    const backgroundColor = style$1({
      prop: 'backgroundColor',
      themeKey: 'palette',
      transform: paletteTransform
    });
    compose(color, bgcolor, backgroundColor);

    function sizingTransform(value) {
      return value <= 1 && value !== 0 ? `${value * 100}%` : value;
    }
    const width = style$1({
      prop: 'width',
      transform: sizingTransform
    });
    const maxWidth = props => {
      if (props.maxWidth !== undefined && props.maxWidth !== null) {
        const styleFromPropValue = propValue => {
          var _props$theme, _props$theme2;
          const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values$1[propValue];
          if (!breakpoint) {
            return {
              maxWidth: sizingTransform(propValue)
            };
          }
          if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== 'px') {
            return {
              maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
            };
          }
          return {
            maxWidth: breakpoint
          };
        };
        return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
      }
      return null;
    };
    maxWidth.filterProps = ['maxWidth'];
    const minWidth = style$1({
      prop: 'minWidth',
      transform: sizingTransform
    });
    const height = style$1({
      prop: 'height',
      transform: sizingTransform
    });
    const maxHeight = style$1({
      prop: 'maxHeight',
      transform: sizingTransform
    });
    const minHeight = style$1({
      prop: 'minHeight',
      transform: sizingTransform
    });
    style$1({
      prop: 'size',
      cssProperty: 'width',
      transform: sizingTransform
    });
    style$1({
      prop: 'size',
      cssProperty: 'height',
      transform: sizingTransform
    });
    const boxSizing = style$1({
      prop: 'boxSizing'
    });
    compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

    const defaultSxConfig = {
      // borders
      border: {
        themeKey: 'borders',
        transform: borderTransform
      },
      borderTop: {
        themeKey: 'borders',
        transform: borderTransform
      },
      borderRight: {
        themeKey: 'borders',
        transform: borderTransform
      },
      borderBottom: {
        themeKey: 'borders',
        transform: borderTransform
      },
      borderLeft: {
        themeKey: 'borders',
        transform: borderTransform
      },
      borderColor: {
        themeKey: 'palette'
      },
      borderTopColor: {
        themeKey: 'palette'
      },
      borderRightColor: {
        themeKey: 'palette'
      },
      borderBottomColor: {
        themeKey: 'palette'
      },
      borderLeftColor: {
        themeKey: 'palette'
      },
      borderRadius: {
        themeKey: 'shape.borderRadius',
        style: borderRadius
      },
      // palette
      color: {
        themeKey: 'palette',
        transform: paletteTransform
      },
      bgcolor: {
        themeKey: 'palette',
        cssProperty: 'backgroundColor',
        transform: paletteTransform
      },
      backgroundColor: {
        themeKey: 'palette',
        transform: paletteTransform
      },
      // spacing
      p: {
        style: padding
      },
      pt: {
        style: padding
      },
      pr: {
        style: padding
      },
      pb: {
        style: padding
      },
      pl: {
        style: padding
      },
      px: {
        style: padding
      },
      py: {
        style: padding
      },
      padding: {
        style: padding
      },
      paddingTop: {
        style: padding
      },
      paddingRight: {
        style: padding
      },
      paddingBottom: {
        style: padding
      },
      paddingLeft: {
        style: padding
      },
      paddingX: {
        style: padding
      },
      paddingY: {
        style: padding
      },
      paddingInline: {
        style: padding
      },
      paddingInlineStart: {
        style: padding
      },
      paddingInlineEnd: {
        style: padding
      },
      paddingBlock: {
        style: padding
      },
      paddingBlockStart: {
        style: padding
      },
      paddingBlockEnd: {
        style: padding
      },
      m: {
        style: margin
      },
      mt: {
        style: margin
      },
      mr: {
        style: margin
      },
      mb: {
        style: margin
      },
      ml: {
        style: margin
      },
      mx: {
        style: margin
      },
      my: {
        style: margin
      },
      margin: {
        style: margin
      },
      marginTop: {
        style: margin
      },
      marginRight: {
        style: margin
      },
      marginBottom: {
        style: margin
      },
      marginLeft: {
        style: margin
      },
      marginX: {
        style: margin
      },
      marginY: {
        style: margin
      },
      marginInline: {
        style: margin
      },
      marginInlineStart: {
        style: margin
      },
      marginInlineEnd: {
        style: margin
      },
      marginBlock: {
        style: margin
      },
      marginBlockStart: {
        style: margin
      },
      marginBlockEnd: {
        style: margin
      },
      // display
      displayPrint: {
        cssProperty: false,
        transform: value => ({
          '@media print': {
            display: value
          }
        })
      },
      display: {},
      overflow: {},
      textOverflow: {},
      visibility: {},
      whiteSpace: {},
      // flexbox
      flexBasis: {},
      flexDirection: {},
      flexWrap: {},
      justifyContent: {},
      alignItems: {},
      alignContent: {},
      order: {},
      flex: {},
      flexGrow: {},
      flexShrink: {},
      alignSelf: {},
      justifyItems: {},
      justifySelf: {},
      // grid
      gap: {
        style: gap
      },
      rowGap: {
        style: rowGap
      },
      columnGap: {
        style: columnGap
      },
      gridColumn: {},
      gridRow: {},
      gridAutoFlow: {},
      gridAutoColumns: {},
      gridAutoRows: {},
      gridTemplateColumns: {},
      gridTemplateRows: {},
      gridTemplateAreas: {},
      gridArea: {},
      // positions
      position: {},
      zIndex: {
        themeKey: 'zIndex'
      },
      top: {},
      right: {},
      bottom: {},
      left: {},
      // shadows
      boxShadow: {
        themeKey: 'shadows'
      },
      // sizing
      width: {
        transform: sizingTransform
      },
      maxWidth: {
        style: maxWidth
      },
      minWidth: {
        transform: sizingTransform
      },
      height: {
        transform: sizingTransform
      },
      maxHeight: {
        transform: sizingTransform
      },
      minHeight: {
        transform: sizingTransform
      },
      boxSizing: {},
      // typography
      fontFamily: {
        themeKey: 'typography'
      },
      fontSize: {
        themeKey: 'typography'
      },
      fontStyle: {
        themeKey: 'typography'
      },
      fontWeight: {
        themeKey: 'typography'
      },
      letterSpacing: {},
      textTransform: {},
      lineHeight: {},
      textAlign: {},
      typography: {
        cssProperty: false,
        themeKey: 'typography'
      }
    };
    var defaultSxConfig$1 = defaultSxConfig;

    function objectsHaveSameKeys(...objects) {
      const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
      const union = new Set(allKeys);
      return objects.every(object => union.size === Object.keys(object).length);
    }
    function callIfFn(maybeFn, arg) {
      return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention
    function unstable_createStyleFunctionSx() {
      function getThemeValue(prop, val, theme, config) {
        const props = {
          [prop]: val,
          theme
        };
        const options = config[prop];
        if (!options) {
          return {
            [prop]: val
          };
        }
        const {
          cssProperty = prop,
          themeKey,
          transform,
          style
        } = options;
        if (val == null) {
          return null;
        }

        // TODO v6: remove, see https://github.com/mui/material-ui/pull/38123
        if (themeKey === 'typography' && val === 'inherit') {
          return {
            [prop]: val
          };
        }
        const themeMapping = getPath(theme, themeKey) || {};
        if (style) {
          return style(props);
        }
        const styleFromPropValue = propValueFinal => {
          let value = getStyleValue$1(themeMapping, transform, propValueFinal);
          if (propValueFinal === value && typeof propValueFinal === 'string') {
            // Haven't found value
            value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value;
          }
          return {
            [cssProperty]: value
          };
        };
        return handleBreakpoints(props, val, styleFromPropValue);
      }
      function styleFunctionSx(props) {
        var _theme$unstable_sxCon;
        const {
          sx,
          theme = {}
        } = props || {};
        if (!sx) {
          return null; // Emotion & styled-components will neglect null
        }

        const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig$1;

        /*
         * Receive `sxInput` as object or callback
         * and then recursively check keys & values to create media query object styles.
         * (the result will be used in `styled`)
         */
        function traverse(sxInput) {
          let sxObject = sxInput;
          if (typeof sxInput === 'function') {
            sxObject = sxInput(theme);
          } else if (typeof sxInput !== 'object') {
            // value
            return sxInput;
          }
          if (!sxObject) {
            return null;
          }
          const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
          const breakpointsKeys = Object.keys(emptyBreakpoints);
          let css = emptyBreakpoints;
          Object.keys(sxObject).forEach(styleKey => {
            const value = callIfFn(sxObject[styleKey], theme);
            if (value !== null && value !== undefined) {
              if (typeof value === 'object') {
                if (config[styleKey]) {
                  css = merge(css, getThemeValue(styleKey, value, theme, config));
                } else {
                  const breakpointsValues = handleBreakpoints({
                    theme
                  }, value, x => ({
                    [styleKey]: x
                  }));
                  if (objectsHaveSameKeys(breakpointsValues, value)) {
                    css[styleKey] = styleFunctionSx({
                      sx: value,
                      theme
                    });
                  } else {
                    css = merge(css, breakpointsValues);
                  }
                }
              } else {
                css = merge(css, getThemeValue(styleKey, value, theme, config));
              }
            }
          });
          return removeUnusedBreakpoints(breakpointsKeys, css);
        }
        return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
      }
      return styleFunctionSx;
    }
    const styleFunctionSx = unstable_createStyleFunctionSx();
    styleFunctionSx.filterProps = ['sx'];
    var styleFunctionSx$1 = styleFunctionSx;

    const _excluded$14 = ["breakpoints", "palette", "spacing", "shape"];
    function createTheme$1(options = {}, ...args) {
      const {
          breakpoints: breakpointsInput = {},
          palette: paletteInput = {},
          spacing: spacingInput,
          shape: shapeInput = {}
        } = options,
        other = _objectWithoutPropertiesLoose(options, _excluded$14);
      const breakpoints = createBreakpoints(breakpointsInput);
      const spacing = createSpacing(spacingInput);
      let muiTheme = deepmerge({
        breakpoints,
        direction: 'ltr',
        components: {},
        // Inject component definitions.
        palette: _extends({
          mode: 'light'
        }, paletteInput),
        spacing,
        shape: _extends({}, shape$1, shapeInput)
      }, other);
      muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
      muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
      muiTheme.unstable_sx = function sx(props) {
        return styleFunctionSx$1({
          sx: props,
          theme: this
        });
      };
      return muiTheme;
    }

    function isObjectEmpty(obj) {
      return Object.keys(obj).length === 0;
    }
    function useTheme$2(defaultTheme = null) {
      const contextTheme = React__namespace.useContext(ThemeContext);
      return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
    }

    const systemDefaultTheme$1 = createTheme$1();
    function useTheme$1(defaultTheme = systemDefaultTheme$1) {
      return useTheme$2(defaultTheme);
    }

    function GlobalStyles$1({
      styles,
      themeId,
      defaultTheme = {}
    }) {
      const upperTheme = useTheme$1(defaultTheme);
      const globalStyles = typeof styles === 'function' ? styles(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles;
      return /*#__PURE__*/jsxRuntime_1(GlobalStyles$2, {
        styles: globalStyles
      });
    }

    const _excluded$13 = ["sx"];
    const splitProps = props => {
      var _props$theme$unstable, _props$theme;
      const result = {
        systemProps: {},
        otherProps: {}
      };
      const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig$1;
      Object.keys(props).forEach(prop => {
        if (config[prop]) {
          result.systemProps[prop] = props[prop];
        } else {
          result.otherProps[prop] = props[prop];
        }
      });
      return result;
    };
    function extendSxProp(props) {
      const {
          sx: inSx
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$13);
      const {
        systemProps,
        otherProps
      } = splitProps(other);
      let finalSx;
      if (Array.isArray(inSx)) {
        finalSx = [systemProps, ...inSx];
      } else if (typeof inSx === 'function') {
        finalSx = (...args) => {
          const result = inSx(...args);
          if (!isPlainObject(result)) {
            return systemProps;
          }
          return _extends({}, systemProps, result);
        };
      } else {
        finalSx = _extends({}, systemProps, inSx);
      }
      return _extends({}, otherProps, {
        sx: finalSx
      });
    }

    const _excluded$12 = ["variant"];
    function isEmpty$3(string) {
      return string.length === 0;
    }

    /**
     * Generates string classKey based on the properties provided. It starts with the
     * variant if defined, and then it appends all other properties in alphabetical order.
     * @param {object} props - the properties for which the classKey should be created.
     */
    function propsToClassKey(props) {
      const {
          variant
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$12);
      let classKey = variant || '';
      Object.keys(other).sort().forEach(key => {
        if (key === 'color') {
          classKey += isEmpty$3(classKey) ? props[key] : capitalize(props[key]);
        } else {
          classKey += `${isEmpty$3(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
        }
      });
      return classKey;
    }

    const _excluded$11 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
    function isEmpty$2(obj) {
      return Object.keys(obj).length === 0;
    }

    // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
    function isStringTag(tag) {
      return typeof tag === 'string' &&
      // 96 is one less than the char code
      // for "a" so this is checking that
      // it's a lowercase character
      tag.charCodeAt(0) > 96;
    }
    const getStyleOverrides = (name, theme) => {
      if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
        return theme.components[name].styleOverrides;
      }
      return null;
    };
    const transformVariants = variants => {
      const variantsStyles = {};
      if (variants) {
        variants.forEach(definition => {
          const key = propsToClassKey(definition.props);
          variantsStyles[key] = definition.style;
        });
      }
      return variantsStyles;
    };
    const getVariantStyles = (name, theme) => {
      let variants = [];
      if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
        variants = theme.components[name].variants;
      }
      return transformVariants(variants);
    };
    const variantsResolver = (props, styles, variants) => {
      const {
        ownerState = {}
      } = props;
      const variantsStyles = [];
      if (variants) {
        variants.forEach(variant => {
          let isMatch = true;
          Object.keys(variant.props).forEach(key => {
            if (ownerState[key] !== variant.props[key] && props[key] !== variant.props[key]) {
              isMatch = false;
            }
          });
          if (isMatch) {
            variantsStyles.push(styles[propsToClassKey(variant.props)]);
          }
        });
      }
      return variantsStyles;
    };
    const themeVariantsResolver = (props, styles, theme, name) => {
      var _theme$components;
      const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
      return variantsResolver(props, styles, themeVariants);
    };

    // Update /system/styled/#api in case if this changes
    function shouldForwardProp(prop) {
      return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
    }
    const systemDefaultTheme = createTheme$1();
    const lowercaseFirstLetter = string => {
      if (!string) {
        return string;
      }
      return string.charAt(0).toLowerCase() + string.slice(1);
    };
    function resolveTheme({
      defaultTheme,
      theme,
      themeId
    }) {
      return isEmpty$2(theme) ? defaultTheme : theme[themeId] || theme;
    }
    function defaultOverridesResolver(slot) {
      if (!slot) {
        return null;
      }
      return (props, styles) => styles[slot];
    }
    const muiStyledFunctionResolver = ({
      styledArg,
      props,
      defaultTheme,
      themeId
    }) => {
      const resolvedStyles = styledArg(_extends({}, props, {
        theme: resolveTheme(_extends({}, props, {
          defaultTheme,
          themeId
        }))
      }));
      let optionalVariants;
      if (resolvedStyles && resolvedStyles.variants) {
        optionalVariants = resolvedStyles.variants;
        delete resolvedStyles.variants;
      }
      if (optionalVariants) {
        const variantsStyles = variantsResolver(props, transformVariants(optionalVariants), optionalVariants);
        return [resolvedStyles, ...variantsStyles];
      }
      return resolvedStyles;
    };
    function createStyled(input = {}) {
      const {
        themeId,
        defaultTheme = systemDefaultTheme,
        rootShouldForwardProp = shouldForwardProp,
        slotShouldForwardProp = shouldForwardProp
      } = input;
      const systemSx = props => {
        return styleFunctionSx$1(_extends({}, props, {
          theme: resolveTheme(_extends({}, props, {
            defaultTheme,
            themeId
          }))
        }));
      };
      systemSx.__mui_systemSx = true;
      return (tag, inputOptions = {}) => {
        // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
        internal_processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
        const {
            name: componentName,
            slot: componentSlot,
            skipVariantsResolver: inputSkipVariantsResolver,
            skipSx: inputSkipSx,
            // TODO v6: remove `lowercaseFirstLetter()` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
          } = inputOptions,
          options = _objectWithoutPropertiesLoose(inputOptions, _excluded$11);

        // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
        const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
        const skipSx = inputSkipSx || false;
        let label;
        let shouldForwardPropOption = shouldForwardProp;

        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        if (componentSlot === 'Root' || componentSlot === 'root') {
          shouldForwardPropOption = rootShouldForwardProp;
        } else if (componentSlot) {
          // any other slot specified
          shouldForwardPropOption = slotShouldForwardProp;
        } else if (isStringTag(tag)) {
          // for string (html) tag, preserve the behavior in emotion & styled-components.
          shouldForwardPropOption = undefined;
        }
        const defaultStyledResolver = styled$2(tag, _extends({
          shouldForwardProp: shouldForwardPropOption,
          label
        }, options));
        const muiStyledResolver = (styleArg, ...expressions) => {
          const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
            // On the server Emotion doesn't use React.forwardRef for creating components, so the created
            // component stays as a function. This condition makes sure that we do not interpolate functions
            // which are basically components used as a selectors.
            if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg) {
              return props => muiStyledFunctionResolver({
                styledArg: stylesArg,
                props,
                defaultTheme,
                themeId
              });
            }
            if (isPlainObject(stylesArg)) {
              let transformedStylesArg = stylesArg;
              let styledArgVariants;
              if (stylesArg && stylesArg.variants) {
                styledArgVariants = stylesArg.variants;
                delete transformedStylesArg.variants;
                transformedStylesArg = props => {
                  let result = stylesArg;
                  const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
                  variantStyles.forEach(variantStyle => {
                    result = deepmerge(result, variantStyle);
                  });
                  return result;
                };
              }
              return transformedStylesArg;
            }
            return stylesArg;
          }) : [];
          let transformedStyleArg = styleArg;
          if (isPlainObject(styleArg)) {
            let styledArgVariants;
            if (styleArg && styleArg.variants) {
              styledArgVariants = styleArg.variants;
              delete transformedStyleArg.variants;
              transformedStyleArg = props => {
                let result = styleArg;
                const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
                variantStyles.forEach(variantStyle => {
                  result = deepmerge(result, variantStyle);
                });
                return result;
              };
            }
          } else if (typeof styleArg === 'function' &&
          // On the server Emotion doesn't use React.forwardRef for creating components, so the created
          // component stays as a function. This condition makes sure that we do not interpolate functions
          // which are basically components used as a selectors.
          styleArg.__emotion_real !== styleArg) {
            // If the type is function, we need to define the default theme.
            transformedStyleArg = props => muiStyledFunctionResolver({
              styledArg: styleArg,
              props,
              defaultTheme,
              themeId
            });
          }
          if (componentName && overridesResolver) {
            expressionsWithDefaultTheme.push(props => {
              const theme = resolveTheme(_extends({}, props, {
                defaultTheme,
                themeId
              }));
              const styleOverrides = getStyleOverrides(componentName, theme);
              if (styleOverrides) {
                const resolvedStyleOverrides = {};
                Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                  resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
                    theme
                  })) : slotStyle;
                });
                return overridesResolver(props, resolvedStyleOverrides);
              }
              return null;
            });
          }
          if (componentName && !skipVariantsResolver) {
            expressionsWithDefaultTheme.push(props => {
              const theme = resolveTheme(_extends({}, props, {
                defaultTheme,
                themeId
              }));
              return themeVariantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
            });
          }
          if (!skipSx) {
            expressionsWithDefaultTheme.push(systemSx);
          }
          const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
          if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
            const placeholders = new Array(numOfCustomFnsApplied).fill('');
            // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
            transformedStyleArg = [...styleArg, ...placeholders];
            transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
          }
          const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
          if (tag.muiName) {
            Component.muiName = tag.muiName;
          }
          return Component;
        };
        if (defaultStyledResolver.withConfig) {
          muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
        }
        return muiStyledResolver;
      };
    }

    function getThemeProps(params) {
      const {
        theme,
        name,
        props
      } = params;
      if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
        return props;
      }
      return resolveProps(theme.components[name].defaultProps, props);
    }

    function useThemeProps$1({
      props,
      name,
      defaultTheme,
      themeId
    }) {
      let theme = useTheme$1(defaultTheme);
      if (themeId) {
        theme = theme[themeId] || theme;
      }
      const mergedProps = getThemeProps({
        theme,
        name,
        props
      });
      return mergedProps;
    }

    /* eslint-disable @typescript-eslint/naming-convention */
    /**
     * Returns a number whose value is limited to the given range.
     * @param {number} value The value to be clamped
     * @param {number} min The lower boundary of the output range
     * @param {number} max The upper boundary of the output range
     * @returns {number} A number in the range [min, max]
     */
    function clamp(value, min = 0, max = 1) {
      return Math.min(Math.max(min, value), max);
    }

    /**
     * Converts a color from CSS hex format to CSS rgb format.
     * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
     * @returns {string} A CSS rgb color string
     */
    function hexToRgb(color) {
      color = color.slice(1);
      const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
      let colors = color.match(re);
      if (colors && colors[0].length === 1) {
        colors = colors.map(n => n + n);
      }
      return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
    }

    /**
     * Returns an object with the type and values of a color.
     *
     * Note: Does not support rgb % values.
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @returns {object} - A MUI color object: {type: string, values: number[]}
     */
    function decomposeColor(color) {
      // Idempotent
      if (color.type) {
        return color;
      }
      if (color.charAt(0) === '#') {
        return decomposeColor(hexToRgb(color));
      }
      const marker = color.indexOf('(');
      const type = color.substring(0, marker);
      if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
        throw new Error(formatMuiErrorMessage(9, color));
      }
      let values = color.substring(marker + 1, color.length - 1);
      let colorSpace;
      if (type === 'color') {
        values = values.split(' ');
        colorSpace = values.shift();
        if (values.length === 4 && values[3].charAt(0) === '/') {
          values[3] = values[3].slice(1);
        }
        if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
          throw new Error(formatMuiErrorMessage(10, colorSpace));
        }
      } else {
        values = values.split(',');
      }
      values = values.map(value => parseFloat(value));
      return {
        type,
        values,
        colorSpace
      };
    }

    /**
     * Converts a color object with type and values to a string.
     * @param {object} color - Decomposed color
     * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
     * @param {array} color.values - [n,n,n] or [n,n,n,n]
     * @returns {string} A CSS color string
     */
    function recomposeColor(color) {
      const {
        type,
        colorSpace
      } = color;
      let {
        values
      } = color;
      if (type.indexOf('rgb') !== -1) {
        // Only convert the first 3 values to int (i.e. not alpha)
        values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
      } else if (type.indexOf('hsl') !== -1) {
        values[1] = `${values[1]}%`;
        values[2] = `${values[2]}%`;
      }
      if (type.indexOf('color') !== -1) {
        values = `${colorSpace} ${values.join(' ')}`;
      } else {
        values = `${values.join(', ')}`;
      }
      return `${type}(${values})`;
    }

    /**
     * Converts a color from hsl format to rgb format.
     * @param {string} color - HSL color values
     * @returns {string} rgb color values
     */
    function hslToRgb(color) {
      color = decomposeColor(color);
      const {
        values
      } = color;
      const h = values[0];
      const s = values[1] / 100;
      const l = values[2] / 100;
      const a = s * Math.min(l, 1 - l);
      const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      let type = 'rgb';
      const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
      if (color.type === 'hsla') {
        type += 'a';
        rgb.push(values[3]);
      }
      return recomposeColor({
        type,
        values: rgb
      });
    }
    /**
     * The relative brightness of any point in a color space,
     * normalized to 0 for darkest black and 1 for lightest white.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @returns {number} The relative brightness of the color in the range 0 - 1
     */
    function getLuminance(color) {
      color = decomposeColor(color);
      let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
      rgb = rgb.map(val => {
        if (color.type !== 'color') {
          val /= 255; // normalized
        }

        return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
      });

      // Truncate at 3 digits
      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }

    /**
     * Calculates the contrast ratio between two colors.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {number} A contrast ratio value in the range 0 - 21.
     */
    function getContrastRatio(foreground, background) {
      const lumA = getLuminance(foreground);
      const lumB = getLuminance(background);
      return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
    }

    /**
     * Sets the absolute transparency of a color.
     * Any existing alpha values are overwritten.
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @param {number} value - value to set the alpha channel to in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
    function alpha(color, value) {
      color = decomposeColor(color);
      value = clamp(value);
      if (color.type === 'rgb' || color.type === 'hsl') {
        color.type += 'a';
      }
      if (color.type === 'color') {
        color.values[3] = `/${value}`;
      } else {
        color.values[3] = value;
      }
      return recomposeColor(color);
    }

    /**
     * Darkens a color.
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
    function darken(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp(coefficient);
      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] *= 1 - coefficient;
      } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] *= 1 - coefficient;
        }
      }
      return recomposeColor(color);
    }

    /**
     * Lightens a color.
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */
    function lighten(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp(coefficient);
      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] += (100 - color.values[2]) * coefficient;
      } else if (color.type.indexOf('rgb') !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] += (255 - color.values[i]) * coefficient;
        }
      } else if (color.type.indexOf('color') !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color.values[i] += (1 - color.values[i]) * coefficient;
        }
      }
      return recomposeColor(color);
    }

    function createMixins(breakpoints, mixins) {
      return _extends({
        toolbar: {
          minHeight: 56,
          [breakpoints.up('xs')]: {
            '@media (orientation: landscape)': {
              minHeight: 48
            }
          },
          [breakpoints.up('sm')]: {
            minHeight: 64
          }
        }
      }, mixins);
    }

    const common = {
      black: '#000',
      white: '#fff'
    };
    var common$1 = common;

    const grey = {
      50: '#fafafa',
      100: '#f5f5f5',
      200: '#eeeeee',
      300: '#e0e0e0',
      400: '#bdbdbd',
      500: '#9e9e9e',
      600: '#757575',
      700: '#616161',
      800: '#424242',
      900: '#212121',
      A100: '#f5f5f5',
      A200: '#eeeeee',
      A400: '#bdbdbd',
      A700: '#616161'
    };
    var grey$1 = grey;

    const purple = {
      50: '#f3e5f5',
      100: '#e1bee7',
      200: '#ce93d8',
      300: '#ba68c8',
      400: '#ab47bc',
      500: '#9c27b0',
      600: '#8e24aa',
      700: '#7b1fa2',
      800: '#6a1b9a',
      900: '#4a148c',
      A100: '#ea80fc',
      A200: '#e040fb',
      A400: '#d500f9',
      A700: '#aa00ff'
    };
    var purple$1 = purple;

    const red = {
      50: '#ffebee',
      100: '#ffcdd2',
      200: '#ef9a9a',
      300: '#e57373',
      400: '#ef5350',
      500: '#f44336',
      600: '#e53935',
      700: '#d32f2f',
      800: '#c62828',
      900: '#b71c1c',
      A100: '#ff8a80',
      A200: '#ff5252',
      A400: '#ff1744',
      A700: '#d50000'
    };
    var red$1 = red;

    const orange = {
      50: '#fff3e0',
      100: '#ffe0b2',
      200: '#ffcc80',
      300: '#ffb74d',
      400: '#ffa726',
      500: '#ff9800',
      600: '#fb8c00',
      700: '#f57c00',
      800: '#ef6c00',
      900: '#e65100',
      A100: '#ffd180',
      A200: '#ffab40',
      A400: '#ff9100',
      A700: '#ff6d00'
    };
    var orange$1 = orange;

    const blue = {
      50: '#e3f2fd',
      100: '#bbdefb',
      200: '#90caf9',
      300: '#64b5f6',
      400: '#42a5f5',
      500: '#2196f3',
      600: '#1e88e5',
      700: '#1976d2',
      800: '#1565c0',
      900: '#0d47a1',
      A100: '#82b1ff',
      A200: '#448aff',
      A400: '#2979ff',
      A700: '#2962ff'
    };
    var blue$1 = blue;

    const lightBlue = {
      50: '#e1f5fe',
      100: '#b3e5fc',
      200: '#81d4fa',
      300: '#4fc3f7',
      400: '#29b6f6',
      500: '#03a9f4',
      600: '#039be5',
      700: '#0288d1',
      800: '#0277bd',
      900: '#01579b',
      A100: '#80d8ff',
      A200: '#40c4ff',
      A400: '#00b0ff',
      A700: '#0091ea'
    };
    var lightBlue$1 = lightBlue;

    const green = {
      50: '#e8f5e9',
      100: '#c8e6c9',
      200: '#a5d6a7',
      300: '#81c784',
      400: '#66bb6a',
      500: '#4caf50',
      600: '#43a047',
      700: '#388e3c',
      800: '#2e7d32',
      900: '#1b5e20',
      A100: '#b9f6ca',
      A200: '#69f0ae',
      A400: '#00e676',
      A700: '#00c853'
    };
    var green$1 = green;

    const _excluded$10 = ["mode", "contrastThreshold", "tonalOffset"];
    const light = {
      // The colors used to style the text.
      text: {
        // The most important text.
        primary: 'rgba(0, 0, 0, 0.87)',
        // Secondary text.
        secondary: 'rgba(0, 0, 0, 0.6)',
        // Disabled text have even lower visual prominence.
        disabled: 'rgba(0, 0, 0, 0.38)'
      },
      // The color used to divide different elements.
      divider: 'rgba(0, 0, 0, 0.12)',
      // The background colors used to style the surfaces.
      // Consistency between these values is important.
      background: {
        paper: common$1.white,
        default: common$1.white
      },
      // The colors used to style the action elements.
      action: {
        // The color of an active action like an icon button.
        active: 'rgba(0, 0, 0, 0.54)',
        // The color of an hovered action.
        hover: 'rgba(0, 0, 0, 0.04)',
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: 'rgba(0, 0, 0, 0.08)',
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: 'rgba(0, 0, 0, 0.26)',
        // The background color of a disabled action.
        disabledBackground: 'rgba(0, 0, 0, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(0, 0, 0, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.12
      }
    };
    const dark = {
      text: {
        primary: common$1.white,
        secondary: 'rgba(255, 255, 255, 0.7)',
        disabled: 'rgba(255, 255, 255, 0.5)',
        icon: 'rgba(255, 255, 255, 0.5)'
      },
      divider: 'rgba(255, 255, 255, 0.12)',
      background: {
        paper: '#121212',
        default: '#121212'
      },
      action: {
        active: common$1.white,
        hover: 'rgba(255, 255, 255, 0.08)',
        hoverOpacity: 0.08,
        selected: 'rgba(255, 255, 255, 0.16)',
        selectedOpacity: 0.16,
        disabled: 'rgba(255, 255, 255, 0.3)',
        disabledBackground: 'rgba(255, 255, 255, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(255, 255, 255, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.24
      }
    };
    function addLightOrDark(intent, direction, shade, tonalOffset) {
      const tonalOffsetLight = tonalOffset.light || tonalOffset;
      const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
      if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) {
          intent[direction] = intent[shade];
        } else if (direction === 'light') {
          intent.light = lighten(intent.main, tonalOffsetLight);
        } else if (direction === 'dark') {
          intent.dark = darken(intent.main, tonalOffsetDark);
        }
      }
    }
    function getDefaultPrimary(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: blue$1[200],
          light: blue$1[50],
          dark: blue$1[400]
        };
      }
      return {
        main: blue$1[700],
        light: blue$1[400],
        dark: blue$1[800]
      };
    }
    function getDefaultSecondary(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: purple$1[200],
          light: purple$1[50],
          dark: purple$1[400]
        };
      }
      return {
        main: purple$1[500],
        light: purple$1[300],
        dark: purple$1[700]
      };
    }
    function getDefaultError(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: red$1[500],
          light: red$1[300],
          dark: red$1[700]
        };
      }
      return {
        main: red$1[700],
        light: red$1[400],
        dark: red$1[800]
      };
    }
    function getDefaultInfo(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: lightBlue$1[400],
          light: lightBlue$1[300],
          dark: lightBlue$1[700]
        };
      }
      return {
        main: lightBlue$1[700],
        light: lightBlue$1[500],
        dark: lightBlue$1[900]
      };
    }
    function getDefaultSuccess(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: green$1[400],
          light: green$1[300],
          dark: green$1[700]
        };
      }
      return {
        main: green$1[800],
        light: green$1[500],
        dark: green$1[900]
      };
    }
    function getDefaultWarning(mode = 'light') {
      if (mode === 'dark') {
        return {
          main: orange$1[400],
          light: orange$1[300],
          dark: orange$1[700]
        };
      }
      return {
        main: '#ed6c02',
        // closest to orange[800] that pass 3:1.
        light: orange$1[500],
        dark: orange$1[900]
      };
    }
    function createPalette(palette) {
      const {
          mode = 'light',
          contrastThreshold = 3,
          tonalOffset = 0.2
        } = palette,
        other = _objectWithoutPropertiesLoose(palette, _excluded$10);
      const primary = palette.primary || getDefaultPrimary(mode);
      const secondary = palette.secondary || getDefaultSecondary(mode);
      const error = palette.error || getDefaultError(mode);
      const info = palette.info || getDefaultInfo(mode);
      const success = palette.success || getDefaultSuccess(mode);
      const warning = palette.warning || getDefaultWarning(mode);

      // Use the same logic as
      // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
      // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
      function getContrastText(background) {
        const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
        return contrastText;
      }
      const augmentColor = ({
        color,
        name,
        mainShade = 500,
        lightShade = 300,
        darkShade = 700
      }) => {
        color = _extends({}, color);
        if (!color.main && color[mainShade]) {
          color.main = color[mainShade];
        }
        if (!color.hasOwnProperty('main')) {
          throw new Error(formatMuiErrorMessage(11, name ? ` (${name})` : '', mainShade));
        }
        if (typeof color.main !== 'string') {
          throw new Error(formatMuiErrorMessage(12, name ? ` (${name})` : '', JSON.stringify(color.main)));
        }
        addLightOrDark(color, 'light', lightShade, tonalOffset);
        addLightOrDark(color, 'dark', darkShade, tonalOffset);
        if (!color.contrastText) {
          color.contrastText = getContrastText(color.main);
        }
        return color;
      };
      const modes = {
        dark,
        light
      };
      const paletteOutput = deepmerge(_extends({
        // A collection of common colors.
        common: _extends({}, common$1),
        // prevent mutable object.
        // The palette mode, can be light or dark.
        mode,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor({
          color: primary,
          name: 'primary'
        }),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor({
          color: secondary,
          name: 'secondary',
          mainShade: 'A400',
          lightShade: 'A200',
          darkShade: 'A700'
        }),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor({
          color: error,
          name: 'error'
        }),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor({
          color: warning,
          name: 'warning'
        }),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor({
          color: info,
          name: 'info'
        }),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor({
          color: success,
          name: 'success'
        }),
        // The grey colors.
        grey: grey$1,
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText,
        // Generate a rich color object.
        augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset
      }, modes[mode]), other);
      return paletteOutput;
    }

    const _excluded$$ = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
    function round$1(value) {
      return Math.round(value * 1e5) / 1e5;
    }
    const caseAllCaps = {
      textTransform: 'uppercase'
    };
    const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

    /**
     * @see @link{https://m2.material.io/design/typography/the-type-system.html}
     * @see @link{https://m2.material.io/design/typography/understanding-typography.html}
     */
    function createTypography(palette, typography) {
      const _ref = typeof typography === 'function' ? typography(palette) : typography,
        {
          fontFamily = defaultFontFamily,
          // The default font size of the Material Specification.
          fontSize = 14,
          // px
          fontWeightLight = 300,
          fontWeightRegular = 400,
          fontWeightMedium = 500,
          fontWeightBold = 700,
          // Tell MUI what's the font-size on the html element.
          // 16px is the default font-size used by browsers.
          htmlFontSize = 16,
          // Apply the CSS properties to all the variants.
          allVariants,
          pxToRem: pxToRem2
        } = _ref,
        other = _objectWithoutPropertiesLoose(_ref, _excluded$$);
      const coef = fontSize / 14;
      const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
      const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
        fontFamily,
        fontWeight,
        fontSize: pxToRem(size),
        // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
        lineHeight
      }, fontFamily === defaultFontFamily ? {
        letterSpacing: `${round$1(letterSpacing / size)}em`
      } : {}, casing, allVariants);
      const variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
        // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
        inherit: {
          fontFamily: 'inherit',
          fontWeight: 'inherit',
          fontSize: 'inherit',
          lineHeight: 'inherit',
          letterSpacing: 'inherit'
        }
      };
      return deepmerge(_extends({
        htmlFontSize,
        pxToRem,
        fontFamily,
        fontSize,
        fontWeightLight,
        fontWeightRegular,
        fontWeightMedium,
        fontWeightBold
      }, variants), other, {
        clone: false // No need to clone deep
      });
    }

    const shadowKeyUmbraOpacity = 0.2;
    const shadowKeyPenumbraOpacity = 0.14;
    const shadowAmbientShadowOpacity = 0.12;
    function createShadow(...px) {
      return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
    }

    // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
    const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
    var shadows$1 = shadows;

    const _excluded$_ = ["duration", "easing", "delay"];
    // Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
    // to learn the context in which each easing should be used.
    const easing = {
      // This is the most common easing curve.
      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
      // Objects enter the screen at full velocity from off-screen and
      // slowly decelerate to a resting point.
      easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
      // Objects leave the screen at full velocity. They do not decelerate when off-screen.
      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
      // The sharp curve is used by objects that may return to the screen at any time.
      sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
    };

    // Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
    // to learn when use what timing
    const duration = {
      shortest: 150,
      shorter: 200,
      short: 250,
      // most basic recommended timing
      standard: 300,
      // this is to be used in complex animations
      complex: 375,
      // recommended when something is entering screen
      enteringScreen: 225,
      // recommended when something is leaving screen
      leavingScreen: 195
    };
    function formatMs(milliseconds) {
      return `${Math.round(milliseconds)}ms`;
    }
    function getAutoHeightDuration(height) {
      if (!height) {
        return 0;
      }
      const constant = height / 36;

      // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
      return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
    }
    function createTransitions(inputTransitions) {
      const mergedEasing = _extends({}, easing, inputTransitions.easing);
      const mergedDuration = _extends({}, duration, inputTransitions.duration);
      const create = (props = ['all'], options = {}) => {
        const {
            duration: durationOption = mergedDuration.standard,
            easing: easingOption = mergedEasing.easeInOut,
            delay = 0
          } = options;
          _objectWithoutPropertiesLoose(options, _excluded$_);
        return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
      };
      return _extends({
        getAutoHeightDuration,
        create
      }, inputTransitions, {
        easing: mergedEasing,
        duration: mergedDuration
      });
    }

    // We need to centralize the zIndex definitions as they work
    // like global values in the browser.
    const zIndex = {
      mobileStepper: 1000,
      fab: 1050,
      speedDial: 1050,
      appBar: 1100,
      drawer: 1200,
      modal: 1300,
      snackbar: 1400,
      tooltip: 1500
    };
    var zIndex$1 = zIndex;

    const _excluded$Z = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
    function createTheme(options = {}, ...args) {
      const {
          mixins: mixinsInput = {},
          palette: paletteInput = {},
          transitions: transitionsInput = {},
          typography: typographyInput = {}
        } = options,
        other = _objectWithoutPropertiesLoose(options, _excluded$Z);
      if (options.vars) {
        throw new Error(formatMuiErrorMessage(18));
      }
      const palette = createPalette(paletteInput);
      const systemTheme = createTheme$1(options);
      let muiTheme = deepmerge(systemTheme, {
        mixins: createMixins(systemTheme.breakpoints, mixinsInput),
        palette,
        // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
        shadows: shadows$1.slice(),
        typography: createTypography(palette, typographyInput),
        transitions: createTransitions(transitionsInput),
        zIndex: _extends({}, zIndex$1)
      });
      muiTheme = deepmerge(muiTheme, other);
      muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
      muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
      muiTheme.unstable_sx = function sx(props) {
        return styleFunctionSx$1({
          sx: props,
          theme: this
        });
      };
      return muiTheme;
    }

    const defaultTheme = createTheme();
    var defaultTheme$1 = defaultTheme;

    function useTheme() {
      const theme = useTheme$1(defaultTheme$1);
      return theme[THEME_ID] || theme;
    }

    function useThemeProps({
      props,
      name
    }) {
      return useThemeProps$1({
        props,
        name,
        defaultTheme: defaultTheme$1,
        themeId: THEME_ID
      });
    }

    const rootShouldForwardProp = prop => shouldForwardProp(prop) && prop !== 'classes';
    const slotShouldForwardProp = shouldForwardProp;
    const styled = createStyled({
      themeId: THEME_ID,
      defaultTheme: defaultTheme$1,
      rootShouldForwardProp
    });
    var styled$1 = styled;

    // Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
    const getOverlayAlpha = elevation => {
      let alphaValue;
      if (elevation < 1) {
        alphaValue = 5.11916 * elevation ** 2;
      } else {
        alphaValue = 4.5 * Math.log(elevation + 1) + 2;
      }
      return (alphaValue / 100).toFixed(2);
    };
    var getOverlayAlpha$1 = getOverlayAlpha;

    const _excluded$Y = ["localeText"];
    const MuiPickersAdapterContext = /*#__PURE__*/React__namespace.createContext(null);
    const LocalizationProvider = function LocalizationProvider(inProps) {
      var _React$useContext;
      const {
          localeText: inLocaleText
        } = inProps,
        otherInProps = _objectWithoutPropertiesLoose(inProps, _excluded$Y);
      const {
        utils: parentUtils,
        localeText: parentLocaleText
      } = (_React$useContext = React__namespace.useContext(MuiPickersAdapterContext)) != null ? _React$useContext : {
        utils: undefined,
        localeText: undefined
      };
      const props = useThemeProps({
        // We don't want to pass the `localeText` prop to the theme, that way it will always return the theme value,
        // We will then merge this theme value with our value manually
        props: otherInProps,
        name: 'MuiLocalizationProvider'
      });
      const {
        children,
        dateAdapter: DateAdapter,
        dateFormats,
        dateLibInstance,
        adapterLocale,
        localeText: themeLocaleText
      } = props;
      const localeText = React__namespace.useMemo(() => _extends({}, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]);
      const utils = React__namespace.useMemo(() => {
        if (!DateAdapter) {
          if (parentUtils) {
            return parentUtils;
          }
          return null;
        }
        const adapter = new DateAdapter({
          locale: adapterLocale,
          formats: dateFormats,
          instance: dateLibInstance
        });
        if (!adapter.isMUIAdapter) {
          throw new Error(['MUI: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`', "For example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`", 'More information on the installation documentation: https://mui.com/x/react-date-pickers/getting-started/#installation'].join(`\n`));
        }
        return adapter;
      }, [DateAdapter, adapterLocale, dateFormats, dateLibInstance, parentUtils]);
      const defaultDates = React__namespace.useMemo(() => {
        if (!utils) {
          return null;
        }
        return {
          minDate: utils.date('1900-01-01T00:00:00.000'),
          maxDate: utils.date('2099-12-31T00:00:00.000')
        };
      }, [utils]);
      const contextValue = React__namespace.useMemo(() => {
        return {
          utils,
          defaultDates,
          localeText
        };
      }, [defaultDates, utils, localeText]);
      return /*#__PURE__*/jsxRuntime_1(MuiPickersAdapterContext.Provider, {
        value: contextValue,
        children: children
      });
    };

    const getPickersLocalization = pickersTranslations => {
      return {
        components: {
          MuiLocalizationProvider: {
            defaultProps: {
              localeText: _extends({}, pickersTranslations)
            }
          }
        }
      };
    };

    // This object is not Partial<PickersLocaleText> because it is the default values

    const enUSPickers = {
      // Calendar navigation
      previousMonth: 'Previous month',
      nextMonth: 'Next month',
      // View navigation
      openPreviousView: 'open previous view',
      openNextView: 'open next view',
      calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'year view is open, switch to calendar view' : 'calendar view is open, switch to year view',
      // DateRange placeholders
      start: 'Start',
      end: 'End',
      // Action bar
      cancelButtonLabel: 'Cancel',
      clearButtonLabel: 'Clear',
      okButtonLabel: 'OK',
      todayButtonLabel: 'Today',
      // Toolbar titles
      datePickerToolbarTitle: 'Select date',
      dateTimePickerToolbarTitle: 'Select date & time',
      timePickerToolbarTitle: 'Select time',
      dateRangePickerToolbarTitle: 'Select date range',
      // Clock labels
      clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`,
      hoursClockNumberText: hours => `${hours} hours`,
      minutesClockNumberText: minutes => `${minutes} minutes`,
      secondsClockNumberText: seconds => `${seconds} seconds`,
      // Digital clock labels
      selectViewText: view => `Select ${view}`,
      // Calendar labels
      calendarWeekNumberHeaderLabel: 'Week number',
      calendarWeekNumberHeaderText: '#',
      calendarWeekNumberAriaLabelText: weekNumber => `Week ${weekNumber}`,
      calendarWeekNumberText: weekNumber => `${weekNumber}`,
      // Open picker labels
      openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose date, selected date is ${utils.format(value, 'fullDate')}` : 'Choose date',
      openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose time, selected time is ${utils.format(value, 'fullTime')}` : 'Choose time',
      fieldClearLabel: 'Clear value',
      // Table labels
      timeTableLabel: 'pick time',
      dateTableLabel: 'pick date',
      // Field section placeholders
      fieldYearPlaceholder: params => 'Y'.repeat(params.digitAmount),
      fieldMonthPlaceholder: params => params.contentType === 'letter' ? 'MMMM' : 'MM',
      fieldDayPlaceholder: () => 'DD',
      fieldWeekDayPlaceholder: params => params.contentType === 'letter' ? 'EEEE' : 'EE',
      fieldHoursPlaceholder: () => 'hh',
      fieldMinutesPlaceholder: () => 'mm',
      fieldSecondsPlaceholder: () => 'ss',
      fieldMeridiemPlaceholder: () => 'aa'
    };
    const DEFAULT_LOCALE = enUSPickers;
    getPickersLocalization(enUSPickers);

    const useLocalizationContext = () => {
      const localization = React__namespace.useContext(MuiPickersAdapterContext);
      if (localization === null) {
        throw new Error(['MUI: Can not find the date and time pickers localization context.', 'It looks like you forgot to wrap your component in LocalizationProvider.', 'This can also happen if you are bundling multiple versions of the `@mui/x-date-pickers` package'].join('\n'));
      }
      if (localization.utils === null) {
        throw new Error(['MUI: Can not find the date and time pickers adapter from its localization context.', 'It looks like you forgot to pass a `dateAdapter` to your LocalizationProvider.'].join('\n'));
      }
      const localeText = React__namespace.useMemo(() => _extends({}, DEFAULT_LOCALE, localization.localeText), [localization.localeText]);
      return React__namespace.useMemo(() => _extends({}, localization, {
        localeText
      }), [localization, localeText]);
    };
    const useUtils = () => useLocalizationContext().utils;
    const useLocaleText = () => useLocalizationContext().localeText;
    const useNow = timezone => {
      const utils = useUtils();
      const now = React__namespace.useRef();
      if (now.current === undefined) {
        now.current = utils.dateWithTimezone(undefined, timezone);
      }
      return now.current;
    };

    function getTypographyUtilityClass(slot) {
      return generateUtilityClass('MuiTypography', slot);
    }
    generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

    const _excluded$X = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
    const useUtilityClasses$K = ownerState => {
      const {
        align,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
      };
      return composeClasses(slots, getTypographyUtilityClass, classes);
    };
    const TypographyRoot = styled$1('span', {
      name: 'MuiTypography',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      margin: 0
    }, ownerState.variant === 'inherit' && {
      // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
      font: 'inherit'
    }, ownerState.variant !== 'inherit' && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
      textAlign: ownerState.align
    }, ownerState.noWrap && {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    }, ownerState.gutterBottom && {
      marginBottom: '0.35em'
    }, ownerState.paragraph && {
      marginBottom: 16
    }));
    const defaultVariantMapping = {
      h1: 'h1',
      h2: 'h2',
      h3: 'h3',
      h4: 'h4',
      h5: 'h5',
      h6: 'h6',
      subtitle1: 'h6',
      subtitle2: 'h6',
      body1: 'p',
      body2: 'p',
      inherit: 'p'
    };

    // TODO v6: deprecate these color values in v5.x and remove the transformation in v6
    const colorTransformations = {
      primary: 'primary.main',
      textPrimary: 'text.primary',
      secondary: 'secondary.main',
      textSecondary: 'text.secondary',
      error: 'error.main'
    };
    const transformDeprecatedColors = color => {
      return colorTransformations[color] || color;
    };
    const Typography = /*#__PURE__*/React__namespace.forwardRef(function Typography(inProps, ref) {
      const themeProps = useThemeProps({
        props: inProps,
        name: 'MuiTypography'
      });
      const color = transformDeprecatedColors(themeProps.color);
      const props = extendSxProp(_extends({}, themeProps, {
        color
      }));
      const {
          align = 'inherit',
          className,
          component,
          gutterBottom = false,
          noWrap = false,
          paragraph = false,
          variant = 'body1',
          variantMapping = defaultVariantMapping
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$X);
      const ownerState = _extends({}, props, {
        align,
        color,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
      });
      const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
      const classes = useUtilityClasses$K(ownerState);
      return /*#__PURE__*/jsxRuntime_1(TypographyRoot, _extends({
        as: Component,
        ref: ref,
        ownerState: ownerState,
        className: clsx(classes.root, className)
      }, other));
    });
    var Typography$1 = Typography;

    /**
     * Determines if a given element is a DOM element name (i.e. not a React component).
     */
    function isHostComponent(element) {
      return typeof element === 'string';
    }

    /**
     * Type of the ownerState based on the type of an element it applies to.
     * This resolves to the provided OwnerState for React components and `undefined` for host components.
     * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.
     */

    /**
     * Appends the ownerState object to the props, merging with the existing one if necessary.
     *
     * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.
     * @param otherProps Props of the element.
     * @param ownerState
     */
    function appendOwnerState(elementType, otherProps, ownerState) {
      if (elementType === undefined || isHostComponent(elementType)) {
        return otherProps;
      }
      return _extends({}, otherProps, {
        ownerState: _extends({}, otherProps.ownerState, ownerState)
      });
    }

    const defaultContextValue = {
      disableDefaultClasses: false
    };
    const ClassNameConfiguratorContext = /*#__PURE__*/React__namespace.createContext(defaultContextValue);
    /**
     * @ignore - internal hook.
     *
     * Wraps the `generateUtilityClass` function and controls how the classes are generated.
     * Currently it only affects whether the classes are applied or not.
     *
     * @returns Function to be called with the `generateUtilityClass` function specific to a component to generate the classes.
     */
    function useClassNamesOverride(generateUtilityClass) {
      const {
        disableDefaultClasses
      } = React__namespace.useContext(ClassNameConfiguratorContext);
      return slot => {
        if (disableDefaultClasses) {
          return '';
        }
        return generateUtilityClass(slot);
      };
    }

    /**
     * Extracts event handlers from a given object.
     * A prop is considered an event handler if it is a function and its name starts with `on`.
     *
     * @param object An object to extract event handlers from.
     * @param excludeKeys An array of keys to exclude from the returned object.
     */
    function extractEventHandlers(object, excludeKeys = []) {
      if (object === undefined) {
        return {};
      }
      const result = {};
      Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
        result[prop] = object[prop];
      });
      return result;
    }

    /**
     * If `componentProps` is a function, calls it with the provided `ownerState`.
     * Otherwise, just returns `componentProps`.
     */
    function resolveComponentProps(componentProps, ownerState, slotState) {
      if (typeof componentProps === 'function') {
        return componentProps(ownerState, slotState);
      }
      return componentProps;
    }

    /**
     * Removes event handlers from the given object.
     * A field is considered an event handler if it is a function with a name beginning with `on`.
     *
     * @param object Object to remove event handlers from.
     * @returns Object with event handlers removed.
     */
    function omitEventHandlers(object) {
      if (object === undefined) {
        return {};
      }
      const result = {};
      Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {
        result[prop] = object[prop];
      });
      return result;
    }

    /**
     * Merges the slot component internal props (usually coming from a hook)
     * with the externally provided ones.
     *
     * The merge order is (the latter overrides the former):
     * 1. The internal props (specified as a getter function to work with get*Props hook result)
     * 2. Additional props (specified internally on a Base UI component)
     * 3. External props specified on the owner component. These should only be used on a root slot.
     * 4. External props specified in the `slotProps.*` prop.
     * 5. The `className` prop - combined from all the above.
     * @param parameters
     * @returns
     */
    function mergeSlotProps(parameters) {
      const {
        getSlotProps,
        additionalProps,
        externalSlotProps,
        externalForwardedProps,
        className
      } = parameters;
      if (!getSlotProps) {
        // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,
        // so we can simply merge all the props without having to worry about extracting event handlers.
        const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
        const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
        const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
        if (joinedClasses.length > 0) {
          props.className = joinedClasses;
        }
        if (Object.keys(mergedStyle).length > 0) {
          props.style = mergedStyle;
        }
        return {
          props,
          internalRef: undefined
        };
      }

      // In this case, getSlotProps is responsible for calling the external event handlers.
      // We don't need to include them in the merged props because of this.

      const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));
      const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
      const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
      const internalSlotProps = getSlotProps(eventHandlers);

      // The order of classes is important here.
      // Emotion (that we use in libraries consuming Base UI) depends on this order
      // to properly override style. It requires the most important classes to be last
      // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.
      const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
      if (joinedClasses.length > 0) {
        props.className = joinedClasses;
      }
      if (Object.keys(mergedStyle).length > 0) {
        props.style = mergedStyle;
      }
      return {
        props,
        internalRef: internalSlotProps.ref
      };
    }

    const _excluded$W = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
    /**
     * @ignore - do not document.
     * Builds the props to be passed into the slot of an unstyled component.
     * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
     * If the slot component is not a host component, it also merges in the `ownerState`.
     *
     * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
     */
    function useSlotProps(parameters) {
      var _parameters$additiona;
      const {
          elementType,
          externalSlotProps,
          ownerState,
          skipResolvingSlotProps = false
        } = parameters,
        rest = _objectWithoutPropertiesLoose(parameters, _excluded$W);
      const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
      const {
        props: mergedProps,
        internalRef
      } = mergeSlotProps(_extends({}, rest, {
        externalSlotProps: resolvedComponentsProps
      }));
      const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
      const props = appendOwnerState(elementType, _extends({}, mergedProps, {
        ref
      }), ownerState);
      return props;
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }

    var config = {
      disabled: false
    };

    var TransitionGroupContext = React.createContext(null);

    var forceReflow = function forceReflow(node) {
      return node.scrollTop;
    };

    var UNMOUNTED = 'unmounted';
    var EXITED = 'exited';
    var ENTERING = 'entering';
    var ENTERED = 'entered';
    var EXITING = 'exiting';
    /**
     * The Transition component lets you describe a transition from one component
     * state to another _over time_ with a simple declarative API. Most commonly
     * it's used to animate the mounting and unmounting of a component, but can also
     * be used to describe in-place transition states as well.
     *
     * ---
     *
     * **Note**: `Transition` is a platform-agnostic base component. If you're using
     * transitions in CSS, you'll probably want to use
     * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
     * instead. It inherits all the features of `Transition`, but contains
     * additional features necessary to play nice with CSS transitions (hence the
     * name of the component).
     *
     * ---
     *
     * By default the `Transition` component does not alter the behavior of the
     * component it renders, it only tracks "enter" and "exit" states for the
     * components. It's up to you to give meaning and effect to those states. For
     * example we can add styles to a component when it enters or exits:
     *
     * ```jsx
     * import { Transition } from 'react-transition-group';
     *
     * const duration = 300;
     *
     * const defaultStyle = {
     *   transition: `opacity ${duration}ms ease-in-out`,
     *   opacity: 0,
     * }
     *
     * const transitionStyles = {
     *   entering: { opacity: 1 },
     *   entered:  { opacity: 1 },
     *   exiting:  { opacity: 0 },
     *   exited:  { opacity: 0 },
     * };
     *
     * const Fade = ({ in: inProp }) => (
     *   <Transition in={inProp} timeout={duration}>
     *     {state => (
     *       <div style={{
     *         ...defaultStyle,
     *         ...transitionStyles[state]
     *       }}>
     *         I'm a fade Transition!
     *       </div>
     *     )}
     *   </Transition>
     * );
     * ```
     *
     * There are 4 main states a Transition can be in:
     *  - `'entering'`
     *  - `'entered'`
     *  - `'exiting'`
     *  - `'exited'`
     *
     * Transition state is toggled via the `in` prop. When `true` the component
     * begins the "Enter" stage. During this stage, the component will shift from
     * its current transition state, to `'entering'` for the duration of the
     * transition and then to the `'entered'` stage once it's complete. Let's take
     * the following example (we'll use the
     * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
     *
     * ```jsx
     * function App() {
     *   const [inProp, setInProp] = useState(false);
     *   return (
     *     <div>
     *       <Transition in={inProp} timeout={500}>
     *         {state => (
     *           // ...
     *         )}
     *       </Transition>
     *       <button onClick={() => setInProp(true)}>
     *         Click to Enter
     *       </button>
     *     </div>
     *   );
     * }
     * ```
     *
     * When the button is clicked the component will shift to the `'entering'` state
     * and stay there for 500ms (the value of `timeout`) before it finally switches
     * to `'entered'`.
     *
     * When `in` is `false` the same thing happens except the state moves from
     * `'exiting'` to `'exited'`.
     */

    var Transition = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose(Transition, _React$Component);

      function Transition(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;

        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }

        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }

      Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;

        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }

        return null;
      } // getSnapshotBeforeUpdate(prevProps) {
      //   let nextStatus = null
      //   if (prevProps !== this.props) {
      //     const { status } = this.state
      //     if (this.props.in) {
      //       if (status !== ENTERING && status !== ENTERED) {
      //         nextStatus = ENTERING
      //       }
      //     } else {
      //       if (status === ENTERING || status === ENTERED) {
      //         nextStatus = EXITING
      //       }
      //     }
      //   }
      //   return { nextStatus }
      // }
      ;

      var _proto = Transition.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;

        if (prevProps !== this.props) {
          var status = this.state.status;

          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }

        this.updateStatus(false, nextStatus);
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };

      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;

        if (timeout != null && typeof timeout !== 'number') {
          exit = timeout.exit;
          enter = timeout.enter; // TODO: remove fallback for next major

          appear = timeout.appear !== undefined ? timeout.appear : enter;
        }

        return {
          exit: exit,
          enter: enter,
          appear: appear
        };
      };

      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }

        if (nextStatus !== null) {
          // nextStatus will always be ENTERING or EXITING.
          this.cancelNextCallback();

          if (nextStatus === ENTERING) {
            if (this.props.unmountOnExit || this.props.mountOnEnter) {
              var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
              // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
              // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

              if (node) forceReflow(node);
            }

            this.performEnter(mounting);
          } else {
            this.performExit();
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };

      _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;

        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;

        var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
            maybeNode = _ref2[0],
            maybeAppearing = _ref2[1];

        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set

        if (!mounting && !enter || config.disabled) {
          this.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode);
          });
          return;
        }

        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
          status: ENTERING
        }, function () {
          _this2.props.onEntering(maybeNode, maybeAppearing);

          _this2.onTransitionEnd(enterTimeout, function () {
            _this2.safeSetState({
              status: ENTERED
            }, function () {
              _this2.props.onEntered(maybeNode, maybeAppearing);
            });
          });
        });
      };

      _proto.performExit = function performExit() {
        var _this3 = this;

        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

        if (!exit || config.disabled) {
          this.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
          return;
        }

        this.props.onExit(maybeNode);
        this.safeSetState({
          status: EXITING
        }, function () {
          _this3.props.onExiting(maybeNode);

          _this3.onTransitionEnd(timeouts.exit, function () {
            _this3.safeSetState({
              status: EXITED
            }, function () {
              _this3.props.onExited(maybeNode);
            });
          });
        });
      };

      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };

      _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };

      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;

        var active = true;

        this.nextCallback = function (event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };

        this.nextCallback.cancel = function () {
          active = false;
        };

        return this.nextCallback;
      };

      _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

        if (!node || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }

        if (this.props.addEndListener) {
          var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
              maybeNode = _ref3[0],
              maybeNextCallback = _ref3[1];

          this.props.addEndListener(maybeNode, maybeNextCallback);
        }

        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };

      _proto.render = function render() {
        var status = this.state.status;

        if (status === UNMOUNTED) {
          return null;
        }

        var _this$props = this.props,
            children = _this$props.children;
            _this$props.in;
            _this$props.mountOnEnter;
            _this$props.unmountOnExit;
            _this$props.appear;
            _this$props.enter;
            _this$props.exit;
            _this$props.timeout;
            _this$props.addEndListener;
            _this$props.onEnter;
            _this$props.onEntering;
            _this$props.onEntered;
            _this$props.onExit;
            _this$props.onExiting;
            _this$props.onExited;
            _this$props.nodeRef;
            var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

        return (
          /*#__PURE__*/
          // allows for nested Transitions
          React.createElement(TransitionGroupContext.Provider, {
            value: null
          }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
        );
      };

      return Transition;
    }(React.Component);

    Transition.contextType = TransitionGroupContext;
    Transition.propTypes = {}; // Name the function so it is clearer in the documentation

    function noop() {}

    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop,
      onEntering: noop,
      onEntered: noop,
      onExit: noop,
      onExiting: noop,
      onExited: noop
    };
    Transition.UNMOUNTED = UNMOUNTED;
    Transition.EXITED = EXITED;
    Transition.ENTERING = ENTERING;
    Transition.ENTERED = ENTERED;
    Transition.EXITING = EXITING;
    var Transition$1 = Transition;

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }

    /**
     * Given `this.props.children`, return an object mapping key to child.
     *
     * @param {*} children `this.props.children`
     * @return {object} Mapping of key to child
     */

    function getChildMapping(children, mapFn) {
      var mapper = function mapper(child) {
        return mapFn && React.isValidElement(child) ? mapFn(child) : child;
      };

      var result = Object.create(null);
      if (children) React.Children.map(children, function (c) {
        return c;
      }).forEach(function (child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
      });
      return result;
    }
    /**
     * When you're adding or removing children some may be added or removed in the
     * same render pass. We want to show *both* since we want to simultaneously
     * animate elements in and out. This function takes a previous set of keys
     * and a new set of keys and merges them with its best guess of the correct
     * ordering. In the future we may expose some of the utilities in
     * ReactMultiChild to make this easy, but for now React itself does not
     * directly have this concept of the union of prevChildren and nextChildren
     * so we implement it here.
     *
     * @param {object} prev prev children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @param {object} next next children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @return {object} a key set that contains all keys in `prev` and all keys
     * in `next` in a reasonable order.
     */

    function mergeChildMappings(prev, next) {
      prev = prev || {};
      next = next || {};

      function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
      } // For each key of `next`, the list of keys to insert before that key in
      // the combined list


      var nextKeysPending = Object.create(null);
      var pendingKeys = [];

      for (var prevKey in prev) {
        if (prevKey in next) {
          if (pendingKeys.length) {
            nextKeysPending[prevKey] = pendingKeys;
            pendingKeys = [];
          }
        } else {
          pendingKeys.push(prevKey);
        }
      }

      var i;
      var childMapping = {};

      for (var nextKey in next) {
        if (nextKeysPending[nextKey]) {
          for (i = 0; i < nextKeysPending[nextKey].length; i++) {
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
          }
        }

        childMapping[nextKey] = getValueForKey(nextKey);
      } // Finally, add the keys which didn't appear before any key in `next`


      for (i = 0; i < pendingKeys.length; i++) {
        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
      }

      return childMapping;
    }

    function getProp(child, prop, props) {
      return props[prop] != null ? props[prop] : child.props[prop];
    }

    function getInitialChildMapping(props, onExited) {
      return getChildMapping(props.children, function (child) {
        return React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          appear: getProp(child, 'appear', props),
          enter: getProp(child, 'enter', props),
          exit: getProp(child, 'exit', props)
        });
      });
    }
    function getNextChildMapping(nextProps, prevChildMapping, onExited) {
      var nextChildMapping = getChildMapping(nextProps.children);
      var children = mergeChildMappings(prevChildMapping, nextChildMapping);
      Object.keys(children).forEach(function (key) {
        var child = children[key];
        if (!React.isValidElement(child)) return;
        var hasPrev = (key in prevChildMapping);
        var hasNext = (key in nextChildMapping);
        var prevChild = prevChildMapping[key];
        var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

        if (hasNext && (!hasPrev || isLeaving)) {
          // console.log('entering', key)
          children[key] = React.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        } else if (!hasNext && hasPrev && !isLeaving) {
          // item is old (exiting)
          // console.log('leaving', key)
          children[key] = React.cloneElement(child, {
            in: false
          });
        } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
          // item hasn't changed transition states
          // copy over the last transition props;
          // console.log('unchanged', key)
          children[key] = React.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        }
      });
      return children;
    }

    var values = Object.values || function (obj) {
      return Object.keys(obj).map(function (k) {
        return obj[k];
      });
    };

    var defaultProps = {
      component: 'div',
      childFactory: function childFactory(child) {
        return child;
      }
    };
    /**
     * The `<TransitionGroup>` component manages a set of transition components
     * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
     * components, `<TransitionGroup>` is a state machine for managing the mounting
     * and unmounting of components over time.
     *
     * Consider the example below. As items are removed or added to the TodoList the
     * `in` prop is toggled automatically by the `<TransitionGroup>`.
     *
     * Note that `<TransitionGroup>`  does not define any animation behavior!
     * Exactly _how_ a list item animates is up to the individual transition
     * component. This means you can mix and match animations across different list
     * items.
     */

    var TransitionGroup = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose(TransitionGroup, _React$Component);

      function TransitionGroup(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;

        var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited: handleExited,
          firstRender: true
        };
        return _this;
      }

      var _proto = TransitionGroup.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };

      TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children,
            handleExited = _ref.handleExited,
            firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      } // node is `undefined` when user provided `nodeRef` prop
      ;

      _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping) return;

        if (child.props.onExited) {
          child.props.onExited(node);
        }

        if (this.mounted) {
          this.setState(function (state) {
            var children = _extends({}, state.children);

            delete children[child.key];
            return {
              children: children
            };
          });
        }
      };

      _proto.render = function render() {
        var _this$props = this.props,
            Component = _this$props.component,
            childFactory = _this$props.childFactory,
            props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;

        if (Component === null) {
          return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
            value: contextValue
          }, children);
        }

        return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, /*#__PURE__*/React.createElement(Component, props, children));
      };

      return TransitionGroup;
    }(React.Component);

    TransitionGroup.propTypes = {};
    TransitionGroup.defaultProps = defaultProps;
    var TransitionGroup$1 = TransitionGroup;

    function Ripple(props) {
      const {
        className,
        classes,
        pulsate = false,
        rippleX,
        rippleY,
        rippleSize,
        in: inProp,
        onExited,
        timeout
      } = props;
      const [leaving, setLeaving] = React__namespace.useState(false);
      const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
      const rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
      };
      const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
      if (!inProp && !leaving) {
        setLeaving(true);
      }
      React__namespace.useEffect(() => {
        if (!inProp && onExited != null) {
          // react-transition-group#onExited
          const timeoutId = setTimeout(onExited, timeout);
          return () => {
            clearTimeout(timeoutId);
          };
        }
        return undefined;
      }, [onExited, inProp, timeout]);
      return /*#__PURE__*/jsxRuntime_1("span", {
        className: rippleClassName,
        style: rippleStyles,
        children: /*#__PURE__*/jsxRuntime_1("span", {
          className: childClassName
        })
      });
    }

    const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
    var touchRippleClasses$1 = touchRippleClasses;

    const _excluded$V = ["center", "classes", "className"];
    let _ = t => t,
      _t,
      _t2,
      _t3,
      _t4;
    const DURATION = 550;
    const DELAY_RIPPLE = 80;
    const enterKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
    const exitKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
    const pulsateKeyframe = keyframes(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
    const TouchRippleRoot = styled$1('span', {
      name: 'MuiTouchRipple',
      slot: 'Root'
    })({
      overflow: 'hidden',
      pointerEvents: 'none',
      position: 'absolute',
      zIndex: 0,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderRadius: 'inherit'
    });

    // This `styled()` function invokes keyframes. `styled-components` only supports keyframes
    // in string templates. Do not convert these styles in JS object as it will break.
    const TouchRippleRipple = styled$1(Ripple, {
      name: 'MuiTouchRipple',
      slot: 'Ripple'
    })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
      theme
    }) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
      theme
    }) => theme.transitions.easing.easeInOut);

    /**
     * @ignore - internal component.
     *
     * TODO v5: Make private
     */
    const TouchRipple = /*#__PURE__*/React__namespace.forwardRef(function TouchRipple(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTouchRipple'
      });
      const {
          center: centerProp = false,
          classes = {},
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$V);
      const [ripples, setRipples] = React__namespace.useState([]);
      const nextKey = React__namespace.useRef(0);
      const rippleCallback = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        if (rippleCallback.current) {
          rippleCallback.current();
          rippleCallback.current = null;
        }
      }, [ripples]);

      // Used to filter out mouse emulated events on mobile.
      const ignoringMouseDown = React__namespace.useRef(false);
      // We use a timer in order to only show the ripples for touch "click" like events.
      // We don't want to display the ripple for touch scroll events.
      const startTimer = React__namespace.useRef(0);

      // This is the hook called once the previous timeout is ready.
      const startTimerCommit = React__namespace.useRef(null);
      const container = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        return () => {
          if (startTimer.current) {
            clearTimeout(startTimer.current);
          }
        };
      }, []);
      const startCommit = React__namespace.useCallback(params => {
        const {
          pulsate,
          rippleX,
          rippleY,
          rippleSize,
          cb
        } = params;
        setRipples(oldRipples => [...oldRipples, /*#__PURE__*/jsxRuntime_1(TouchRippleRipple, {
          classes: {
            ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
            rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
            ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
            child: clsx(classes.child, touchRippleClasses$1.child),
            childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
            childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
          },
          timeout: DURATION,
          pulsate: pulsate,
          rippleX: rippleX,
          rippleY: rippleY,
          rippleSize: rippleSize
        }, nextKey.current)]);
        nextKey.current += 1;
        rippleCallback.current = cb;
      }, [classes]);
      const start = React__namespace.useCallback((event = {}, options = {}, cb = () => {}) => {
        const {
          pulsate = false,
          center = centerProp || options.pulsate,
          fakeElement = false // For test purposes
        } = options;
        if ((event == null ? void 0 : event.type) === 'mousedown' && ignoringMouseDown.current) {
          ignoringMouseDown.current = false;
          return;
        }
        if ((event == null ? void 0 : event.type) === 'touchstart') {
          ignoringMouseDown.current = true;
        }
        const element = fakeElement ? null : container.current;
        const rect = element ? element.getBoundingClientRect() : {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        };

        // Get the size of the ripple
        let rippleX;
        let rippleY;
        let rippleSize;
        if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
          rippleX = Math.round(rect.width / 2);
          rippleY = Math.round(rect.height / 2);
        } else {
          const {
            clientX,
            clientY
          } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
          rippleX = Math.round(clientX - rect.left);
          rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
          rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);

          // For some reason the animation is broken on Mobile Chrome if the size is even.
          if (rippleSize % 2 === 0) {
            rippleSize += 1;
          }
        } else {
          const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
          const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
          rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
        }

        // Touche devices
        if (event != null && event.touches) {
          // check that this isn't another touchstart due to multitouch
          // otherwise we will only clear a single timer when unmounting while two
          // are running
          if (startTimerCommit.current === null) {
            // Prepare the ripple effect.
            startTimerCommit.current = () => {
              startCommit({
                pulsate,
                rippleX,
                rippleY,
                rippleSize,
                cb
              });
            };
            // Delay the execution of the ripple effect.
            startTimer.current = setTimeout(() => {
              if (startTimerCommit.current) {
                startTimerCommit.current();
                startTimerCommit.current = null;
              }
            }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
          }
        } else {
          startCommit({
            pulsate,
            rippleX,
            rippleY,
            rippleSize,
            cb
          });
        }
      }, [centerProp, startCommit]);
      const pulsate = React__namespace.useCallback(() => {
        start({}, {
          pulsate: true
        });
      }, [start]);
      const stop = React__namespace.useCallback((event, cb) => {
        clearTimeout(startTimer.current);

        // The touch interaction occurs too quickly.
        // We still want to show ripple effect.
        if ((event == null ? void 0 : event.type) === 'touchend' && startTimerCommit.current) {
          startTimerCommit.current();
          startTimerCommit.current = null;
          startTimer.current = setTimeout(() => {
            stop(event, cb);
          });
          return;
        }
        startTimerCommit.current = null;
        setRipples(oldRipples => {
          if (oldRipples.length > 0) {
            return oldRipples.slice(1);
          }
          return oldRipples;
        });
        rippleCallback.current = cb;
      }, []);
      React__namespace.useImperativeHandle(ref, () => ({
        pulsate,
        start,
        stop
      }), [pulsate, start, stop]);
      return /*#__PURE__*/jsxRuntime_1(TouchRippleRoot, _extends({
        className: clsx(touchRippleClasses$1.root, classes.root, className),
        ref: container
      }, other, {
        children: /*#__PURE__*/jsxRuntime_1(TransitionGroup$1, {
          component: null,
          exit: true,
          children: ripples
        })
      }));
    });
    var TouchRipple$1 = TouchRipple;

    function getButtonBaseUtilityClass(slot) {
      return generateUtilityClass('MuiButtonBase', slot);
    }
    const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
    var buttonBaseClasses$1 = buttonBaseClasses;

    const _excluded$U = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
    const useUtilityClasses$J = ownerState => {
      const {
        disabled,
        focusVisible,
        focusVisibleClassName,
        classes
      } = ownerState;
      const slots = {
        root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
      };
      const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
      if (focusVisible && focusVisibleClassName) {
        composedClasses.root += ` ${focusVisibleClassName}`;
      }
      return composedClasses;
    };
    const ButtonBaseRoot = styled$1('button', {
      name: 'MuiButtonBase',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      position: 'relative',
      boxSizing: 'border-box',
      WebkitTapHighlightColor: 'transparent',
      backgroundColor: 'transparent',
      // Reset default value
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      border: 0,
      margin: 0,
      // Remove the margin in Safari
      borderRadius: 0,
      padding: 0,
      // Remove the padding in Firefox
      cursor: 'pointer',
      userSelect: 'none',
      verticalAlign: 'middle',
      MozAppearance: 'none',
      // Reset
      WebkitAppearance: 'none',
      // Reset
      textDecoration: 'none',
      // So we take precedent over the style of a native <a /> element.
      color: 'inherit',
      '&::-moz-focus-inner': {
        borderStyle: 'none' // Remove Firefox dotted outline.
      },

      [`&.${buttonBaseClasses$1.disabled}`]: {
        pointerEvents: 'none',
        // Disable link interactions
        cursor: 'default'
      },
      '@media print': {
        colorAdjust: 'exact'
      }
    });

    /**
     * `ButtonBase` contains as few styles as possible.
     * It aims to be a simple building block for creating a button.
     * It contains a load of style reset and some focus/ripple logic.
     */
    const ButtonBase = /*#__PURE__*/React__namespace.forwardRef(function ButtonBase(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiButtonBase'
      });
      const {
          action,
          centerRipple = false,
          children,
          className,
          component = 'button',
          disabled = false,
          disableRipple = false,
          disableTouchRipple = false,
          focusRipple = false,
          LinkComponent = 'a',
          onBlur,
          onClick,
          onContextMenu,
          onDragLeave,
          onFocus,
          onFocusVisible,
          onKeyDown,
          onKeyUp,
          onMouseDown,
          onMouseLeave,
          onMouseUp,
          onTouchEnd,
          onTouchMove,
          onTouchStart,
          tabIndex = 0,
          TouchRippleProps,
          touchRippleRef,
          type
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$U);
      const buttonRef = React__namespace.useRef(null);
      const rippleRef = React__namespace.useRef(null);
      const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
      const {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible();
      const [focusVisible, setFocusVisible] = React__namespace.useState(false);
      if (disabled && focusVisible) {
        setFocusVisible(false);
      }
      React__namespace.useImperativeHandle(action, () => ({
        focusVisible: () => {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      }), []);
      const [mountedState, setMountedState] = React__namespace.useState(false);
      React__namespace.useEffect(() => {
        setMountedState(true);
      }, []);
      const enableTouchRipple = mountedState && !disableRipple && !disabled;
      React__namespace.useEffect(() => {
        if (focusVisible && focusRipple && !disableRipple && mountedState) {
          rippleRef.current.pulsate();
        }
      }, [disableRipple, focusRipple, focusVisible, mountedState]);
      function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
        return useEventCallback(event => {
          if (eventCallback) {
            eventCallback(event);
          }
          const ignore = skipRippleAction;
          if (!ignore && rippleRef.current) {
            rippleRef.current[rippleAction](event);
          }
          return true;
        });
      }
      const handleMouseDown = useRippleHandler('start', onMouseDown);
      const handleContextMenu = useRippleHandler('stop', onContextMenu);
      const handleDragLeave = useRippleHandler('stop', onDragLeave);
      const handleMouseUp = useRippleHandler('stop', onMouseUp);
      const handleMouseLeave = useRippleHandler('stop', event => {
        if (focusVisible) {
          event.preventDefault();
        }
        if (onMouseLeave) {
          onMouseLeave(event);
        }
      });
      const handleTouchStart = useRippleHandler('start', onTouchStart);
      const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
      const handleTouchMove = useRippleHandler('stop', onTouchMove);
      const handleBlur = useRippleHandler('stop', event => {
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusVisible(false);
        }
        if (onBlur) {
          onBlur(event);
        }
      }, false);
      const handleFocus = useEventCallback(event => {
        // Fix for https://github.com/facebook/react/issues/7769
        if (!buttonRef.current) {
          buttonRef.current = event.currentTarget;
        }
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusVisible(true);
          if (onFocusVisible) {
            onFocusVisible(event);
          }
        }
        if (onFocus) {
          onFocus(event);
        }
      });
      const isNonNativeButton = () => {
        const button = buttonRef.current;
        return component && component !== 'button' && !(button.tagName === 'A' && button.href);
      };

      /**
       * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
       */
      const keydownRef = React__namespace.useRef(false);
      const handleKeyDown = useEventCallback(event => {
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
          keydownRef.current = true;
          rippleRef.current.stop(event, () => {
            rippleRef.current.start(event);
          });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }

        // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
          event.preventDefault();
          if (onClick) {
            onClick(event);
          }
        }
      });
      const handleKeyUp = useEventCallback(event => {
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
        if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
          keydownRef.current = false;
          rippleRef.current.stop(event, () => {
            rippleRef.current.pulsate(event);
          });
        }
        if (onKeyUp) {
          onKeyUp(event);
        }

        // Keyboard accessibility for non interactive elements
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
          onClick(event);
        }
      });
      let ComponentProp = component;
      if (ComponentProp === 'button' && (other.href || other.to)) {
        ComponentProp = LinkComponent;
      }
      const buttonProps = {};
      if (ComponentProp === 'button') {
        buttonProps.type = type === undefined ? 'button' : type;
        buttonProps.disabled = disabled;
      } else {
        if (!other.href && !other.to) {
          buttonProps.role = 'button';
        }
        if (disabled) {
          buttonProps['aria-disabled'] = disabled;
        }
      }
      const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
      const ownerState = _extends({}, props, {
        centerRipple,
        component,
        disabled,
        disableRipple,
        disableTouchRipple,
        focusRipple,
        tabIndex,
        focusVisible
      });
      const classes = useUtilityClasses$J(ownerState);
      return /*#__PURE__*/jsxRuntime_2(ButtonBaseRoot, _extends({
        as: ComponentProp,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        onBlur: handleBlur,
        onClick: onClick,
        onContextMenu: handleContextMenu,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex,
        type: type
      }, buttonProps, other, {
        children: [children, enableTouchRipple ?
        /*#__PURE__*/
        /* TouchRipple is only needed client-side, x2 boost on the server. */
        jsxRuntime_1(TouchRipple$1, _extends({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps)) : null]
      }));
    });
    var ButtonBase$1 = ButtonBase;

    function getIconButtonUtilityClass(slot) {
      return generateUtilityClass('MuiIconButton', slot);
    }
    const iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
    var iconButtonClasses$1 = iconButtonClasses;

    const _excluded$T = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
    const useUtilityClasses$I = ownerState => {
      const {
        classes,
        disabled,
        color,
        edge,
        size
      } = ownerState;
      const slots = {
        root: ['root', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
      };
      return composeClasses(slots, getIconButtonUtilityClass, classes);
    };
    const IconButtonRoot = styled$1(ButtonBase$1, {
      name: 'MuiIconButton',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      textAlign: 'center',
      flex: '0 0 auto',
      fontSize: theme.typography.pxToRem(24),
      padding: 8,
      borderRadius: '50%',
      overflow: 'visible',
      // Explicitly set the default value to solve a bug on IE11.
      color: (theme.vars || theme).palette.action.active,
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shortest
      })
    }, !ownerState.disableRipple && {
      '&:hover': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    }, ownerState.edge === 'start' && {
      marginLeft: ownerState.size === 'small' ? -3 : -12
    }, ownerState.edge === 'end' && {
      marginRight: ownerState.size === 'small' ? -3 : -12
    }), ({
      theme,
      ownerState
    }) => {
      var _palette;
      const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
      return _extends({}, ownerState.color === 'inherit' && {
        color: 'inherit'
      }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && _extends({
        color: palette == null ? void 0 : palette.main
      }, !ownerState.disableRipple && {
        '&:hover': _extends({}, palette && {
          backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette.main, theme.palette.action.hoverOpacity)
        }, {
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        })
      }), ownerState.size === 'small' && {
        padding: 5,
        fontSize: theme.typography.pxToRem(18)
      }, ownerState.size === 'large' && {
        padding: 12,
        fontSize: theme.typography.pxToRem(28)
      }, {
        [`&.${iconButtonClasses$1.disabled}`]: {
          backgroundColor: 'transparent',
          color: (theme.vars || theme).palette.action.disabled
        }
      });
    });

    /**
     * Refer to the [Icons](/material-ui/icons/) section of the documentation
     * regarding the available icon options.
     */
    const IconButton = /*#__PURE__*/React__namespace.forwardRef(function IconButton(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiIconButton'
      });
      const {
          edge = false,
          children,
          className,
          color = 'default',
          disabled = false,
          disableFocusRipple = false,
          size = 'medium'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$T);
      const ownerState = _extends({}, props, {
        edge,
        color,
        disabled,
        disableFocusRipple,
        size
      });
      const classes = useUtilityClasses$I(ownerState);
      return /*#__PURE__*/jsxRuntime_1(IconButtonRoot, _extends({
        className: clsx(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: children
      }));
    });
    var IconButton$1 = IconButton;

    function getSvgIconUtilityClass(slot) {
      return generateUtilityClass('MuiSvgIcon', slot);
    }
    generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

    const _excluded$S = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
    const useUtilityClasses$H = ownerState => {
      const {
        color,
        fontSize,
        classes
      } = ownerState;
      const slots = {
        root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
      };
      return composeClasses(slots, getSvgIconUtilityClass, classes);
    };
    const SvgIconRoot = styled$1('svg', {
      name: 'MuiSvgIcon',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
      return {
        userSelect: 'none',
        width: '1em',
        height: '1em',
        display: 'inline-block',
        // the <svg> will define the property that has `currentColor`
        // e.g. heroicons uses fill="none" and stroke="currentColor"
        fill: ownerState.hasSvgAsChild ? undefined : 'currentColor',
        flexShrink: 0,
        transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
          duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
        }),
        fontSize: {
          inherit: 'inherit',
          small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
          medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
          large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875rem'
        }[ownerState.fontSize],
        // TODO v5 deprecate, v6 remove for sx
        color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
          action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
          disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
          inherit: undefined
        }[ownerState.color]
      };
    });
    const SvgIcon = /*#__PURE__*/React__namespace.forwardRef(function SvgIcon(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiSvgIcon'
      });
      const {
          children,
          className,
          color = 'inherit',
          component = 'svg',
          fontSize = 'medium',
          htmlColor,
          inheritViewBox = false,
          titleAccess,
          viewBox = '0 0 24 24'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$S);
      const hasSvgAsChild = /*#__PURE__*/React__namespace.isValidElement(children) && children.type === 'svg';
      const ownerState = _extends({}, props, {
        color,
        component,
        fontSize,
        instanceFontSize: inProps.fontSize,
        inheritViewBox,
        viewBox,
        hasSvgAsChild
      });
      const more = {};
      if (!inheritViewBox) {
        more.viewBox = viewBox;
      }
      const classes = useUtilityClasses$H(ownerState);
      return /*#__PURE__*/jsxRuntime_2(SvgIconRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        focusable: "false",
        color: htmlColor,
        "aria-hidden": titleAccess ? undefined : true,
        role: titleAccess ? 'img' : undefined,
        ref: ref
      }, more, other, hasSvgAsChild && children.props, {
        ownerState: ownerState,
        children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/jsxRuntime_1("title", {
          children: titleAccess
        }) : null]
      }));
    });
    SvgIcon.muiName = 'SvgIcon';
    var SvgIcon$1 = SvgIcon;

    function createSvgIcon(path, displayName) {
      function Component(props, ref) {
        return /*#__PURE__*/jsxRuntime_1(SvgIcon$1, _extends({
          "data-testid": `${displayName}Icon`,
          ref: ref
        }, props, {
          children: path
        }));
      }
      Component.muiName = SvgIcon$1.muiName;
      return /*#__PURE__*/React__namespace.memo( /*#__PURE__*/React__namespace.forwardRef(Component));
    }

    createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');

    /**
     * @ignore - internal component.
     */
    const ArrowLeftIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
      d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
    }), 'ArrowLeft');

    /**
     * @ignore - internal component.
     */
    const ArrowRightIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
      d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
    }), 'ArrowRight');

    /**
     * @ignore - internal component.
     */
    createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
      d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
    }), 'Calendar');

    /**
     * @ignore - internal component.
     */
    const ClockIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_1("path", {
        d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
      }), /*#__PURE__*/jsxRuntime_1("path", {
        d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
      })]
    }), 'Clock');

    /**
     * @ignore - internal component.
     */
    createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
      d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
    }), 'DateRange');

    /**
     * @ignore - internal component.
     */
    createSvgIcon( /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_1("path", {
        d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
      }), /*#__PURE__*/jsxRuntime_1("path", {
        d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
      })]
    }), 'Time');

    /**
     * @ignore - internal component.
     */
    const ClearIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
      d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }), 'Clear');

    function getPickersArrowSwitcherUtilityClass(slot) {
      return generateUtilityClass('MuiPickersArrowSwitcher', slot);
    }
    generateUtilityClasses('MuiPickersArrowSwitcher', ['root', 'spacer', 'button']);

    const _excluded$R = ["children", "className", "slots", "slotProps", "isNextDisabled", "isNextHidden", "onGoToNext", "nextLabel", "isPreviousDisabled", "isPreviousHidden", "onGoToPrevious", "previousLabel"],
      _excluded2$8 = ["ownerState"],
      _excluded3$3 = ["ownerState"];
    const PickersArrowSwitcherRoot = styled$1('div', {
      name: 'MuiPickersArrowSwitcher',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'flex'
    });
    const PickersArrowSwitcherSpacer = styled$1('div', {
      name: 'MuiPickersArrowSwitcher',
      slot: 'Spacer',
      overridesResolver: (props, styles) => styles.spacer
    })(({
      theme
    }) => ({
      width: theme.spacing(3)
    }));
    const PickersArrowSwitcherButton = styled$1(IconButton$1, {
      name: 'MuiPickersArrowSwitcher',
      slot: 'Button',
      overridesResolver: (props, styles) => styles.button
    })(({
      ownerState
    }) => _extends({}, ownerState.hidden && {
      visibility: 'hidden'
    }));
    const useUtilityClasses$G = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        spacer: ['spacer'],
        button: ['button']
      };
      return composeClasses(slots, getPickersArrowSwitcherUtilityClass, classes);
    };
    const PickersArrowSwitcher = /*#__PURE__*/React__namespace.forwardRef(function PickersArrowSwitcher(inProps, ref) {
      var _slots$previousIconBu, _slots$nextIconButton, _slots$leftArrowIcon, _slots$rightArrowIcon;
      const theme = useTheme();
      const isRTL = theme.direction === 'rtl';
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersArrowSwitcher'
      });
      const {
          children,
          className,
          slots,
          slotProps,
          isNextDisabled,
          isNextHidden,
          onGoToNext,
          nextLabel,
          isPreviousDisabled,
          isPreviousHidden,
          onGoToPrevious,
          previousLabel
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$R);
      const ownerState = props;
      const classes = useUtilityClasses$G(ownerState);
      const nextProps = {
        isDisabled: isNextDisabled,
        isHidden: isNextHidden,
        goTo: onGoToNext,
        label: nextLabel
      };
      const previousProps = {
        isDisabled: isPreviousDisabled,
        isHidden: isPreviousHidden,
        goTo: onGoToPrevious,
        label: previousLabel
      };
      const PreviousIconButton = (_slots$previousIconBu = slots == null ? void 0 : slots.previousIconButton) != null ? _slots$previousIconBu : PickersArrowSwitcherButton;
      const previousIconButtonProps = useSlotProps({
        elementType: PreviousIconButton,
        externalSlotProps: slotProps == null ? void 0 : slotProps.previousIconButton,
        additionalProps: {
          size: 'medium',
          title: previousProps.label,
          'aria-label': previousProps.label,
          disabled: previousProps.isDisabled,
          edge: 'end',
          onClick: previousProps.goTo
        },
        ownerState: _extends({}, ownerState, {
          hidden: previousProps.isHidden
        }),
        className: classes.button
      });
      const NextIconButton = (_slots$nextIconButton = slots == null ? void 0 : slots.nextIconButton) != null ? _slots$nextIconButton : PickersArrowSwitcherButton;
      const nextIconButtonProps = useSlotProps({
        elementType: NextIconButton,
        externalSlotProps: slotProps == null ? void 0 : slotProps.nextIconButton,
        additionalProps: {
          size: 'medium',
          title: nextProps.label,
          'aria-label': nextProps.label,
          disabled: nextProps.isDisabled,
          edge: 'start',
          onClick: nextProps.goTo
        },
        ownerState: _extends({}, ownerState, {
          hidden: nextProps.isHidden
        }),
        className: classes.button
      });
      const LeftArrowIcon = (_slots$leftArrowIcon = slots == null ? void 0 : slots.leftArrowIcon) != null ? _slots$leftArrowIcon : ArrowLeftIcon;
      // The spread is here to avoid this bug mui/material-ui#34056
      const _useSlotProps = useSlotProps({
          elementType: LeftArrowIcon,
          externalSlotProps: slotProps == null ? void 0 : slotProps.leftArrowIcon,
          additionalProps: {
            fontSize: 'inherit'
          },
          ownerState: undefined
        }),
        leftArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$8);
      const RightArrowIcon = (_slots$rightArrowIcon = slots == null ? void 0 : slots.rightArrowIcon) != null ? _slots$rightArrowIcon : ArrowRightIcon;
      // The spread is here to avoid this bug mui/material-ui#34056
      const _useSlotProps2 = useSlotProps({
          elementType: RightArrowIcon,
          externalSlotProps: slotProps == null ? void 0 : slotProps.rightArrowIcon,
          additionalProps: {
            fontSize: 'inherit'
          },
          ownerState: undefined
        }),
        rightArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded3$3);
      return /*#__PURE__*/jsxRuntime_2(PickersArrowSwitcherRoot, _extends({
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState
      }, other, {
        children: [/*#__PURE__*/jsxRuntime_1(PreviousIconButton, _extends({}, previousIconButtonProps, {
          children: isRTL ? /*#__PURE__*/jsxRuntime_1(RightArrowIcon, _extends({}, rightArrowIconProps)) : /*#__PURE__*/jsxRuntime_1(LeftArrowIcon, _extends({}, leftArrowIconProps))
        })), children ? /*#__PURE__*/jsxRuntime_1(Typography$1, {
          variant: "subtitle1",
          component: "span",
          children: children
        }) : /*#__PURE__*/jsxRuntime_1(PickersArrowSwitcherSpacer, {
          className: classes.spacer,
          ownerState: ownerState
        }), /*#__PURE__*/jsxRuntime_1(NextIconButton, _extends({}, nextIconButtonProps, {
          children: isRTL ? /*#__PURE__*/jsxRuntime_1(LeftArrowIcon, _extends({}, leftArrowIconProps)) : /*#__PURE__*/jsxRuntime_1(RightArrowIcon, _extends({}, rightArrowIconProps))
        }))]
      }));
    });

    const areViewsEqual = (views, expectedViews) => {
      if (views.length !== expectedViews.length) {
        return false;
      }
      return expectedViews.every(expectedView => views.includes(expectedView));
    };
    const applyDefaultViewProps = ({
      openTo,
      defaultOpenTo,
      views,
      defaultViews
    }) => {
      const viewsWithDefault = views != null ? views : defaultViews;
      let openToWithDefault;
      if (openTo != null) {
        openToWithDefault = openTo;
      } else if (viewsWithDefault.includes(defaultOpenTo)) {
        openToWithDefault = defaultOpenTo;
      } else if (viewsWithDefault.length > 0) {
        openToWithDefault = viewsWithDefault[0];
      } else {
        throw new Error('MUI: The `views` prop must contain at least one view');
      }
      return {
        views: viewsWithDefault,
        openTo: openToWithDefault
      };
    };

    const timeViews = ['hours', 'minutes', 'seconds'];
    const isTimeView = view => timeViews.includes(view);
    const isInternalTimeView = view => timeViews.includes(view) || view === 'meridiem';
    const getMeridiem = (date, utils) => {
      if (!date) {
        return null;
      }
      return utils.getHours(date) >= 12 ? 'pm' : 'am';
    };
    const convertValueToMeridiem = (value, meridiem, ampm) => {
      if (ampm) {
        const currentMeridiem = value >= 12 ? 'pm' : 'am';
        if (currentMeridiem !== meridiem) {
          return meridiem === 'am' ? value - 12 : value + 12;
        }
      }
      return value;
    };
    const convertToMeridiem = (time, meridiem, ampm, utils) => {
      const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);
      return utils.setHours(time, newHoursAmount);
    };
    const getSecondsInDay = (date, utils) => {
      return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);
    };
    const createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation, utils) => (dateLeft, dateRight) => {
      if (disableIgnoringDatePartForTimeValidation) {
        return utils.isAfter(dateLeft, dateRight);
      }
      return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);
    };
    const resolveTimeFormat = (utils, {
      format,
      views,
      ampm
    }) => {
      if (format != null) {
        return format;
      }
      const formats = utils.formats;
      if (areViewsEqual(views, ['hours'])) {
        return ampm ? `${formats.hours12h} ${formats.meridiem}` : formats.hours24h;
      }
      if (areViewsEqual(views, ['minutes'])) {
        return formats.minutes;
      }
      if (areViewsEqual(views, ['seconds'])) {
        return formats.seconds;
      }
      if (areViewsEqual(views, ['minutes', 'seconds'])) {
        return `${formats.minutes}:${formats.seconds}`;
      }
      if (areViewsEqual(views, ['hours', 'minutes', 'seconds'])) {
        return ampm ? `${formats.hours12h}:${formats.minutes}:${formats.seconds} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}:${formats.seconds}`;
      }
      return ampm ? `${formats.hours12h}:${formats.minutes} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}`;
    };

    function useViews({
      onChange,
      onViewChange,
      openTo,
      view: inView,
      views,
      autoFocus,
      focusedView: inFocusedView,
      onFocusedViewChange
    }) {
      var _views, _views2;
      const previousOpenTo = React__namespace.useRef(openTo);
      const previousViews = React__namespace.useRef(views);
      const defaultView = React__namespace.useRef(views.includes(openTo) ? openTo : views[0]);
      const [view, setView] = useControlled({
        name: 'useViews',
        state: 'view',
        controlled: inView,
        default: defaultView.current
      });
      const defaultFocusedView = React__namespace.useRef(autoFocus ? view : null);
      const [focusedView, setFocusedView] = useControlled({
        name: 'useViews',
        state: 'focusedView',
        controlled: inFocusedView,
        default: defaultFocusedView.current
      });
      React__namespace.useEffect(() => {
        // Update the current view when `openTo` or `views` props change
        if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {
          setView(views.includes(openTo) ? openTo : views[0]);
          previousViews.current = views;
          previousOpenTo.current = openTo;
        }
      }, [openTo, setView, view, views]);
      const viewIndex = views.indexOf(view);
      const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;
      const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;
      const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {
        if (hasFocus) {
          // Focus event
          setFocusedView(viewToFocus);
        } else {
          // Blur event
          setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching
          );
        }

        onFocusedViewChange == null || onFocusedViewChange(viewToFocus, hasFocus);
      });
      const handleChangeView = useEventCallback(newView => {
        if (newView === view) {
          return;
        }
        setView(newView);
        handleFocusedViewChange(newView, true);
        if (onViewChange) {
          onViewChange(newView);
        }
      });
      const goToNextView = useEventCallback(() => {
        if (nextView) {
          handleChangeView(nextView);
        }
        handleFocusedViewChange(nextView, true);
      });
      const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState, selectedView) => {
        const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';
        const hasMoreViews = selectedView ?
        // handles case like `DateTimePicker`, where a view might return a `finish` selection state
        // but we it's not the final view given all `views` -> overall selection state should be `partial`.
        views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);
        const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;
        onChange(value, globalSelectionState);
        if (isSelectionFinishedOnCurrentView) {
          goToNextView();
        }
      });
      const setValueAndGoToView = useEventCallback((value, newView, selectedView) => {
        onChange(value, newView ? 'partial' : 'finish', selectedView);
        if (newView) {
          handleChangeView(newView);
          handleFocusedViewChange(newView, true);
        }
      });
      return {
        view,
        setView: handleChangeView,
        focusedView,
        setFocusedView: handleFocusedViewChange,
        nextView,
        previousView,
        defaultView: defaultView.current,
        goToNextView,
        setValueAndGoToNextView,
        setValueAndGoToView
      };
    }

    function useMeridiemMode(date, ampm, onChange, selectionState) {
      const utils = useUtils();
      const meridiemMode = getMeridiem(date, utils);
      const handleMeridiemChange = React__namespace.useCallback(mode => {
        const timeWithMeridiem = date == null ? null : convertToMeridiem(date, mode, Boolean(ampm), utils);
        onChange(timeWithMeridiem, selectionState != null ? selectionState : 'partial');
      }, [ampm, date, onChange, selectionState, utils]);
      return {
        meridiemMode,
        handleMeridiemChange
      };
    }

    const DIALOG_WIDTH = 320;
    const VIEW_HEIGHT = 334;
    const DIGITAL_CLOCK_VIEW_HEIGHT = 232;
    const MULTI_SECTION_CLOCK_SECTION_WIDTH = 48;

    const PickerViewRoot = styled$1('div')({
      overflow: 'hidden',
      width: DIALOG_WIDTH,
      maxHeight: VIEW_HEIGHT,
      display: 'flex',
      flexDirection: 'column',
      margin: '0 auto'
    });

    function getTimeClockUtilityClass(slot) {
      return generateUtilityClass('MuiTimeClock', slot);
    }
    generateUtilityClasses('MuiTimeClock', ['root', 'arrowSwitcher']);

    const CLOCK_WIDTH = 220;
    const CLOCK_HOUR_WIDTH = 36;
    const clockCenter = {
      x: CLOCK_WIDTH / 2,
      y: CLOCK_WIDTH / 2
    };
    const baseClockPoint = {
      x: clockCenter.x,
      y: 0
    };
    const cx = baseClockPoint.x - clockCenter.x;
    const cy = baseClockPoint.y - clockCenter.y;
    const rad2deg = rad => rad * (180 / Math.PI);
    const getAngleValue = (step, offsetX, offsetY) => {
      const x = offsetX - clockCenter.x;
      const y = offsetY - clockCenter.y;
      const atan = Math.atan2(cx, cy) - Math.atan2(x, y);
      let deg = rad2deg(atan);
      deg = Math.round(deg / step) * step;
      deg %= 360;
      const value = Math.floor(deg / step) || 0;
      const delta = x ** 2 + y ** 2;
      const distance = Math.sqrt(delta);
      return {
        value,
        distance
      };
    };
    const getMinutes$1 = (offsetX, offsetY, step = 1) => {
      const angleStep = step * 6;
      let {
        value
      } = getAngleValue(angleStep, offsetX, offsetY);
      value = value * step % 60;
      return value;
    };
    const getHours$1 = (offsetX, offsetY, ampm) => {
      const {
        value,
        distance
      } = getAngleValue(30, offsetX, offsetY);
      let hour = value || 12;
      if (!ampm) {
        if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {
          hour += 12;
          hour %= 24;
        }
      } else {
        hour %= 12;
      }
      return hour;
    };

    function getClockPointerUtilityClass(slot) {
      return generateUtilityClass('MuiClockPointer', slot);
    }
    generateUtilityClasses('MuiClockPointer', ['root', 'thumb']);

    const _excluded$Q = ["className", "hasSelected", "isInner", "type", "viewValue"];
    const useUtilityClasses$F = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        thumb: ['thumb']
      };
      return composeClasses(slots, getClockPointerUtilityClass, classes);
    };
    const ClockPointerRoot = styled$1('div', {
      name: 'MuiClockPointer',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      theme,
      ownerState
    }) => _extends({
      width: 2,
      backgroundColor: (theme.vars || theme).palette.primary.main,
      position: 'absolute',
      left: 'calc(50% - 1px)',
      bottom: '50%',
      transformOrigin: 'center bottom 0px'
    }, ownerState.shouldAnimate && {
      transition: theme.transitions.create(['transform', 'height'])
    }));
    const ClockPointerThumb = styled$1('div', {
      name: 'MuiClockPointer',
      slot: 'Thumb',
      overridesResolver: (_, styles) => styles.thumb
    })(({
      theme,
      ownerState
    }) => _extends({
      width: 4,
      height: 4,
      backgroundColor: (theme.vars || theme).palette.primary.contrastText,
      borderRadius: '50%',
      position: 'absolute',
      top: -21,
      left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,
      border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${(theme.vars || theme).palette.primary.main}`,
      boxSizing: 'content-box'
    }, ownerState.hasSelected && {
      backgroundColor: (theme.vars || theme).palette.primary.main
    }));

    /**
     * @ignore - internal component.
     */
    function ClockPointer(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiClockPointer'
      });
      const {
          className,
          isInner,
          type,
          viewValue
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$Q);
      const previousType = React__namespace.useRef(type);
      React__namespace.useEffect(() => {
        previousType.current = type;
      }, [type]);
      const ownerState = _extends({}, props, {
        shouldAnimate: previousType.current !== type
      });
      const classes = useUtilityClasses$F(ownerState);
      const getAngleStyle = () => {
        const max = type === 'hours' ? 12 : 60;
        let angle = 360 / max * viewValue;
        if (type === 'hours' && viewValue > 12) {
          angle -= 360; // round up angle to max 360 degrees
        }

        return {
          height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),
          transform: `rotateZ(${angle}deg)`
        };
      };
      return /*#__PURE__*/jsxRuntime_1(ClockPointerRoot, _extends({
        style: getAngleStyle(),
        className: clsx(className, classes.root),
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime_1(ClockPointerThumb, {
          ownerState: ownerState,
          className: classes.thumb
        })
      }));
    }

    function getClockUtilityClass(slot) {
      return generateUtilityClass('MuiClock', slot);
    }
    generateUtilityClasses('MuiClock', ['root', 'clock', 'wrapper', 'squareMask', 'pin', 'amButton', 'pmButton', 'meridiemText']);

    const replaceInvalidDateByNull = (utils, value) => value == null || !utils.isValid(value) ? null : value;
    const areDatesEqual = (utils, a, b) => {
      if (!utils.isValid(a) && a != null && !utils.isValid(b) && b != null) {
        return true;
      }
      return utils.isEqual(a, b);
    };
    const getMonthsInYear = (utils, year) => {
      const firstMonth = utils.startOfYear(year);
      const months = [firstMonth];
      while (months.length < 12) {
        const prevMonth = months[months.length - 1];
        months.push(utils.addMonths(prevMonth, 1));
      }
      return months;
    };
    const mergeDateAndTime = (utils, dateParam, timeParam) => {
      let mergedDate = dateParam;
      mergedDate = utils.setHours(mergedDate, utils.getHours(timeParam));
      mergedDate = utils.setMinutes(mergedDate, utils.getMinutes(timeParam));
      mergedDate = utils.setSeconds(mergedDate, utils.getSeconds(timeParam));
      return mergedDate;
    };
    const getTodayDate = (utils, timezone, valueType) => valueType === 'date' ? utils.startOfDay(utils.dateWithTimezone(undefined, timezone)) : utils.dateWithTimezone(undefined, timezone);
    const formatMeridiem = (utils, meridiem) => {
      const date = utils.setHours(utils.date(), meridiem === 'am' ? 2 : 14);
      return utils.format(date, 'meridiem');
    };

    const useUtilityClasses$E = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        clock: ['clock'],
        wrapper: ['wrapper'],
        squareMask: ['squareMask'],
        pin: ['pin'],
        amButton: ['amButton'],
        pmButton: ['pmButton'],
        meridiemText: ['meridiemText']
      };
      return composeClasses(slots, getClockUtilityClass, classes);
    };
    const ClockRoot = styled$1('div', {
      name: 'MuiClock',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      theme
    }) => ({
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      margin: theme.spacing(2)
    }));
    const ClockClock = styled$1('div', {
      name: 'MuiClock',
      slot: 'Clock',
      overridesResolver: (_, styles) => styles.clock
    })({
      backgroundColor: 'rgba(0,0,0,.07)',
      borderRadius: '50%',
      height: 220,
      width: 220,
      flexShrink: 0,
      position: 'relative',
      pointerEvents: 'none'
    });
    const ClockWrapper = styled$1('div', {
      name: 'MuiClock',
      slot: 'Wrapper',
      overridesResolver: (_, styles) => styles.wrapper
    })({
      '&:focus': {
        outline: 'none'
      }
    });
    const ClockSquareMask = styled$1('div', {
      name: 'MuiClock',
      slot: 'SquareMask',
      overridesResolver: (_, styles) => styles.squareMask
    })(({
      ownerState
    }) => _extends({
      width: '100%',
      height: '100%',
      position: 'absolute',
      pointerEvents: 'auto',
      outline: 0,
      // Disable scroll capabilities.
      touchAction: 'none',
      userSelect: 'none'
    }, ownerState.disabled ? {} : {
      '@media (pointer: fine)': {
        cursor: 'pointer',
        borderRadius: '50%'
      },
      '&:active': {
        cursor: 'move'
      }
    }));
    const ClockPin = styled$1('div', {
      name: 'MuiClock',
      slot: 'Pin',
      overridesResolver: (_, styles) => styles.pin
    })(({
      theme
    }) => ({
      width: 6,
      height: 6,
      borderRadius: '50%',
      backgroundColor: (theme.vars || theme).palette.primary.main,
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)'
    }));
    const ClockAmButton = styled$1(IconButton$1, {
      name: 'MuiClock',
      slot: 'AmButton',
      overridesResolver: (_, styles) => styles.amButton
    })(({
      theme,
      ownerState
    }) => _extends({
      zIndex: 1,
      position: 'absolute',
      bottom: 8,
      left: 8,
      paddingLeft: 4,
      paddingRight: 4,
      width: CLOCK_HOUR_WIDTH
    }, ownerState.meridiemMode === 'am' && {
      backgroundColor: (theme.vars || theme).palette.primary.main,
      color: (theme.vars || theme).palette.primary.contrastText,
      '&:hover': {
        backgroundColor: (theme.vars || theme).palette.primary.light
      }
    }));
    const ClockPmButton = styled$1(IconButton$1, {
      name: 'MuiClock',
      slot: 'PmButton',
      overridesResolver: (_, styles) => styles.pmButton
    })(({
      theme,
      ownerState
    }) => _extends({
      zIndex: 1,
      position: 'absolute',
      bottom: 8,
      right: 8,
      paddingLeft: 4,
      paddingRight: 4,
      width: CLOCK_HOUR_WIDTH
    }, ownerState.meridiemMode === 'pm' && {
      backgroundColor: (theme.vars || theme).palette.primary.main,
      color: (theme.vars || theme).palette.primary.contrastText,
      '&:hover': {
        backgroundColor: (theme.vars || theme).palette.primary.light
      }
    }));
    const ClockMeridiemText = styled$1(Typography$1, {
      name: 'MuiClock',
      slot: 'meridiemText',
      overridesResolver: (_, styles) => styles.meridiemText
    })({
      overflow: 'hidden',
      whiteSpace: 'nowrap',
      textOverflow: 'ellipsis'
    });

    /**
     * @ignore - internal component.
     */
    function Clock(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiClock'
      });
      const {
        ampm,
        ampmInClock,
        autoFocus,
        children,
        value,
        handleMeridiemChange,
        isTimeDisabled,
        meridiemMode,
        minutesStep = 1,
        onChange,
        selectedId,
        type,
        viewValue,
        disabled,
        readOnly,
        className
      } = props;
      const ownerState = props;
      const utils = useUtils();
      const localeText = useLocaleText();
      const isMoving = React__namespace.useRef(false);
      const classes = useUtilityClasses$E(ownerState);
      const isSelectedTimeDisabled = isTimeDisabled(viewValue, type);
      const isPointerInner = !ampm && type === 'hours' && (viewValue < 1 || viewValue > 12);
      const handleValueChange = (newValue, isFinish) => {
        if (disabled || readOnly) {
          return;
        }
        if (isTimeDisabled(newValue, type)) {
          return;
        }
        onChange(newValue, isFinish);
      };
      const setTime = (event, isFinish) => {
        let {
          offsetX,
          offsetY
        } = event;
        if (offsetX === undefined) {
          const rect = event.target.getBoundingClientRect();
          offsetX = event.changedTouches[0].clientX - rect.left;
          offsetY = event.changedTouches[0].clientY - rect.top;
        }
        const newSelectedValue = type === 'seconds' || type === 'minutes' ? getMinutes$1(offsetX, offsetY, minutesStep) : getHours$1(offsetX, offsetY, Boolean(ampm));
        handleValueChange(newSelectedValue, isFinish);
      };
      const handleTouchMove = event => {
        isMoving.current = true;
        setTime(event, 'shallow');
      };
      const handleTouchEnd = event => {
        if (isMoving.current) {
          setTime(event, 'finish');
          isMoving.current = false;
        }
      };
      const handleMouseMove = event => {
        // event.buttons & PRIMARY_MOUSE_BUTTON
        if (event.buttons > 0) {
          setTime(event.nativeEvent, 'shallow');
        }
      };
      const handleMouseUp = event => {
        if (isMoving.current) {
          isMoving.current = false;
        }
        setTime(event.nativeEvent, 'finish');
      };
      const hasSelected = React__namespace.useMemo(() => {
        if (type === 'hours') {
          return true;
        }
        return viewValue % 5 === 0;
      }, [type, viewValue]);
      const keyboardControlStep = type === 'minutes' ? minutesStep : 1;
      const listboxRef = React__namespace.useRef(null);
      // Since this is rendered when a Popper is opened we can't use passive effects.
      // Focusing in passive effects in Popper causes scroll jump.
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          // The ref not being resolved would be a bug in MUI.
          listboxRef.current.focus();
        }
      }, [autoFocus]);
      const handleKeyDown = event => {
        // TODO: Why this early exit?
        if (isMoving.current) {
          return;
        }
        switch (event.key) {
          case 'Home':
            // annulate both hours and minutes
            handleValueChange(0, 'partial');
            event.preventDefault();
            break;
          case 'End':
            handleValueChange(type === 'minutes' ? 59 : 23, 'partial');
            event.preventDefault();
            break;
          case 'ArrowUp':
            handleValueChange(viewValue + keyboardControlStep, 'partial');
            event.preventDefault();
            break;
          case 'ArrowDown':
            handleValueChange(viewValue - keyboardControlStep, 'partial');
            event.preventDefault();
            break;
          // do nothing
        }
      };

      return /*#__PURE__*/jsxRuntime_2(ClockRoot, {
        className: clsx(className, classes.root),
        children: [/*#__PURE__*/jsxRuntime_2(ClockClock, {
          className: classes.clock,
          children: [/*#__PURE__*/jsxRuntime_1(ClockSquareMask, {
            onTouchMove: handleTouchMove,
            onTouchEnd: handleTouchEnd,
            onMouseUp: handleMouseUp,
            onMouseMove: handleMouseMove,
            ownerState: {
              disabled
            },
            className: classes.squareMask
          }), !isSelectedTimeDisabled && /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
            children: [/*#__PURE__*/jsxRuntime_1(ClockPin, {
              className: classes.pin
            }), value != null && /*#__PURE__*/jsxRuntime_1(ClockPointer, {
              type: type,
              viewValue: viewValue,
              isInner: isPointerInner,
              hasSelected: hasSelected
            })]
          }), /*#__PURE__*/jsxRuntime_1(ClockWrapper, {
            "aria-activedescendant": selectedId,
            "aria-label": localeText.clockLabelText(type, value, utils),
            ref: listboxRef,
            role: "listbox",
            onKeyDown: handleKeyDown,
            tabIndex: 0,
            className: classes.wrapper,
            children: children
          })]
        }), ampm && ampmInClock && /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
          children: [/*#__PURE__*/jsxRuntime_1(ClockAmButton, {
            onClick: readOnly ? undefined : () => handleMeridiemChange('am'),
            disabled: disabled || meridiemMode === null,
            ownerState: ownerState,
            className: classes.amButton,
            title: formatMeridiem(utils, 'am'),
            children: /*#__PURE__*/jsxRuntime_1(ClockMeridiemText, {
              variant: "caption",
              className: classes.meridiemText,
              children: formatMeridiem(utils, 'am')
            })
          }), /*#__PURE__*/jsxRuntime_1(ClockPmButton, {
            disabled: disabled || meridiemMode === null,
            onClick: readOnly ? undefined : () => handleMeridiemChange('pm'),
            ownerState: ownerState,
            className: classes.pmButton,
            title: formatMeridiem(utils, 'pm'),
            children: /*#__PURE__*/jsxRuntime_1(ClockMeridiemText, {
              variant: "caption",
              className: classes.meridiemText,
              children: formatMeridiem(utils, 'pm')
            })
          })]
        })]
      });
    }

    function getClockNumberUtilityClass(slot) {
      return generateUtilityClass('MuiClockNumber', slot);
    }
    const clockNumberClasses = generateUtilityClasses('MuiClockNumber', ['root', 'selected', 'disabled']);

    const _excluded$P = ["className", "disabled", "index", "inner", "label", "selected"];
    const useUtilityClasses$D = ownerState => {
      const {
        classes,
        selected,
        disabled
      } = ownerState;
      const slots = {
        root: ['root', selected && 'selected', disabled && 'disabled']
      };
      return composeClasses(slots, getClockNumberUtilityClass, classes);
    };
    const ClockNumberRoot = styled$1('span', {
      name: 'MuiClockNumber',
      slot: 'Root',
      overridesResolver: (_, styles) => [styles.root, {
        [`&.${clockNumberClasses.disabled}`]: styles.disabled
      }, {
        [`&.${clockNumberClasses.selected}`]: styles.selected
      }]
    })(({
      theme,
      ownerState
    }) => _extends({
      height: CLOCK_HOUR_WIDTH,
      width: CLOCK_HOUR_WIDTH,
      position: 'absolute',
      left: `calc((100% - ${CLOCK_HOUR_WIDTH}px) / 2)`,
      display: 'inline-flex',
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: '50%',
      color: (theme.vars || theme).palette.text.primary,
      fontFamily: theme.typography.fontFamily,
      '&:focused': {
        backgroundColor: (theme.vars || theme).palette.background.paper
      },
      [`&.${clockNumberClasses.selected}`]: {
        color: (theme.vars || theme).palette.primary.contrastText
      },
      [`&.${clockNumberClasses.disabled}`]: {
        pointerEvents: 'none',
        color: (theme.vars || theme).palette.text.disabled
      }
    }, ownerState.inner && _extends({}, theme.typography.body2, {
      color: (theme.vars || theme).palette.text.secondary
    })));

    /**
     * @ignore - internal component.
     */
    function ClockNumber(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiClockNumber'
      });
      const {
          className,
          disabled,
          index,
          inner,
          label,
          selected
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$P);
      const ownerState = props;
      const classes = useUtilityClasses$D(ownerState);
      const angle = index % 12 / 12 * Math.PI * 2 - Math.PI / 2;
      const length = (CLOCK_WIDTH - CLOCK_HOUR_WIDTH - 2) / 2 * (inner ? 0.65 : 1);
      const x = Math.round(Math.cos(angle) * length);
      const y = Math.round(Math.sin(angle) * length);
      return /*#__PURE__*/jsxRuntime_1(ClockNumberRoot, _extends({
        className: clsx(className, classes.root),
        "aria-disabled": disabled ? true : undefined,
        "aria-selected": selected ? true : undefined,
        role: "option",
        style: {
          transform: `translate(${x}px, ${y + (CLOCK_WIDTH - CLOCK_HOUR_WIDTH) / 2}px`
        },
        ownerState: ownerState
      }, other, {
        children: label
      }));
    }

    /**
     * @ignore - internal component.
     */
    const getHourNumbers = ({
      ampm,
      value,
      getClockNumberText,
      isDisabled,
      selectedId,
      utils
    }) => {
      const currentHours = value ? utils.getHours(value) : null;
      const hourNumbers = [];
      const startHour = ampm ? 1 : 0;
      const endHour = ampm ? 12 : 23;
      const isSelected = hour => {
        if (currentHours === null) {
          return false;
        }
        if (ampm) {
          if (hour === 12) {
            return currentHours === 12 || currentHours === 0;
          }
          return currentHours === hour || currentHours - 12 === hour;
        }
        return currentHours === hour;
      };
      for (let hour = startHour; hour <= endHour; hour += 1) {
        let label = hour.toString();
        if (hour === 0) {
          label = '00';
        }
        const inner = !ampm && (hour === 0 || hour > 12);
        label = utils.formatNumber(label);
        const selected = isSelected(hour);
        hourNumbers.push( /*#__PURE__*/jsxRuntime_1(ClockNumber, {
          id: selected ? selectedId : undefined,
          index: hour,
          inner: inner,
          selected: selected,
          disabled: isDisabled(hour),
          label: label,
          "aria-label": getClockNumberText(label)
        }, hour));
      }
      return hourNumbers;
    };
    const getMinutesNumbers = ({
      utils,
      value,
      isDisabled,
      getClockNumberText,
      selectedId
    }) => {
      const f = utils.formatNumber;
      return [[5, f('05')], [10, f('10')], [15, f('15')], [20, f('20')], [25, f('25')], [30, f('30')], [35, f('35')], [40, f('40')], [45, f('45')], [50, f('50')], [55, f('55')], [0, f('00')]].map(([numberValue, label], index) => {
        const selected = numberValue === value;
        return /*#__PURE__*/jsxRuntime_1(ClockNumber, {
          label: label,
          id: selected ? selectedId : undefined,
          index: index + 1,
          inner: false,
          disabled: isDisabled(numberValue),
          selected: selected,
          "aria-label": getClockNumberText(label)
        }, numberValue);
      });
    };

    /**
     * Hooks making sure that:
     * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined
     * - The value rendered is always the one from `props.timezone` if defined
     */
    const useValueWithTimezone = ({
      timezone: timezoneProp,
      value: valueProp,
      defaultValue,
      onChange,
      valueManager
    }) => {
      var _ref, _ref2;
      const utils = useUtils();
      const firstDefaultValue = React__namespace.useRef(defaultValue);
      const inputValue = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;
      const inputTimezone = React__namespace.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);
      const setInputTimezone = useEventCallback(newValue => {
        if (inputTimezone == null) {
          return newValue;
        }
        return valueManager.setTimezone(utils, inputTimezone, newValue);
      });
      const timezoneToRender = (_ref2 = timezoneProp != null ? timezoneProp : inputTimezone) != null ? _ref2 : 'default';
      const valueWithTimezoneToRender = React__namespace.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);
      const handleValueChange = useEventCallback((newValue, ...otherParams) => {
        const newValueWithInputTimezone = setInputTimezone(newValue);
        onChange == null || onChange(newValueWithInputTimezone, ...otherParams);
      });
      return {
        value: valueWithTimezoneToRender,
        handleValueChange,
        timezone: timezoneToRender
      };
    };

    /**
     * Wrapper around `useControlled` and `useValueWithTimezone`
     */
    const useControlledValueWithTimezone = ({
      name,
      timezone: timezoneProp,
      value: valueProp,
      defaultValue,
      onChange: onChangeProp,
      valueManager
    }) => {
      const [valueWithInputTimezone, setValue] = useControlled({
        name,
        state: 'value',
        controlled: valueProp,
        default: defaultValue != null ? defaultValue : valueManager.emptyValue
      });
      const onChange = useEventCallback((newValue, ...otherParams) => {
        setValue(newValue);
        onChangeProp == null || onChangeProp(newValue, ...otherParams);
      });
      return useValueWithTimezone({
        timezone: timezoneProp,
        value: valueWithInputTimezone,
        defaultValue: undefined,
        onChange,
        valueManager
      });
    };

    const SECTION_TYPE_GRANULARITY = {
      year: 1,
      month: 2,
      day: 3,
      hours: 4,
      minutes: 5,
      seconds: 6,
      milliseconds: 7
    };
    const getSectionTypeGranularity = sections => Math.max(...sections.map(section => {
      var _SECTION_TYPE_GRANULA;
      return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;
    }));
    const roundDate = (utils, granularity, date) => {
      if (granularity === SECTION_TYPE_GRANULARITY.year) {
        return utils.startOfYear(date);
      }
      if (granularity === SECTION_TYPE_GRANULARITY.month) {
        return utils.startOfMonth(date);
      }
      if (granularity === SECTION_TYPE_GRANULARITY.day) {
        return utils.startOfDay(date);
      }

      // We don't have startOfHour / startOfMinute / startOfSecond
      let roundedDate = date;
      if (granularity < SECTION_TYPE_GRANULARITY.minutes) {
        roundedDate = utils.setMinutes(roundedDate, 0);
      }
      if (granularity < SECTION_TYPE_GRANULARITY.seconds) {
        roundedDate = utils.setSeconds(roundedDate, 0);
      }
      if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {
        roundedDate = utils.setMilliseconds(roundedDate, 0);
      }
      return roundedDate;
    };
    const getDefaultReferenceDate = ({
      props,
      utils,
      granularity,
      timezone,
      getTodayDate: inGetTodayDate
    }) => {
      var _props$disableIgnorin;
      let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));
      if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {
        referenceDate = roundDate(utils, granularity, props.minDate);
      }
      if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {
        referenceDate = roundDate(utils, granularity, props.maxDate);
      }
      const isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);
      if (props.minTime != null && isAfter(props.minTime, referenceDate)) {
        referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));
      }
      if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {
        referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));
      }
      return referenceDate;
    };

    const getDateSectionConfigFromFormatToken = (utils, formatToken) => {
      const config = utils.formatTokenMap[formatToken];
      if (config == null) {
        throw new Error([`MUI: The token "${formatToken}" is not supported by the Date and Time Pickers.`, 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\n'));
      }
      if (typeof config === 'string') {
        return {
          type: config,
          contentType: config === 'meridiem' ? 'letter' : 'digit',
          maxLength: undefined
        };
      }
      return {
        type: config.sectionType,
        contentType: config.contentType,
        maxLength: config.maxLength
      };
    };
    const getDeltaFromKeyCode = keyCode => {
      switch (keyCode) {
        case 'ArrowUp':
          return 1;
        case 'ArrowDown':
          return -1;
        case 'PageUp':
          return 5;
        case 'PageDown':
          return -5;
        default:
          return 0;
      }
    };
    const getDaysInWeekStr = (utils, timezone, format) => {
      const elements = [];
      const now = utils.dateWithTimezone(undefined, timezone);
      const startDate = utils.startOfWeek(now);
      const endDate = utils.endOfWeek(now);
      let current = startDate;
      while (utils.isBefore(current, endDate)) {
        elements.push(current);
        current = utils.addDays(current, 1);
      }
      return elements.map(weekDay => utils.formatByString(weekDay, format));
    };
    const getLetterEditingOptions = (utils, timezone, sectionType, format) => {
      switch (sectionType) {
        case 'month':
          {
            return getMonthsInYear(utils, utils.dateWithTimezone(undefined, timezone)).map(month => utils.formatByString(month, format));
          }
        case 'weekDay':
          {
            return getDaysInWeekStr(utils, timezone, format);
          }
        case 'meridiem':
          {
            const now = utils.dateWithTimezone(undefined, timezone);
            return [utils.startOfDay(now), utils.endOfDay(now)].map(date => utils.formatByString(date, format));
          }
        default:
          {
            return [];
          }
      }
    };
    const cleanLeadingZeros = (utils, valueStr, size) => {
      let cleanValueStr = valueStr;

      // Remove the leading zeros
      cleanValueStr = Number(cleanValueStr).toString();

      // Add enough leading zeros to fill the section
      while (cleanValueStr.length < size) {
        cleanValueStr = `0${cleanValueStr}`;
      }
      return cleanValueStr;
    };
    const cleanDigitSectionValue = (utils, timezone, value, sectionBoundaries, section) => {
      if (section.type === 'day' && section.contentType === 'digit-with-letter') {
        const date = utils.setDate(sectionBoundaries.longestMonth, value);
        return utils.formatByString(date, section.format);
      }

      // queryValue without leading `0` (`01` => `1`)
      const valueStr = value.toString();
      if (section.hasLeadingZerosInInput) {
        return cleanLeadingZeros(utils, valueStr, section.maxLength);
      }
      return valueStr;
    };
    const adjustSectionValue = (utils, timezone, section, keyCode, sectionsValueBoundaries, activeDate, stepsAttributes) => {
      const delta = getDeltaFromKeyCode(keyCode);
      const isStart = keyCode === 'Home';
      const isEnd = keyCode === 'End';
      const shouldSetAbsolute = section.value === '' || isStart || isEnd;
      const adjustDigitSection = () => {
        const sectionBoundaries = sectionsValueBoundaries[section.type]({
          currentDate: activeDate,
          format: section.format,
          contentType: section.contentType
        });
        const getCleanValue = value => cleanDigitSectionValue(utils, timezone, value, sectionBoundaries, section);
        const step = section.type === 'minutes' && stepsAttributes != null && stepsAttributes.minutesStep ? stepsAttributes.minutesStep : 1;
        const currentSectionValue = parseInt(section.value, 10);
        let newSectionValueNumber = currentSectionValue + delta * step;
        if (shouldSetAbsolute) {
          if (section.type === 'year' && !isEnd && !isStart) {
            return utils.formatByString(utils.dateWithTimezone(undefined, timezone), section.format);
          }
          if (delta > 0 || isStart) {
            newSectionValueNumber = sectionBoundaries.minimum;
          } else {
            newSectionValueNumber = sectionBoundaries.maximum;
          }
        }
        if (newSectionValueNumber % step !== 0) {
          if (delta < 0 || isStart) {
            newSectionValueNumber += step - (step + newSectionValueNumber) % step; // for JS -3 % 5 = -3 (should be 2)
          }

          if (delta > 0 || isEnd) {
            newSectionValueNumber -= newSectionValueNumber % step;
          }
        }
        if (newSectionValueNumber > sectionBoundaries.maximum) {
          return getCleanValue(sectionBoundaries.minimum + (newSectionValueNumber - sectionBoundaries.maximum - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
        }
        if (newSectionValueNumber < sectionBoundaries.minimum) {
          return getCleanValue(sectionBoundaries.maximum - (sectionBoundaries.minimum - newSectionValueNumber - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
        }
        return getCleanValue(newSectionValueNumber);
      };
      const adjustLetterSection = () => {
        const options = getLetterEditingOptions(utils, timezone, section.type, section.format);
        if (options.length === 0) {
          return section.value;
        }
        if (shouldSetAbsolute) {
          if (delta > 0 || isStart) {
            return options[0];
          }
          return options[options.length - 1];
        }
        const currentOptionIndex = options.indexOf(section.value);
        const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;
        return options[newOptionIndex];
      };
      if (section.contentType === 'digit' || section.contentType === 'digit-with-letter') {
        return adjustDigitSection();
      }
      return adjustLetterSection();
    };
    const getSectionVisibleValue = (section, target) => {
      let value = section.value || section.placeholder;
      const hasLeadingZeros = target === 'non-input' ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;
      if (target === 'non-input' && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {
        value = Number(value).toString();
      }

      // In the input, we add an empty character at the end of each section without leading zeros.
      // This makes sure that `onChange` will always be fired.
      // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),
      // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,
      // So the browser will not fire the input `onChange`.
      const shouldAddInvisibleSpace = ['input-rtl', 'input-ltr'].includes(target) && section.contentType === 'digit' && !hasLeadingZeros && value.length === 1;
      if (shouldAddInvisibleSpace) {
        value = `${value}\u200e`;
      }
      if (target === 'input-rtl') {
        value = `\u2068${value}\u2069`;
      }
      return value;
    };
    const cleanString = dirtyString => dirtyString.replace(/[\u2066\u2067\u2068\u2069]/g, '');
    const addPositionPropertiesToSections = (sections, isRTL) => {
      let position = 0;
      let positionInInput = isRTL ? 1 : 0;
      const newSections = [];
      for (let i = 0; i < sections.length; i += 1) {
        const section = sections[i];
        const renderedValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');
        const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;
        const sectionLength = cleanString(sectionStr).length;
        const sectionLengthInInput = sectionStr.length;

        // The ...InInput values consider the unicode characters but do include them in their indexes
        const cleanedValue = cleanString(renderedValue);
        const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;
        const endInInput = startInInput + cleanedValue.length;
        newSections.push(_extends({}, section, {
          start: position,
          end: position + sectionLength,
          startInInput,
          endInInput
        }));
        position += sectionLength;
        // Move position to the end of string associated to the current section
        positionInInput += sectionLengthInInput;
      }
      return newSections;
    };
    const getSectionPlaceholder = (utils, timezone, localeText, sectionConfig, currentTokenValue) => {
      switch (sectionConfig.type) {
        case 'year':
          {
            return localeText.fieldYearPlaceholder({
              digitAmount: utils.formatByString(utils.dateWithTimezone(undefined, timezone), currentTokenValue).length
            });
          }
        case 'month':
          {
            return localeText.fieldMonthPlaceholder({
              contentType: sectionConfig.contentType
            });
          }
        case 'day':
          {
            return localeText.fieldDayPlaceholder();
          }
        case 'weekDay':
          {
            return localeText.fieldWeekDayPlaceholder({
              contentType: sectionConfig.contentType
            });
          }
        case 'hours':
          {
            return localeText.fieldHoursPlaceholder();
          }
        case 'minutes':
          {
            return localeText.fieldMinutesPlaceholder();
          }
        case 'seconds':
          {
            return localeText.fieldSecondsPlaceholder();
          }
        case 'meridiem':
          {
            return localeText.fieldMeridiemPlaceholder();
          }
        default:
          {
            return currentTokenValue;
          }
      }
    };
    const changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {
      return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);
    };
    const isFourDigitYearFormat = (utils, timezone, format) => utils.formatByString(utils.dateWithTimezone(undefined, timezone), format).length === 4;
    const doesSectionFormatHaveLeadingZeros = (utils, timezone, contentType, sectionType, format) => {
      if (contentType !== 'digit') {
        return false;
      }
      const now = utils.dateWithTimezone(undefined, timezone);
      switch (sectionType) {
        // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.
        case 'year':
          {
            if (isFourDigitYearFormat(utils, timezone, format)) {
              const formatted0001 = utils.formatByString(utils.setYear(now, 1), format);
              return formatted0001 === '0001';
            }
            const formatted2001 = utils.formatByString(utils.setYear(now, 2001), format);
            return formatted2001 === '01';
          }
        case 'month':
          {
            return utils.formatByString(utils.startOfYear(now), format).length > 1;
          }
        case 'day':
          {
            return utils.formatByString(utils.startOfMonth(now), format).length > 1;
          }
        case 'weekDay':
          {
            return utils.formatByString(utils.startOfWeek(now), format).length > 1;
          }
        case 'hours':
          {
            return utils.formatByString(utils.setHours(now, 1), format).length > 1;
          }
        case 'minutes':
          {
            return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;
          }
        case 'seconds':
          {
            return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;
          }
        default:
          {
            throw new Error('Invalid section type');
          }
      }
    };
    const getEscapedPartsFromFormat = (utils, format) => {
      const escapedParts = [];
      const {
        start: startChar,
        end: endChar
      } = utils.escapedCharacters;
      const regExp = new RegExp(`(\\${startChar}[^\\${endChar}]*\\${endChar})+`, 'g');
      let match = null;
      // eslint-disable-next-line no-cond-assign
      while (match = regExp.exec(format)) {
        escapedParts.push({
          start: match.index,
          end: regExp.lastIndex - 1
        });
      }
      return escapedParts;
    };
    const splitFormatIntoSections = (utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL) => {
      let startSeparator = '';
      const sections = [];
      const now = utils.date();
      const commitToken = token => {
        if (token === '') {
          return null;
        }
        const sectionConfig = getDateSectionConfigFromFormatToken(utils, token);
        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, sectionConfig.contentType, sectionConfig.type, token);
        const hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === 'digit';
        const isValidDate = date != null && utils.isValid(date);
        let sectionValue = isValidDate ? utils.formatByString(date, token) : '';
        let maxLength = null;
        if (hasLeadingZerosInInput) {
          if (hasLeadingZerosInFormat) {
            maxLength = sectionValue === '' ? utils.formatByString(now, token).length : sectionValue.length;
          } else {
            if (sectionConfig.maxLength == null) {
              throw new Error(`MUI: The token ${token} should have a 'maxDigitNumber' property on it's adapter`);
            }
            maxLength = sectionConfig.maxLength;
            if (isValidDate) {
              sectionValue = cleanLeadingZeros(utils, sectionValue, maxLength);
            }
          }
        }
        sections.push(_extends({}, sectionConfig, {
          format: token,
          maxLength,
          value: sectionValue,
          placeholder: getSectionPlaceholder(utils, timezone, localeText, sectionConfig, token),
          hasLeadingZeros: hasLeadingZerosInFormat,
          hasLeadingZerosInFormat,
          hasLeadingZerosInInput,
          startSeparator: sections.length === 0 ? startSeparator : '',
          endSeparator: '',
          modified: false
        }));
        return null;
      };

      // Expand the provided format
      let formatExpansionOverflow = 10;
      let prevFormat = format;
      let nextFormat = utils.expandFormat(format);
      while (nextFormat !== prevFormat) {
        prevFormat = nextFormat;
        nextFormat = utils.expandFormat(prevFormat);
        formatExpansionOverflow -= 1;
        if (formatExpansionOverflow < 0) {
          throw new Error('MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component');
        }
      }
      const expandedFormat = nextFormat;

      // Get start/end indexes of escaped sections
      const escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);

      // This RegExp test if the beginning of a string correspond to a supported token
      const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils.formatTokenMap).sort((a, b) => b.length - a.length) // Sort to put longest word first
  .join('|')})`, 'g') // used to get access to lastIndex state
      ;

      let currentTokenValue = '';
      for (let i = 0; i < expandedFormat.length; i += 1) {
        const escapedPartOfCurrentChar = escapedParts.find(escapeIndex => escapeIndex.start <= i && escapeIndex.end >= i);
        const char = expandedFormat[i];
        const isEscapedChar = escapedPartOfCurrentChar != null;
        const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;
        const regExpMatch = isTokenStartRegExp.test(potentialToken);
        if (!isEscapedChar && char.match(/([A-Za-z]+)/) && regExpMatch) {
          currentTokenValue = potentialToken.slice(0, isTokenStartRegExp.lastIndex);
          i += isTokenStartRegExp.lastIndex - 1;
        } else {
          // If we are on the opening or closing character of an escaped part of the format,
          // Then we ignore this character.
          const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;
          if (!isEscapeBoundary) {
            commitToken(currentTokenValue);
            currentTokenValue = '';
            if (sections.length === 0) {
              startSeparator += char;
            } else {
              sections[sections.length - 1].endSeparator += char;
            }
          }
        }
      }
      commitToken(currentTokenValue);
      return sections.map(section => {
        const cleanSeparator = separator => {
          let cleanedSeparator = separator;
          if (isRTL && cleanedSeparator !== null && cleanedSeparator.includes(' ')) {
            cleanedSeparator = `\u2069${cleanedSeparator}\u2066`;
          }
          if (formatDensity === 'spacious' && ['/', '.', '-'].includes(cleanedSeparator)) {
            cleanedSeparator = ` ${cleanedSeparator} `;
          }
          return cleanedSeparator;
        };
        section.startSeparator = cleanSeparator(section.startSeparator);
        section.endSeparator = cleanSeparator(section.endSeparator);
        return section;
      });
    };

    /**
     * Some date libraries like `dayjs` don't support parsing from date with escaped characters.
     * To make sure that the parsing works, we are building a format and a date without any separator.
     */
    const getDateFromDateSections = (utils, sections) => {
      // If we have both a day and a weekDay section,
      // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.
      // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.
      const shouldSkipWeekDays = sections.some(section => section.type === 'day');
      const sectionFormats = [];
      const sectionValues = [];
      for (let i = 0; i < sections.length; i += 1) {
        const section = sections[i];
        const shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';
        if (!shouldSkip) {
          sectionFormats.push(section.format);
          sectionValues.push(getSectionVisibleValue(section, 'non-input'));
        }
      }
      const formatWithoutSeparator = sectionFormats.join(' ');
      const dateWithoutSeparatorStr = sectionValues.join(' ');
      return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);
    };
    const createDateStrForInputFromSections = (sections, isRTL) => {
      const formattedSections = sections.map(section => {
        const dateValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');
        return `${section.startSeparator}${dateValue}${section.endSeparator}`;
      });
      const dateStr = formattedSections.join('');
      if (!isRTL) {
        return dateStr;
      }

      // \u2066: start left-to-right isolation
      // \u2067: start right-to-left isolation
      // \u2068: start first strong character isolation
      // \u2069: pop isolation
      // wrap into an isolated group such that separators can split the string in smaller ones by adding \u2069\u2068
      return `\u2066${dateStr}\u2069`;
    };
    const getSectionsBoundaries = (utils, timezone) => {
      const today = utils.dateWithTimezone(undefined, timezone);
      const endOfYear = utils.endOfYear(today);
      const endOfDay = utils.endOfDay(today);
      const {
        maxDaysInMonth,
        longestMonth
      } = getMonthsInYear(utils, today).reduce((acc, month) => {
        const daysInMonth = utils.getDaysInMonth(month);
        if (daysInMonth > acc.maxDaysInMonth) {
          return {
            maxDaysInMonth: daysInMonth,
            longestMonth: month
          };
        }
        return acc;
      }, {
        maxDaysInMonth: 0,
        longestMonth: null
      });
      return {
        year: ({
          format
        }) => ({
          minimum: 0,
          maximum: isFourDigitYearFormat(utils, timezone, format) ? 9999 : 99
        }),
        month: () => ({
          minimum: 1,
          // Assumption: All years have the same amount of months
          maximum: utils.getMonth(endOfYear) + 1
        }),
        day: ({
          currentDate
        }) => ({
          minimum: 1,
          maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,
          longestMonth: longestMonth
        }),
        weekDay: ({
          format,
          contentType
        }) => {
          if (contentType === 'digit') {
            const daysInWeek = getDaysInWeekStr(utils, timezone, format).map(Number);
            return {
              minimum: Math.min(...daysInWeek),
              maximum: Math.max(...daysInWeek)
            };
          }
          return {
            minimum: 1,
            maximum: 7
          };
        },
        hours: ({
          format
        }) => {
          const lastHourInDay = utils.getHours(endOfDay);
          const hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();
          if (hasMeridiem) {
            return {
              minimum: 1,
              maximum: Number(utils.formatByString(utils.startOfDay(today), format))
            };
          }
          return {
            minimum: 0,
            maximum: lastHourInDay
          };
        },
        minutes: () => ({
          minimum: 0,
          // Assumption: All years have the same amount of minutes
          maximum: utils.getMinutes(endOfDay)
        }),
        seconds: () => ({
          minimum: 0,
          // Assumption: All years have the same amount of seconds
          maximum: utils.getSeconds(endOfDay)
        }),
        meridiem: () => ({
          minimum: 0,
          maximum: 0
        })
      };
    };
    const transferDateSectionValue = (utils, timezone, section, dateToTransferFrom, dateToTransferTo) => {
      switch (section.type) {
        case 'year':
          {
            return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));
          }
        case 'month':
          {
            return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));
          }
        case 'weekDay':
          {
            const formattedDaysInWeek = getDaysInWeekStr(utils, timezone, section.format);
            const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);
            const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);
            const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);
            const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;
            return utils.addDays(dateToTransferFrom, diff);
          }
        case 'day':
          {
            return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));
          }
        case 'meridiem':
          {
            const isAM = utils.getHours(dateToTransferFrom) < 12;
            const mergedDateHours = utils.getHours(dateToTransferTo);
            if (isAM && mergedDateHours >= 12) {
              return utils.addHours(dateToTransferTo, -12);
            }
            if (!isAM && mergedDateHours < 12) {
              return utils.addHours(dateToTransferTo, 12);
            }
            return dateToTransferTo;
          }
        case 'hours':
          {
            return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));
          }
        case 'minutes':
          {
            return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));
          }
        case 'seconds':
          {
            return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));
          }
        default:
          {
            return dateToTransferTo;
          }
      }
    };
    const reliableSectionModificationOrder = {
      year: 1,
      month: 2,
      day: 3,
      weekDay: 4,
      hours: 5,
      minutes: 6,
      seconds: 7,
      meridiem: 8
    };
    const mergeDateIntoReferenceDate = (utils, timezone, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) =>
    // cloning sections before sort to avoid mutating it
    [...sections].sort((a, b) => reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b.type]).reduce((mergedDate, section) => {
      if (!shouldLimitToEditedSections || section.modified) {
        return transferDateSectionValue(utils, timezone, section, dateToTransferFrom, mergedDate);
      }
      return mergedDate;
    }, referenceDate);
    const isAndroid = () => navigator.userAgent.toLowerCase().indexOf('android') > -1;
    const getSectionOrder = (sections, isRTL) => {
      const neighbors = {};
      if (!isRTL) {
        sections.forEach((_, index) => {
          const leftIndex = index === 0 ? null : index - 1;
          const rightIndex = index === sections.length - 1 ? null : index + 1;
          neighbors[index] = {
            leftIndex,
            rightIndex
          };
        });
        return {
          neighbors,
          startIndex: 0,
          endIndex: sections.length - 1
        };
      }
      const rtl2ltr = {};
      const ltr2rtl = {};
      let groupedSectionsStart = 0;
      let groupedSectionsEnd = 0;
      let RTLIndex = sections.length - 1;
      while (RTLIndex >= 0) {
        groupedSectionsEnd = sections.findIndex(
        // eslint-disable-next-line @typescript-eslint/no-loop-func
        (section, index) => {
          var _section$endSeparator;
          return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' ')) &&
          // Special case where the spaces were not there in the initial input
          section.endSeparator !== ' / ';
        });
        if (groupedSectionsEnd === -1) {
          groupedSectionsEnd = sections.length - 1;
        }
        for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {
          ltr2rtl[i] = RTLIndex;
          rtl2ltr[RTLIndex] = i;
          RTLIndex -= 1;
        }
        groupedSectionsStart = groupedSectionsEnd + 1;
      }
      sections.forEach((_, index) => {
        const rtlIndex = ltr2rtl[index];
        const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];
        const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];
        neighbors[index] = {
          leftIndex,
          rightIndex
        };
      });
      return {
        neighbors,
        startIndex: rtl2ltr[0],
        endIndex: rtl2ltr[sections.length - 1]
      };
    };

    const _excluded$O = ["value", "referenceDate"];
    const singleItemValueManager = {
      emptyValue: null,
      getTodayValue: getTodayDate,
      getInitialReferenceValue: _ref => {
        let {
            value,
            referenceDate
          } = _ref,
          params = _objectWithoutPropertiesLoose(_ref, _excluded$O);
        if (value != null && params.utils.isValid(value)) {
          return value;
        }
        if (referenceDate != null) {
          return referenceDate;
        }
        return getDefaultReferenceDate(params);
      },
      cleanValue: replaceInvalidDateByNull,
      areValuesEqual: areDatesEqual,
      isSameError: (a, b) => a === b,
      hasError: error => error != null,
      defaultErrorState: null,
      getTimezone: (utils, value) => value == null || !utils.isValid(value) ? null : utils.getTimezone(value),
      setTimezone: (utils, timezone, value) => value == null ? null : utils.setTimezone(value, timezone)
    };
    const singleItemFieldValueManager = {
      updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,
      getSectionsFromValue: (utils, date, prevSections, isRTL, getSectionsFromDate) => {
        const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;
        if (shouldReUsePrevDateSections) {
          return prevSections;
        }
        return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);
      },
      getValueStrFromSections: createDateStrForInputFromSections,
      getActiveDateManager: (utils, state) => ({
        date: state.value,
        referenceDate: state.referenceValue,
        getSections: sections => sections,
        getNewValuesFromNewActiveDate: newActiveDate => ({
          value: newActiveDate,
          referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate
        })
      }),
      parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)
    };

    // TODO v7: This file exist only to simplify typing between
    // components/componentsProps and slots/slotProps
    // Should be deleted when components/componentsProps are removed

    const uncapitalizeObjectKeys = capitalizedObject => {
      if (capitalizedObject === undefined) {
        return undefined;
      }
      return Object.keys(capitalizedObject).reduce((acc, key) => _extends({}, acc, {
        [`${key.slice(0, 1).toLowerCase()}${key.slice(1)}`]: capitalizedObject[key]
      }), {});
    };

    const useClockReferenceDate = ({
      value,
      referenceDate: referenceDateProp,
      utils,
      props,
      timezone
    }) => {
      const referenceDate = React__namespace.useMemo(() => singleItemValueManager.getInitialReferenceValue({
        value,
        utils,
        props,
        referenceDate: referenceDateProp,
        granularity: SECTION_TYPE_GRANULARITY.day,
        timezone,
        getTodayDate: () => getTodayDate(utils, timezone, 'date')
      }),
      // We only want to compute the reference date on mount.
      [] // eslint-disable-line react-hooks/exhaustive-deps
      );

      return value != null ? value : referenceDate;
    };

    const _excluded$N = ["ampm", "ampmInClock", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "showViewSwitcher", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "timezone"];
    const useUtilityClasses$C = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        arrowSwitcher: ['arrowSwitcher']
      };
      return composeClasses(slots, getTimeClockUtilityClass, classes);
    };
    const TimeClockRoot = styled$1(PickerViewRoot, {
      name: 'MuiTimeClock',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      display: 'flex',
      flexDirection: 'column',
      position: 'relative'
    });
    const TimeClockArrowSwitcher = styled$1(PickersArrowSwitcher, {
      name: 'MuiTimeClock',
      slot: 'ArrowSwitcher',
      overridesResolver: (props, styles) => styles.arrowSwitcher
    })({
      position: 'absolute',
      right: 12,
      top: 15
    });
    const TIME_CLOCK_DEFAULT_VIEWS = ['hours', 'minutes'];

    /**
     *
     * API:
     *
     * - [TimeClock API](https://mui.com/x/api/date-pickers/time-clock/)
     */
    const TimeClock = /*#__PURE__*/React__namespace.forwardRef(function TimeClock(inProps, ref) {
      const utils = useUtils();
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTimeClock'
      });
      const {
          ampm = utils.is12HourCycleInCurrentLocale(),
          ampmInClock = false,
          autoFocus,
          components,
          componentsProps,
          slots: innerSlots,
          slotProps: innerSlotProps,
          value: valueProp,
          defaultValue,
          referenceDate: referenceDateProp,
          disableIgnoringDatePartForTimeValidation = false,
          maxTime,
          minTime,
          disableFuture,
          disablePast,
          minutesStep = 1,
          shouldDisableClock,
          shouldDisableTime,
          showViewSwitcher,
          onChange,
          view: inView,
          views = TIME_CLOCK_DEFAULT_VIEWS,
          openTo,
          onViewChange,
          focusedView,
          onFocusedViewChange,
          className,
          disabled,
          readOnly,
          timezone: timezoneProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$N);
      const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
      const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
      const {
        value,
        handleValueChange,
        timezone
      } = useControlledValueWithTimezone({
        name: 'TimeClock',
        timezone: timezoneProp,
        value: valueProp,
        defaultValue,
        onChange,
        valueManager: singleItemValueManager
      });
      const valueOrReferenceDate = useClockReferenceDate({
        value,
        referenceDate: referenceDateProp,
        utils,
        props,
        timezone
      });
      const localeText = useLocaleText();
      const now = useNow(timezone);
      const {
        view,
        setView,
        previousView,
        nextView,
        setValueAndGoToNextView
      } = useViews({
        view: inView,
        views,
        openTo,
        onViewChange,
        onChange: handleValueChange,
        focusedView,
        onFocusedViewChange
      });
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(valueOrReferenceDate, ampm, setValueAndGoToNextView);
      const isTimeDisabled = React__namespace.useCallback((rawValue, viewType) => {
        const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
        const shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');
        const containsValidTime = ({
          start,
          end
        }) => {
          if (minTime && isAfter(minTime, end)) {
            return false;
          }
          if (maxTime && isAfter(start, maxTime)) {
            return false;
          }
          if (disableFuture && isAfter(start, now)) {
            return false;
          }
          if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {
            return false;
          }
          return true;
        };
        const isValidValue = (timeValue, step = 1) => {
          if (timeValue % step !== 0) {
            return false;
          }
          if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
            return false;
          }
          if (shouldDisableTime) {
            switch (viewType) {
              case 'hours':
                return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), 'hours');
              case 'minutes':
                return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), 'minutes');
              case 'seconds':
                return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), 'seconds');
              default:
                return false;
            }
          }
          return true;
        };
        switch (viewType) {
          case 'hours':
            {
              const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
              const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
              const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
              const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
              return !containsValidTime({
                start,
                end
              }) || !isValidValue(valueWithMeridiem);
            }
          case 'minutes':
            {
              const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
              const start = utils.setSeconds(dateWithNewMinutes, 0);
              const end = utils.setSeconds(dateWithNewMinutes, 59);
              return !containsValidTime({
                start,
                end
              }) || !isValidValue(rawValue, minutesStep);
            }
          case 'seconds':
            {
              const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
              const start = dateWithNewSeconds;
              const end = dateWithNewSeconds;
              return !containsValidTime({
                start,
                end
              }) || !isValidValue(rawValue);
            }
          default:
            throw new Error('not supported');
        }
      }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);
      const selectedId = useId();
      const viewProps = React__namespace.useMemo(() => {
        switch (view) {
          case 'hours':
            {
              const handleHoursChange = (hourValue, isFinish) => {
                const valueWithMeridiem = convertValueToMeridiem(hourValue, meridiemMode, ampm);
                setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), isFinish);
              };
              return {
                onChange: handleHoursChange,
                viewValue: utils.getHours(valueOrReferenceDate),
                children: getHourNumbers({
                  value,
                  utils,
                  ampm,
                  onChange: handleHoursChange,
                  getClockNumberText: localeText.hoursClockNumberText,
                  isDisabled: hourValue => disabled || isTimeDisabled(hourValue, 'hours'),
                  selectedId
                })
              };
            }
          case 'minutes':
            {
              const minutesValue = utils.getMinutes(valueOrReferenceDate);
              const handleMinutesChange = (minuteValue, isFinish) => {
                setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minuteValue), isFinish);
              };
              return {
                viewValue: minutesValue,
                onChange: handleMinutesChange,
                children: getMinutesNumbers({
                  utils,
                  value: minutesValue,
                  onChange: handleMinutesChange,
                  getClockNumberText: localeText.minutesClockNumberText,
                  isDisabled: minuteValue => disabled || isTimeDisabled(minuteValue, 'minutes'),
                  selectedId
                })
              };
            }
          case 'seconds':
            {
              const secondsValue = utils.getSeconds(valueOrReferenceDate);
              const handleSecondsChange = (secondValue, isFinish) => {
                setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, secondValue), isFinish);
              };
              return {
                viewValue: secondsValue,
                onChange: handleSecondsChange,
                children: getMinutesNumbers({
                  utils,
                  value: secondsValue,
                  onChange: handleSecondsChange,
                  getClockNumberText: localeText.secondsClockNumberText,
                  isDisabled: secondValue => disabled || isTimeDisabled(secondValue, 'seconds'),
                  selectedId
                })
              };
            }
          default:
            throw new Error('You must provide the type for ClockView');
        }
      }, [view, utils, value, ampm, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, isTimeDisabled, selectedId, disabled]);
      const ownerState = props;
      const classes = useUtilityClasses$C(ownerState);
      return /*#__PURE__*/jsxRuntime_2(TimeClockRoot, _extends({
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState
      }, other, {
        children: [/*#__PURE__*/jsxRuntime_1(Clock, _extends({
          autoFocus: autoFocus != null ? autoFocus : !!focusedView,
          ampmInClock: ampmInClock && views.includes('hours'),
          value: value,
          type: view,
          ampm: ampm,
          minutesStep: minutesStep,
          isTimeDisabled: isTimeDisabled,
          meridiemMode: meridiemMode,
          handleMeridiemChange: handleMeridiemChange,
          selectedId: selectedId,
          disabled: disabled,
          readOnly: readOnly
        }, viewProps)), showViewSwitcher && /*#__PURE__*/jsxRuntime_1(TimeClockArrowSwitcher, {
          className: classes.arrowSwitcher,
          slots: slots,
          slotProps: slotProps,
          onGoToPrevious: () => setView(previousView),
          isPreviousDisabled: !previousView,
          previousLabel: localeText.openPreviousView,
          onGoToNext: () => setView(nextView),
          isNextDisabled: !nextView,
          nextLabel: localeText.openNextView,
          ownerState: ownerState
        })]
      }));
    });

    /**
     * @ignore - internal component.
     */
    const ListContext = /*#__PURE__*/React__namespace.createContext({});
    var ListContext$1 = ListContext;

    const dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);
    var dividerClasses$1 = dividerClasses;

    const listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);
    var listItemIconClasses$1 = listItemIconClasses;

    const listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
    var listItemTextClasses$1 = listItemTextClasses;

    function getMenuItemUtilityClass(slot) {
      return generateUtilityClass('MuiMenuItem', slot);
    }
    const menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);
    var menuItemClasses$1 = menuItemClasses;

    const _excluded$M = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
    const overridesResolver$2 = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
    };
    const useUtilityClasses$B = ownerState => {
      const {
        disabled,
        dense,
        divider,
        disableGutters,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']
      };
      const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const MenuItemRoot = styled$1(ButtonBase$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiMenuItem',
      slot: 'Root',
      overridesResolver: overridesResolver$2
    })(({
      theme,
      ownerState
    }) => _extends({}, theme.typography.body1, {
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'center',
      position: 'relative',
      textDecoration: 'none',
      minHeight: 48,
      paddingTop: 6,
      paddingBottom: 6,
      boxSizing: 'border-box',
      whiteSpace: 'nowrap'
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, ownerState.divider && {
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
      backgroundClip: 'padding-box'
    }, {
      '&:hover': {
        textDecoration: 'none',
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      [`&.${menuItemClasses$1.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${menuItemClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      },
      [`&.${menuItemClasses$1.selected}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      },
      [`&.${menuItemClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${menuItemClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& + .${dividerClasses$1.root}`]: {
        marginTop: theme.spacing(1),
        marginBottom: theme.spacing(1)
      },
      [`& + .${dividerClasses$1.inset}`]: {
        marginLeft: 52
      },
      [`& .${listItemTextClasses$1.root}`]: {
        marginTop: 0,
        marginBottom: 0
      },
      [`& .${listItemTextClasses$1.inset}`]: {
        paddingLeft: 36
      },
      [`& .${listItemIconClasses$1.root}`]: {
        minWidth: 36
      }
    }, !ownerState.dense && {
      [theme.breakpoints.up('sm')]: {
        minHeight: 'auto'
      }
    }, ownerState.dense && _extends({
      minHeight: 32,
      // https://m2.material.io/components/menus#specs > Dense
      paddingTop: 4,
      paddingBottom: 4
    }, theme.typography.body2, {
      [`& .${listItemIconClasses$1.root} svg`]: {
        fontSize: '1.25rem'
      }
    })));
    const MenuItem = /*#__PURE__*/React__namespace.forwardRef(function MenuItem(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiMenuItem'
      });
      const {
          autoFocus = false,
          component = 'li',
          dense = false,
          divider = false,
          disableGutters = false,
          focusVisibleClassName,
          role = 'menuitem',
          tabIndex: tabIndexProp,
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$M);
      const context = React__namespace.useContext(ListContext$1);
      const childContext = React__namespace.useMemo(() => ({
        dense: dense || context.dense || false,
        disableGutters
      }), [context.dense, dense, disableGutters]);
      const menuItemRef = React__namespace.useRef(null);
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          if (menuItemRef.current) {
            menuItemRef.current.focus();
          }
        }
      }, [autoFocus]);
      const ownerState = _extends({}, props, {
        dense: childContext.dense,
        divider,
        disableGutters
      });
      const classes = useUtilityClasses$B(props);
      const handleRef = useForkRef(menuItemRef, ref);
      let tabIndex;
      if (!props.disabled) {
        tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
      }
      return /*#__PURE__*/jsxRuntime_1(ListContext$1.Provider, {
        value: childContext,
        children: /*#__PURE__*/jsxRuntime_1(MenuItemRoot, _extends({
          ref: handleRef,
          role: role,
          tabIndex: tabIndex,
          component: component,
          focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
          className: clsx(classes.root, className)
        }, other, {
          ownerState: ownerState,
          classes: classes
        }))
      });
    });
    var MenuItem$1 = MenuItem;

    /**
     * @license React
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b=Symbol.for("react.element"),c=Symbol.for("react.portal"),d=Symbol.for("react.fragment"),e=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),g=Symbol.for("react.provider"),h=Symbol.for("react.context"),k=Symbol.for("react.server_context"),l=Symbol.for("react.forward_ref"),m=Symbol.for("react.suspense"),n=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),q=Symbol.for("react.lazy"),t=Symbol.for("react.offscreen"),u;u=Symbol.for("react.module.reference");
    function v(a){if("object"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}var ContextConsumer=h;var ContextProvider=g;var Element$1=b;var ForwardRef=l;var Fragment=d;var Lazy=q;var Memo=p;var Portal$1=c;var Profiler=f;var StrictMode=e;var Suspense=m;
    var SuspenseList=n;var isAsyncMode=function(){return !1};var isConcurrentMode=function(){return !1};var isContextConsumer=function(a){return v(a)===h};var isContextProvider=function(a){return v(a)===g};var isElement$1=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b};var isForwardRef=function(a){return v(a)===l};var isFragment=function(a){return v(a)===d};var isLazy=function(a){return v(a)===q};var isMemo=function(a){return v(a)===p};
    var isPortal=function(a){return v(a)===c};var isProfiler=function(a){return v(a)===f};var isStrictMode=function(a){return v(a)===e};var isSuspense=function(a){return v(a)===m};var isSuspenseList=function(a){return v(a)===n};
    var isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||"object"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};var typeOf=v;

    var reactIs_production_min = {
    	ContextConsumer: ContextConsumer,
    	ContextProvider: ContextProvider,
    	Element: Element$1,
    	ForwardRef: ForwardRef,
    	Fragment: Fragment,
    	Lazy: Lazy,
    	Memo: Memo,
    	Portal: Portal$1,
    	Profiler: Profiler,
    	StrictMode: StrictMode,
    	Suspense: Suspense,
    	SuspenseList: SuspenseList,
    	isAsyncMode: isAsyncMode,
    	isConcurrentMode: isConcurrentMode,
    	isContextConsumer: isContextConsumer,
    	isContextProvider: isContextProvider,
    	isElement: isElement$1,
    	isForwardRef: isForwardRef,
    	isFragment: isFragment,
    	isLazy: isLazy,
    	isMemo: isMemo,
    	isPortal: isPortal,
    	isProfiler: isProfiler,
    	isStrictMode: isStrictMode,
    	isSuspense: isSuspense,
    	isSuspenseList: isSuspenseList,
    	isValidElementType: isValidElementType,
    	typeOf: typeOf
    };

    var reactIs = createCommonjsModule(function (module) {

    {
      module.exports = reactIs_production_min;
    }
    });
    reactIs.isFragment;

    function getListUtilityClass(slot) {
      return generateUtilityClass('MuiList', slot);
    }
    generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);

    const _excluded$L = ["children", "className", "component", "dense", "disablePadding", "subheader"];
    const useUtilityClasses$A = ownerState => {
      const {
        classes,
        disablePadding,
        dense,
        subheader
      } = ownerState;
      const slots = {
        root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
      };
      return composeClasses(slots, getListUtilityClass, classes);
    };
    const ListRoot = styled$1('ul', {
      name: 'MuiList',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
      }
    })(({
      ownerState
    }) => _extends({
      listStyle: 'none',
      margin: 0,
      padding: 0,
      position: 'relative'
    }, !ownerState.disablePadding && {
      paddingTop: 8,
      paddingBottom: 8
    }, ownerState.subheader && {
      paddingTop: 0
    }));
    const List = /*#__PURE__*/React__namespace.forwardRef(function List(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiList'
      });
      const {
          children,
          className,
          component = 'ul',
          dense = false,
          disablePadding = false,
          subheader
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$L);
      const context = React__namespace.useMemo(() => ({
        dense
      }), [dense]);
      const ownerState = _extends({}, props, {
        component,
        dense,
        disablePadding
      });
      const classes = useUtilityClasses$A(ownerState);
      return /*#__PURE__*/jsxRuntime_1(ListContext$1.Provider, {
        value: context,
        children: /*#__PURE__*/jsxRuntime_2(ListRoot, _extends({
          as: component,
          className: clsx(classes.root, className),
          ref: ref,
          ownerState: ownerState
        }, other, {
          children: [subheader, children]
        }))
      });
    });
    var List$1 = List;

    const _excluded$K = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
    function nextItem(list, item, disableListWrap) {
      if (list === item) {
        return list.firstChild;
      }
      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }
      return disableListWrap ? null : list.firstChild;
    }
    function previousItem(list, item, disableListWrap) {
      if (list === item) {
        return disableListWrap ? list.firstChild : list.lastChild;
      }
      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }
      return disableListWrap ? null : list.lastChild;
    }
    function textCriteriaMatches(nextFocus, textCriteria) {
      if (textCriteria === undefined) {
        return true;
      }
      let text = nextFocus.innerText;
      if (text === undefined) {
        // jsdom doesn't support innerText
        text = nextFocus.textContent;
      }
      text = text.trim().toLowerCase();
      if (text.length === 0) {
        return false;
      }
      if (textCriteria.repeating) {
        return text[0] === textCriteria.keys[0];
      }
      return text.indexOf(textCriteria.keys.join('')) === 0;
    }
    function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
      let wrappedOnce = false;
      let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
      while (nextFocus) {
        // Prevent infinite loop.
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return false;
          }
          wrappedOnce = true;
        }

        // Same logic as useAutocomplete.js
        const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
        if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
          // Move to the next element.
          nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        } else {
          nextFocus.focus();
          return true;
        }
      }
      return false;
    }

    /**
     * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/.
     * It's exposed to help customization of the [`Menu`](/material-ui/api/menu/) component if you
     * use it separately you need to move focus into the component manually. Once
     * the focus is placed inside the component it is fully keyboard accessible.
     */
    const MenuList = /*#__PURE__*/React__namespace.forwardRef(function MenuList(props, ref) {
      const {
          // private
          // eslint-disable-next-line react/prop-types
          actions,
          autoFocus = false,
          autoFocusItem = false,
          children,
          className,
          disabledItemsFocusable = false,
          disableListWrap = false,
          onKeyDown,
          variant = 'selectedMenu'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$K);
      const listRef = React__namespace.useRef(null);
      const textCriteriaRef = React__namespace.useRef({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
      });
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          listRef.current.focus();
        }
      }, [autoFocus]);
      React__namespace.useImperativeHandle(actions, () => ({
        adjustStyleForScrollbar: (containerElement, theme) => {
          // Let's ignore that piece of logic if users are already overriding the width
          // of the menu.
          const noExplicitWidth = !listRef.current.style.width;
          if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
            const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
            listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
            listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
          }
          return listRef.current;
        }
      }), []);
      const handleKeyDown = event => {
        const list = listRef.current;
        const key = event.key;
        /**
         * @type {Element} - will always be defined since we are in a keydown handler
         * attached to an element. A keydown event is either dispatched to the activeElement
         * or document.body or document.documentElement. Only the first case will
         * trigger this specific handler.
         */
        const currentFocus = ownerDocument(list).activeElement;
        if (key === 'ArrowDown') {
          // Prevent scroll of the page
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === 'ArrowUp') {
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key === 'Home') {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === 'End') {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key.length === 1) {
          const criteria = textCriteriaRef.current;
          const lowerKey = key.toLowerCase();
          const currTime = performance.now();
          if (criteria.keys.length > 0) {
            // Reset
            if (currTime - criteria.lastTime > 500) {
              criteria.keys = [];
              criteria.repeating = true;
              criteria.previousKeyMatched = true;
            } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
              criteria.repeating = false;
            }
          }
          criteria.lastTime = currTime;
          criteria.keys.push(lowerKey);
          const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
          if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
            event.preventDefault();
          } else {
            criteria.previousKeyMatched = false;
          }
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleRef = useForkRef(listRef, ref);

      /**
       * the index of the item should receive focus
       * in a `variant="selectedMenu"` it's the first `selected` item
       * otherwise it's the very first item.
       */
      let activeItemIndex = -1;
      // since we inject focus related props into children we have to do a lookahead
      // to check if there is a `selected` item. We're looking for the last `selected`
      // item and use the first valid item as a fallback
      React__namespace.Children.forEach(children, (child, index) => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          if (activeItemIndex === index) {
            activeItemIndex += 1;
            if (activeItemIndex >= children.length) {
              // there are no focusable items within the list.
              activeItemIndex = -1;
            }
          }
          return;
        }
        if (!child.props.disabled) {
          if (variant === 'selectedMenu' && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
        if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            // there are no focusable items within the list.
            activeItemIndex = -1;
          }
        }
      });
      const items = React__namespace.Children.map(children, (child, index) => {
        if (index === activeItemIndex) {
          const newChildProps = {};
          if (autoFocusItem) {
            newChildProps.autoFocus = true;
          }
          if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
            newChildProps.tabIndex = 0;
          }
          return /*#__PURE__*/React__namespace.cloneElement(child, newChildProps);
        }
        return child;
      });
      return /*#__PURE__*/jsxRuntime_1(List$1, _extends({
        role: "menu",
        ref: handleRef,
        className: className,
        onKeyDown: handleKeyDown,
        tabIndex: autoFocus ? 0 : -1
      }, other, {
        children: items
      }));
    });
    var MenuList$1 = MenuList;

    function getDigitalClockUtilityClass(slot) {
      return generateUtilityClass('MuiDigitalClock', slot);
    }
    generateUtilityClasses('MuiDigitalClock', ['root', 'list', 'item']);

    const _excluded$J = ["ampm", "timeStep", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "view", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "views", "skipDisabled", "timezone"];
    const useUtilityClasses$z = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        list: ['list'],
        item: ['item']
      };
      return composeClasses(slots, getDigitalClockUtilityClass, classes);
    };
    const DigitalClockRoot = styled$1(PickerViewRoot, {
      name: 'MuiDigitalClock',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(({
      ownerState
    }) => ({
      overflowY: 'auto',
      width: '100%',
      '@media (prefers-reduced-motion: no-preference)': {
        scrollBehavior: ownerState.alreadyRendered ? 'smooth' : 'auto'
      },
      maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT
    }));
    const DigitalClockList = styled$1(MenuList$1, {
      name: 'MuiDigitalClock',
      slot: 'List',
      overridesResolver: (props, styles) => styles.list
    })({
      padding: 0
    });
    const DigitalClockItem = styled$1(MenuItem$1, {
      name: 'MuiDigitalClock',
      slot: 'Item',
      overridesResolver: (props, styles) => styles.item
    })(({
      theme
    }) => ({
      padding: '8px 16px',
      margin: '2px 4px',
      '&:first-of-type': {
        marginTop: 4
      },
      '&:hover': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
      },
      '&.Mui-selected': {
        backgroundColor: (theme.vars || theme).palette.primary.main,
        color: (theme.vars || theme).palette.primary.contrastText,
        '&:focus-visible, &:hover': {
          backgroundColor: (theme.vars || theme).palette.primary.dark
        }
      },
      '&.Mui-focusVisible': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
      }
    }));
    const DigitalClock = /*#__PURE__*/React__namespace.forwardRef(function DigitalClock(inProps, ref) {
      var _ref, _slots$digitalClockIt, _slotProps$digitalClo;
      const utils = useUtils();
      const containerRef = React__namespace.useRef(null);
      const handleRef = useForkRef(ref, containerRef);
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDigitalClock'
      });
      const {
          ampm = utils.is12HourCycleInCurrentLocale(),
          timeStep = 30,
          autoFocus,
          components,
          componentsProps,
          slots,
          slotProps,
          value: valueProp,
          defaultValue,
          referenceDate: referenceDateProp,
          disableIgnoringDatePartForTimeValidation = false,
          maxTime,
          minTime,
          disableFuture,
          disablePast,
          minutesStep = 1,
          shouldDisableClock,
          shouldDisableTime,
          onChange,
          view: inView,
          openTo,
          onViewChange,
          focusedView,
          onFocusedViewChange,
          className,
          disabled,
          readOnly,
          views = ['hours'],
          skipDisabled = false,
          timezone: timezoneProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$J);
      const {
        value,
        handleValueChange: handleRawValueChange,
        timezone
      } = useControlledValueWithTimezone({
        name: 'DigitalClock',
        timezone: timezoneProp,
        value: valueProp,
        defaultValue,
        onChange,
        valueManager: singleItemValueManager
      });
      const localeText = useLocaleText();
      const now = useNow(timezone);
      const ownerState = React__namespace.useMemo(() => _extends({}, props, {
        alreadyRendered: !!containerRef.current
      }), [props]);
      const classes = useUtilityClasses$z(ownerState);
      const ClockItem = (_ref = (_slots$digitalClockIt = slots == null ? void 0 : slots.digitalClockItem) != null ? _slots$digitalClockIt : components == null ? void 0 : components.DigitalClockItem) != null ? _ref : DigitalClockItem;
      const clockItemProps = useSlotProps({
        elementType: ClockItem,
        externalSlotProps: (_slotProps$digitalClo = slotProps == null ? void 0 : slotProps.digitalClockItem) != null ? _slotProps$digitalClo : componentsProps == null ? void 0 : componentsProps.digitalClockItem,
        ownerState: {},
        className: classes.item
      });
      const valueOrReferenceDate = useClockReferenceDate({
        value,
        referenceDate: referenceDateProp,
        utils,
        props,
        timezone
      });
      const handleValueChange = useEventCallback(newValue => handleRawValueChange(newValue, 'finish', 'hours'));
      const {
        setValueAndGoToNextView
      } = useViews({
        view: inView,
        views,
        openTo,
        onViewChange,
        onChange: handleValueChange,
        focusedView,
        onFocusedViewChange
      });
      const handleItemSelect = useEventCallback(newValue => {
        setValueAndGoToNextView(newValue, 'finish');
      });
      React__namespace.useEffect(() => {
        if (containerRef.current === null) {
          return;
        }
        const selectedItem = containerRef.current.querySelector('[role="listbox"] [role="option"][aria-selected="true"]');
        if (!selectedItem) {
          return;
        }
        const offsetTop = selectedItem.offsetTop;

        // Subtracting the 4px of extra margin intended for the first visible section item
        containerRef.current.scrollTop = offsetTop - 4;
      });
      const isTimeDisabled = React__namespace.useCallback(valueToCheck => {
        const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
        const containsValidTime = () => {
          if (minTime && isAfter(minTime, valueToCheck)) {
            return false;
          }
          if (maxTime && isAfter(valueToCheck, maxTime)) {
            return false;
          }
          if (disableFuture && isAfter(valueToCheck, now)) {
            return false;
          }
          if (disablePast && isAfter(now, valueToCheck)) {
            return false;
          }
          return true;
        };
        const isValidValue = () => {
          if (utils.getMinutes(valueToCheck) % minutesStep !== 0) {
            return false;
          }
          if (shouldDisableClock != null && shouldDisableClock(utils.toJsDate(valueToCheck).getTime(), 'hours')) {
            return false;
          }
          if (shouldDisableTime) {
            return !shouldDisableTime(valueToCheck, 'hours');
          }
          return true;
        };
        return !containsValidTime() || !isValidValue();
      }, [disableIgnoringDatePartForTimeValidation, utils, minTime, maxTime, disableFuture, now, disablePast, minutesStep, shouldDisableClock, shouldDisableTime]);
      const timeOptions = React__namespace.useMemo(() => {
        const startOfDay = utils.startOfDay(valueOrReferenceDate);
        return [startOfDay, ...Array.from({
          length: Math.ceil(24 * 60 / timeStep) - 1
        }, (_, index) => utils.addMinutes(startOfDay, timeStep * (index + 1)))];
      }, [valueOrReferenceDate, timeStep, utils]);
      return /*#__PURE__*/jsxRuntime_1(DigitalClockRoot, _extends({
        ref: handleRef,
        className: clsx(classes.root, className),
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime_1(DigitalClockList, {
          autoFocusItem: autoFocus || !!focusedView,
          role: "listbox",
          "aria-label": localeText.timePickerToolbarTitle,
          className: classes.list,
          children: timeOptions.map(option => {
            if (skipDisabled && isTimeDisabled(option)) {
              return null;
            }
            const isSelected = utils.isEqual(option, value);
            return /*#__PURE__*/jsxRuntime_1(ClockItem, _extends({
              onClick: () => !readOnly && handleItemSelect(option),
              selected: isSelected,
              disabled: disabled || isTimeDisabled(option),
              disableRipple: readOnly,
              role: "option"
              // aria-readonly is not supported here and does not have any effect
              ,
              "aria-disabled": readOnly,
              "aria-selected": isSelected
            }, clockItemProps, {
              children: utils.format(option, ampm ? 'fullTime12h' : 'fullTime24h')
            }), utils.toISO(option));
          })
        })
      }));
    });

    function getMultiSectionDigitalClockUtilityClass(slot) {
      return generateUtilityClass('MuiMultiSectionDigitalClock', slot);
    }
    generateUtilityClasses('MuiMultiSectionDigitalClock', ['root']);

    function getMultiSectionDigitalClockSectionUtilityClass(slot) {
      return generateUtilityClass('MuiMultiSectionDigitalClock', slot);
    }
    generateUtilityClasses('MuiMultiSectionDigitalClock', ['root', 'item']);

    const _excluded$I = ["autoFocus", "onChange", "className", "disabled", "readOnly", "items", "active", "slots", "slotProps", "skipDisabled"];
    const useUtilityClasses$y = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        item: ['item']
      };
      return composeClasses(slots, getMultiSectionDigitalClockSectionUtilityClass, classes);
    };
    const MultiSectionDigitalClockSectionRoot = styled$1(MenuList$1, {
      name: 'MuiMultiSectionDigitalClockSection',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      theme,
      ownerState
    }) => ({
      maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT,
      width: 56,
      padding: 0,
      overflow: 'hidden',
      '@media (prefers-reduced-motion: no-preference)': {
        scrollBehavior: ownerState.alreadyRendered ? 'smooth' : 'auto'
      },
      '&:hover': {
        overflowY: 'auto'
      },
      '&:not(:first-of-type)': {
        borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
      },
      '&:after': {
        display: 'block',
        content: '""',
        // subtracting the height of one item, extra margin and borders to make sure the max height is correct
        height: 'calc(100% - 40px - 6px)'
      }
    }));
    const MultiSectionDigitalClockSectionItem = styled$1(MenuItem$1, {
      name: 'MuiMultiSectionDigitalClockSection',
      slot: 'Item',
      overridesResolver: (_, styles) => styles.item
    })(({
      theme
    }) => ({
      padding: 8,
      margin: '2px 4px',
      width: MULTI_SECTION_CLOCK_SECTION_WIDTH,
      justifyContent: 'center',
      '&:first-of-type': {
        marginTop: 4
      },
      '&:hover': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
      },
      '&.Mui-selected': {
        backgroundColor: (theme.vars || theme).palette.primary.main,
        color: (theme.vars || theme).palette.primary.contrastText,
        '&:focus-visible, &:hover': {
          backgroundColor: (theme.vars || theme).palette.primary.dark
        }
      },
      '&.Mui-focusVisible': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
      }
    }));
    /**
     * @ignore - internal component.
     */
    const MultiSectionDigitalClockSection = /*#__PURE__*/React__namespace.forwardRef(function MultiSectionDigitalClockSection(inProps, ref) {
      var _slots$digitalClockSe;
      const containerRef = React__namespace.useRef(null);
      const handleRef = useForkRef(ref, containerRef);
      const previousSelected = React__namespace.useRef(null);
      const props = useThemeProps({
        props: inProps,
        name: 'MuiMultiSectionDigitalClockSection'
      });
      const {
          autoFocus,
          onChange,
          className,
          disabled,
          readOnly,
          items,
          active,
          slots,
          slotProps,
          skipDisabled
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$I);
      const ownerState = React__namespace.useMemo(() => _extends({}, props, {
        alreadyRendered: !!containerRef.current
      }), [props]);
      const classes = useUtilityClasses$y(ownerState);
      const DigitalClockSectionItem = (_slots$digitalClockSe = slots == null ? void 0 : slots.digitalClockSectionItem) != null ? _slots$digitalClockSe : MultiSectionDigitalClockSectionItem;
      React__namespace.useEffect(() => {
        if (containerRef.current === null) {
          return;
        }
        const selectedItem = containerRef.current.querySelector('[role="option"][aria-selected="true"]');
        if (!selectedItem || previousSelected.current === selectedItem) {
          // Handle setting the ref to null if the selected item is ever reset via UI
          if (previousSelected.current !== selectedItem) {
            previousSelected.current = selectedItem;
          }
          return;
        }
        previousSelected.current = selectedItem;
        if (active && autoFocus) {
          selectedItem.focus();
        }
        const offsetTop = selectedItem.offsetTop;

        // Subtracting the 4px of extra margin intended for the first visible section item
        containerRef.current.scrollTop = offsetTop - 4;
      });
      return /*#__PURE__*/jsxRuntime_1(MultiSectionDigitalClockSectionRoot, _extends({
        ref: handleRef,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        autoFocusItem: autoFocus && active,
        role: "listbox"
      }, other, {
        children: items.map(option => {
          var _option$isDisabled, _option$isDisabled2;
          if (skipDisabled && (_option$isDisabled = option.isDisabled) != null && _option$isDisabled.call(option, option.value)) {
            return null;
          }
          const isSelected = option.isSelected(option.value);
          return /*#__PURE__*/jsxRuntime_1(DigitalClockSectionItem, _extends({
            onClick: () => !readOnly && onChange(option.value),
            selected: isSelected,
            disabled: disabled || ((_option$isDisabled2 = option.isDisabled) == null ? void 0 : _option$isDisabled2.call(option, option.value)),
            disableRipple: readOnly,
            role: "option"
            // aria-readonly is not supported here and does not have any effect
            ,
            "aria-disabled": readOnly,
            "aria-label": option.ariaLabel,
            "aria-selected": isSelected
          }, slotProps == null ? void 0 : slotProps.digitalClockSectionItem, {
            children: option.label
          }), option.label);
        })
      }));
    });

    const getHourSectionOptions = ({
      now,
      value,
      utils,
      ampm,
      isDisabled,
      resolveAriaLabel,
      timeStep
    }) => {
      const currentHours = value ? utils.getHours(value) : null;
      const result = [];
      const isSelected = hour => {
        if (currentHours === null) {
          return false;
        }
        if (ampm) {
          if (hour === 12) {
            return currentHours === 12 || currentHours === 0;
          }
          return currentHours === hour || currentHours - 12 === hour;
        }
        return currentHours === hour;
      };
      const endHour = ampm ? 11 : 23;
      for (let hour = 0; hour <= endHour; hour += timeStep) {
        let label = utils.format(utils.setHours(now, hour), ampm ? 'hours12h' : 'hours24h');
        const ariaLabel = resolveAriaLabel(parseInt(label, 10).toString());
        label = utils.formatNumber(label);
        result.push({
          value: hour,
          label,
          isSelected,
          isDisabled,
          ariaLabel
        });
      }
      return result;
    };
    const getTimeSectionOptions = ({
      value,
      isDisabled,
      timeStep,
      resolveLabel,
      resolveAriaLabel,
      hasValue = true
    }) => {
      const isSelected = timeValue => {
        if (value === null) {
          return false;
        }
        return hasValue && value === timeValue;
      };
      return [...Array.from({
        length: Math.ceil(60 / timeStep)
      }, (_, index) => {
        const timeValue = timeStep * index;
        return {
          value: timeValue,
          label: resolveLabel(timeValue),
          isDisabled,
          isSelected,
          ariaLabel: resolveAriaLabel(timeValue.toString())
        };
      })];
    };

    const _excluded$H = ["ampm", "timeSteps", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "skipDisabled", "timezone"];
    const useUtilityClasses$x = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes);
    };
    const MultiSectionDigitalClockRoot = styled$1(PickerViewRoot, {
      name: 'MuiMultiSectionDigitalClock',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      theme
    }) => ({
      display: 'flex',
      flexDirection: 'row',
      width: '100%',
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
    }));
    const MultiSectionDigitalClock = /*#__PURE__*/React__namespace.forwardRef(function MultiSectionDigitalClock(inProps, ref) {
      const utils = useUtils();
      const props = useThemeProps({
        props: inProps,
        name: 'MuiMultiSectionDigitalClock'
      });
      const {
          ampm = utils.is12HourCycleInCurrentLocale(),
          timeSteps: inTimeSteps,
          autoFocus,
          components,
          componentsProps,
          slots,
          slotProps,
          value: valueProp,
          defaultValue,
          referenceDate: referenceDateProp,
          disableIgnoringDatePartForTimeValidation = false,
          maxTime,
          minTime,
          disableFuture,
          disablePast,
          minutesStep = 1,
          shouldDisableClock,
          shouldDisableTime,
          onChange,
          view: inView,
          views: inViews = ['hours', 'minutes'],
          openTo,
          onViewChange,
          focusedView: inFocusedView,
          onFocusedViewChange,
          className,
          disabled,
          readOnly,
          skipDisabled = false,
          timezone: timezoneProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$H);
      const {
        value,
        handleValueChange: handleRawValueChange,
        timezone
      } = useControlledValueWithTimezone({
        name: 'MultiSectionDigitalClock',
        timezone: timezoneProp,
        value: valueProp,
        defaultValue,
        onChange,
        valueManager: singleItemValueManager
      });
      const localeText = useLocaleText();
      const now = useNow(timezone);
      const timeSteps = React__namespace.useMemo(() => _extends({
        hours: 1,
        minutes: 5,
        seconds: 5
      }, inTimeSteps), [inTimeSteps]);
      const valueOrReferenceDate = useClockReferenceDate({
        value,
        referenceDate: referenceDateProp,
        utils,
        props,
        timezone
      });
      const handleValueChange = useEventCallback((newValue, selectionState, selectedView) => handleRawValueChange(newValue, selectionState, selectedView));
      const views = React__namespace.useMemo(() => {
        if (!ampm || !inViews.includes('hours')) {
          return inViews;
        }
        return inViews.includes('meridiem') ? inViews : [...inViews, 'meridiem'];
      }, [ampm, inViews]);
      const {
        view,
        setValueAndGoToView,
        focusedView
      } = useViews({
        view: inView,
        views,
        openTo,
        onViewChange,
        onChange: handleValueChange,
        focusedView: inFocusedView,
        onFocusedViewChange
      });
      const handleMeridiemValueChange = useEventCallback(newValue => {
        setValueAndGoToView(newValue, null, 'meridiem');
      });
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(valueOrReferenceDate, ampm, handleMeridiemValueChange, 'finish');
      const isTimeDisabled = React__namespace.useCallback((rawValue, viewType) => {
        const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
        const shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');
        const containsValidTime = ({
          start,
          end
        }) => {
          if (minTime && isAfter(minTime, end)) {
            return false;
          }
          if (maxTime && isAfter(start, maxTime)) {
            return false;
          }
          if (disableFuture && isAfter(start, now)) {
            return false;
          }
          if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {
            return false;
          }
          return true;
        };
        const isValidValue = (timeValue, step = 1) => {
          if (timeValue % step !== 0) {
            return false;
          }
          if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
            return false;
          }
          if (shouldDisableTime) {
            switch (viewType) {
              case 'hours':
                return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), 'hours');
              case 'minutes':
                return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), 'minutes');
              case 'seconds':
                return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), 'seconds');
              default:
                return false;
            }
          }
          return true;
        };
        switch (viewType) {
          case 'hours':
            {
              const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
              const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
              const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
              const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
              return !containsValidTime({
                start,
                end
              }) || !isValidValue(valueWithMeridiem);
            }
          case 'minutes':
            {
              const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
              const start = utils.setSeconds(dateWithNewMinutes, 0);
              const end = utils.setSeconds(dateWithNewMinutes, 59);
              return !containsValidTime({
                start,
                end
              }) || !isValidValue(rawValue, minutesStep);
            }
          case 'seconds':
            {
              const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
              const start = dateWithNewSeconds;
              const end = dateWithNewSeconds;
              return !containsValidTime({
                start,
                end
              }) || !isValidValue(rawValue);
            }
          default:
            throw new Error('not supported');
        }
      }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);
      const handleSectionChange = useEventCallback((sectionView, newValue) => {
        const viewIndex = views.indexOf(sectionView);
        const nextView = views[viewIndex + 1];
        setValueAndGoToView(newValue, nextView, sectionView);
      });
      const buildViewProps = React__namespace.useCallback(viewToBuild => {
        switch (viewToBuild) {
          case 'hours':
            {
              return {
                onChange: hours => {
                  const valueWithMeridiem = convertValueToMeridiem(hours, meridiemMode, ampm);
                  handleSectionChange('hours', utils.setHours(valueOrReferenceDate, valueWithMeridiem));
                },
                items: getHourSectionOptions({
                  now,
                  value,
                  ampm,
                  utils,
                  isDisabled: hours => disabled || isTimeDisabled(hours, 'hours'),
                  timeStep: timeSteps.hours,
                  resolveAriaLabel: localeText.hoursClockNumberText
                })
              };
            }
          case 'minutes':
            {
              return {
                onChange: minutes => {
                  handleSectionChange('minutes', utils.setMinutes(valueOrReferenceDate, minutes));
                },
                items: getTimeSectionOptions({
                  value: utils.getMinutes(valueOrReferenceDate),
                  isDisabled: minutes => disabled || isTimeDisabled(minutes, 'minutes'),
                  resolveLabel: minutes => utils.format(utils.setMinutes(now, minutes), 'minutes'),
                  timeStep: timeSteps.minutes,
                  hasValue: !!value,
                  resolveAriaLabel: localeText.minutesClockNumberText
                })
              };
            }
          case 'seconds':
            {
              return {
                onChange: seconds => {
                  handleSectionChange('seconds', utils.setSeconds(valueOrReferenceDate, seconds));
                },
                items: getTimeSectionOptions({
                  value: utils.getSeconds(valueOrReferenceDate),
                  isDisabled: seconds => disabled || isTimeDisabled(seconds, 'seconds'),
                  resolveLabel: seconds => utils.format(utils.setSeconds(now, seconds), 'seconds'),
                  timeStep: timeSteps.seconds,
                  hasValue: !!value,
                  resolveAriaLabel: localeText.secondsClockNumberText
                })
              };
            }
          case 'meridiem':
            {
              const amLabel = formatMeridiem(utils, 'am');
              const pmLabel = formatMeridiem(utils, 'pm');
              return {
                onChange: handleMeridiemChange,
                items: [{
                  value: 'am',
                  label: amLabel,
                  isSelected: () => !!value && meridiemMode === 'am',
                  ariaLabel: amLabel
                }, {
                  value: 'pm',
                  label: pmLabel,
                  isSelected: () => !!value && meridiemMode === 'pm',
                  ariaLabel: pmLabel
                }]
              };
            }
          default:
            throw new Error(`Unknown view: ${viewToBuild} found.`);
        }
      }, [now, value, ampm, utils, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, handleSectionChange, valueOrReferenceDate, disabled, isTimeDisabled, handleMeridiemChange]);
      const viewTimeOptions = React__namespace.useMemo(() => {
        return views.reduce((result, currentView) => {
          return _extends({}, result, {
            [currentView]: buildViewProps(currentView)
          });
        }, {});
      }, [views, buildViewProps]);
      const ownerState = props;
      const classes = useUtilityClasses$x(ownerState);
      return /*#__PURE__*/jsxRuntime_1(MultiSectionDigitalClockRoot, _extends({
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        role: "group"
      }, other, {
        children: Object.entries(viewTimeOptions).map(([timeView, viewOptions]) => /*#__PURE__*/jsxRuntime_1(MultiSectionDigitalClockSection, {
          items: viewOptions.items,
          onChange: viewOptions.onChange,
          active: view === timeView,
          autoFocus: autoFocus != null ? autoFocus : focusedView === timeView,
          disabled: disabled,
          readOnly: readOnly,
          slots: slots != null ? slots : components,
          slotProps: slotProps != null ? slotProps : componentsProps,
          skipDisabled: skipDisabled,
          "aria-label": localeText.selectViewText(timeView)
        }, timeView))
      }));
    });

    // Inspired by https://github.com/focus-trap/tabbable
    const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');
    function getTabIndex(node) {
      const tabindexAttr = parseInt(node.getAttribute('tabindex') || '', 10);
      if (!Number.isNaN(tabindexAttr)) {
        return tabindexAttr;
      }

      // Browsers do not return `tabIndex` correctly for contentEditable nodes;
      // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
      // so if they don't have a tabindex attribute specifically set, assume it's 0.
      // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
      //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
      //  yet they are still part of the regular tab order; in FF, they get a default
      //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
      //  order, consider their tab index to be 0.
      if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
        return 0;
      }
      return node.tabIndex;
    }
    function isNonTabbableRadio(node) {
      if (node.tagName !== 'INPUT' || node.type !== 'radio') {
        return false;
      }
      if (!node.name) {
        return false;
      }
      const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
      let roving = getRadio(`[name="${node.name}"]:checked`);
      if (!roving) {
        roving = getRadio(`[name="${node.name}"]`);
      }
      return roving !== node;
    }
    function isNodeMatchingSelectorFocusable(node) {
      if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
        return false;
      }
      return true;
    }
    function defaultGetTabbable(root) {
      const regularTabNodes = [];
      const orderedTabNodes = [];
      Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
        const nodeTabIndex = getTabIndex(node);
        if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
          return;
        }
        if (nodeTabIndex === 0) {
          regularTabNodes.push(node);
        } else {
          orderedTabNodes.push({
            documentOrder: i,
            tabIndex: nodeTabIndex,
            node: node
          });
        }
      });
      return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
    }
    function defaultIsEnabled() {
      return true;
    }

    /**
     * Utility component that locks focus inside the component.
     *
     * Demos:
     *
     * - [Focus Trap](https://mui.com/base-ui/react-focus-trap/)
     *
     * API:
     *
     * - [FocusTrap API](https://mui.com/base-ui/react-focus-trap/components-api/#focus-trap)
     */
    function FocusTrap(props) {
      const {
        children,
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableRestoreFocus = false,
        getTabbable = defaultGetTabbable,
        isEnabled = defaultIsEnabled,
        open
      } = props;
      const ignoreNextEnforceFocus = React__namespace.useRef(false);
      const sentinelStart = React__namespace.useRef(null);
      const sentinelEnd = React__namespace.useRef(null);
      const nodeToRestore = React__namespace.useRef(null);
      const reactFocusEventTarget = React__namespace.useRef(null);
      // This variable is useful when disableAutoFocus is true.
      // It waits for the active element to move into the component to activate.
      const activated = React__namespace.useRef(false);
      const rootRef = React__namespace.useRef(null);
      // @ts-expect-error TODO upstream fix
      const handleRef = useForkRef(children.ref, rootRef);
      const lastKeydown = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        // We might render an empty child.
        if (!open || !rootRef.current) {
          return;
        }
        activated.current = !disableAutoFocus;
      }, [disableAutoFocus, open]);
      React__namespace.useEffect(() => {
        // We might render an empty child.
        if (!open || !rootRef.current) {
          return;
        }
        const doc = ownerDocument(rootRef.current);
        if (!rootRef.current.contains(doc.activeElement)) {
          if (!rootRef.current.hasAttribute('tabIndex')) {
            rootRef.current.setAttribute('tabIndex', '-1');
          }
          if (activated.current) {
            rootRef.current.focus();
          }
        }
        return () => {
          // restoreLastFocus()
          if (!disableRestoreFocus) {
            // In IE11 it is possible for document.activeElement to be null resulting
            // in nodeToRestore.current being null.
            // Not all elements in IE11 have a focus method.
            // Once IE11 support is dropped the focus() call can be unconditional.
            if (nodeToRestore.current && nodeToRestore.current.focus) {
              ignoreNextEnforceFocus.current = true;
              nodeToRestore.current.focus();
            }
            nodeToRestore.current = null;
          }
        };
        // Missing `disableRestoreFocus` which is fine.
        // We don't support changing that prop on an open FocusTrap
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [open]);
      React__namespace.useEffect(() => {
        // We might render an empty child.
        if (!open || !rootRef.current) {
          return;
        }
        const doc = ownerDocument(rootRef.current);
        const loopFocus = nativeEvent => {
          lastKeydown.current = nativeEvent;
          if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
            return;
          }

          // Make sure the next tab starts from the right place.
          // doc.activeElement refers to the origin.
          if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
            // We need to ignore the next contain as
            // it will try to move the focus back to the rootRef element.
            ignoreNextEnforceFocus.current = true;
            if (sentinelEnd.current) {
              sentinelEnd.current.focus();
            }
          }
        };
        const contain = () => {
          const rootElement = rootRef.current;

          // Cleanup functions are executed lazily in React 17.
          // Contain can be called between the component being unmounted and its cleanup function being run.
          if (rootElement === null) {
            return;
          }
          if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
            ignoreNextEnforceFocus.current = false;
            return;
          }

          // The focus is already inside
          if (rootElement.contains(doc.activeElement)) {
            return;
          }

          // The disableEnforceFocus is set and the focus is outside of the focus trap (and sentinel nodes)
          if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
            return;
          }

          // if the focus event is not coming from inside the children's react tree, reset the refs
          if (doc.activeElement !== reactFocusEventTarget.current) {
            reactFocusEventTarget.current = null;
          } else if (reactFocusEventTarget.current !== null) {
            return;
          }
          if (!activated.current) {
            return;
          }
          let tabbable = [];
          if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
            tabbable = getTabbable(rootRef.current);
          }

          // one of the sentinel nodes was focused, so move the focus
          // to the first/last tabbable element inside the focus trap
          if (tabbable.length > 0) {
            var _lastKeydown$current, _lastKeydown$current2;
            const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
            const focusNext = tabbable[0];
            const focusPrevious = tabbable[tabbable.length - 1];
            if (typeof focusNext !== 'string' && typeof focusPrevious !== 'string') {
              if (isShiftTab) {
                focusPrevious.focus();
              } else {
                focusNext.focus();
              }
            }
            // no tabbable elements in the trap focus or the focus was outside of the focus trap
          } else {
            rootElement.focus();
          }
        };
        doc.addEventListener('focusin', contain);
        doc.addEventListener('keydown', loopFocus, true);

        // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
        // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
        // Instead, we can look if the active element was restored on the BODY element.
        //
        // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
        // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
        const interval = setInterval(() => {
          if (doc.activeElement && doc.activeElement.tagName === 'BODY') {
            contain();
          }
        }, 50);
        return () => {
          clearInterval(interval);
          doc.removeEventListener('focusin', contain);
          doc.removeEventListener('keydown', loopFocus, true);
        };
      }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
      const onFocus = event => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
        reactFocusEventTarget.current = event.target;
        const childrenPropsHandler = children.props.onFocus;
        if (childrenPropsHandler) {
          childrenPropsHandler(event);
        }
      };
      const handleFocusSentinel = event => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
      };
      return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime_1("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelStart,
          "data-testid": "sentinelStart"
        }), /*#__PURE__*/React__namespace.cloneElement(children, {
          ref: handleRef,
          onFocus
        }), /*#__PURE__*/jsxRuntime_1("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelEnd,
          "data-testid": "sentinelEnd"
        })]
      });
    }

    var top = 'top';
    var bottom = 'bottom';
    var right = 'right';
    var left = 'left';
    var auto = 'auto';
    var basePlacements = [top, bottom, right, left];
    var start = 'start';
    var end = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper = 'popper';
    var reference = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    function getWindow(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement$1(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    // and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement$1(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement$1(element) || !getNodeName(element)) {
            return;
          }

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect$2,
      requires: ['computeStyles']
    };

    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }

    var max = Math.max;
    var min = Math.min;
    var round = Math.round;

    function getUAString() {
      var uaData = navigator.userAgentData;

      if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
        return uaData.brands.map(function (item) {
          return item.brand + "/" + item.version;
        }).join(' ');
      }

      return navigator.userAgent;
    }

    function isLayoutViewport() {
      return !/^((?!chrome|android).)*safari/i.test(getUAString());
    }

    function getBoundingClientRect(element, includeScale, isFixedStrategy) {
      if (includeScale === void 0) {
        includeScale = false;
      }

      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }

      var clientRect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;

      if (includeScale && isHTMLElement$1(element)) {
        scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
      }

      var _ref = isElement(element) ? getWindow(element) : window,
          visualViewport = _ref.visualViewport;

      var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
      var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
      var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
      var width = clientRect.width / scaleX;
      var height = clientRect.height / scaleY;
      return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
      };
    }

    // means it doesn't take into account transforms.

    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223

      var width = element.offsetWidth;
      var height = element.offsetHeight;

      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }

      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }

      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
      };
    }

    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    function getComputedStyle(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    function getTrueOffsetParent(element) {
      if (!isHTMLElement$1(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var isFirefox = /firefox/i.test(getUAString());
      var isIE = /Trident/i.test(getUAString());

      if (isIE && isHTMLElement$1(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode(element);

      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }

      while (isHTMLElement$1(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    function within(min$1, value, max$1) {
      return max(min$1, min(value, max$1));
    }
    function withinMaxClamp(min, value, max) {
      var v = within(min, value, max);
      return v > max ? max : v;
    }

    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }

    function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    };

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top : left;
      var maxProp = axis === 'y' ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$1(_ref2) {
      var state = _ref2.state,
          options = _ref2.options;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      if (!contains(state.elements.popper, arrowElement)) {
        return;
      }

      state.elements.arrow = arrowElement;
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$1,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    function getVariation(placement) {
      return placement.split('-')[1];
    }

    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsetsByDPR(_ref, win) {
      var x = _ref.x,
          y = _ref.y;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round(x * dpr) / dpr || 0,
        y: round(y * dpr) / dpr || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          variation = _ref2.variation,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets,
          isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x,
          x = _offsets$x === void 0 ? 0 : _offsets$x,
          _offsets$y = offsets.y,
          y = _offsets$y === void 0 ? 0 : _offsets$y;

      var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left;
      var sideY = top;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';

        if (offsetParent === getWindow(popper)) {
          offsetParent = getDocumentElement(popper);

          if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
            heightProp = 'scrollHeight';
            widthProp = 'scrollWidth';
          }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


        offsetParent = offsetParent;

        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
          offsetParent[heightProp];
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
          offsetParent[widthProp];
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
      }, getWindow(popper)) : {
        x: x,
        y: y
      };

      x = _ref4.x;
      y = _ref4.y;

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref5) {
      var state = _ref5.state,
          options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
        })));
      }

      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    var passive = {
      passive: true
    };

    function effect(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect,
      data: {}
    };

    var hash$1 = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
      });
    }

    var hash = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
      });
    }

    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    function getViewportRect(element, strategy) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0;

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = isLayoutViewport();

        if (layoutViewport || !layoutViewport && strategy === 'fixed') {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement$1(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect(element, strategy) {
      var rect = getBoundingClientRect(element, false, strategy === 'fixed');
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent, strategy) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent(element) : element;

      if (!isElement(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary, strategy) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent, strategy));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$strategy = _options.strategy,
          strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement(placement);

        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$1 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }

      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }

    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function (side) {
        return overflow[side] >= 0;
      });
    }

    function hide(_ref) {
      var state = _ref.state,
          name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
      });
    } // eslint-disable-next-line import/no-unused-modules


    var hide$1 = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['preventOverflow'],
      fn: hide
    };

    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis) {
        var _offsetModifierState$;

        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min$1 = offset + overflow[mainSide];
        var max$1 = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _offsetModifierState$2;

        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _len = altAxis === 'y' ? 'height' : 'width';

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement$1(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round(rect.width) / element.offsetWidth || 1;
      var scaleY = round(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    } // Returns the composite rect of an element relative to its offsetParent.
    // Composite means it takes into account transforms as well as layout.


    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var isOffsetParentAnElement = isHTMLElement$1(offsetParent);
      var offsetParentIsScaled = isHTMLElement$1(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement$1(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    function debounce(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(setOptionsAction) {
            var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options);
            state.scrollParents = {
              reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
              popper: listScrollParents(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            });
            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {
              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });

            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {
          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref) {
            var name = _ref.name,
                _ref$options = _ref.options,
                options = _ref$options === void 0 ? {} : _ref$options,
                effect = _ref.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }

    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers
    }); // eslint-disable-next-line import/no-unused-modules

    function getContainer$1(container) {
      return typeof container === 'function' ? container() : container;
    }

    /**
     * Portals provide a first-class way to render children into a DOM node
     * that exists outside the DOM hierarchy of the parent component.
     *
     * Demos:
     *
     * - [Portal](https://mui.com/base-ui/react-portal/)
     *
     * API:
     *
     * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)
     */
    const Portal = /*#__PURE__*/React__namespace.forwardRef(function Portal(props, forwardedRef) {
      const {
        children,
        container,
        disablePortal = false
      } = props;
      const [mountNode, setMountNode] = React__namespace.useState(null);
      // @ts-expect-error TODO upstream fix
      const handleRef = useForkRef( /*#__PURE__*/React__namespace.isValidElement(children) ? children.ref : null, forwardedRef);
      useEnhancedEffect$1(() => {
        if (!disablePortal) {
          setMountNode(getContainer$1(container) || document.body);
        }
      }, [container, disablePortal]);
      useEnhancedEffect$1(() => {
        if (mountNode && !disablePortal) {
          setRef(forwardedRef, mountNode);
          return () => {
            setRef(forwardedRef, null);
          };
        }
        return undefined;
      }, [forwardedRef, mountNode, disablePortal]);
      if (disablePortal) {
        if ( /*#__PURE__*/React__namespace.isValidElement(children)) {
          const newProps = {
            ref: handleRef
          };
          return /*#__PURE__*/React__namespace.cloneElement(children, newProps);
        }
        return /*#__PURE__*/jsxRuntime_1(React__namespace.Fragment, {
          children: children
        });
      }
      return /*#__PURE__*/jsxRuntime_1(React__namespace.Fragment, {
        children: mountNode ? /*#__PURE__*/ReactDOM__namespace.createPortal(children, mountNode) : mountNode
      });
    });

    function getPopperUtilityClass(slot) {
      return generateUtilityClass('MuiPopper', slot);
    }
    generateUtilityClasses('MuiPopper', ['root']);

    const _excluded$G = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"],
      _excluded2$7 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
    function flipPlacement(placement, direction) {
      if (direction === 'ltr') {
        return placement;
      }
      switch (placement) {
        case 'bottom-end':
          return 'bottom-start';
        case 'bottom-start':
          return 'bottom-end';
        case 'top-end':
          return 'top-start';
        case 'top-start':
          return 'top-end';
        default:
          return placement;
      }
    }
    function resolveAnchorEl$1(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }
    function isHTMLElement(element) {
      return element.nodeType !== undefined;
    }
    const useUtilityClasses$w = () => {
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, useClassNamesOverride(getPopperUtilityClass));
    };
    const defaultPopperOptions = {};
    const PopperTooltip = /*#__PURE__*/React__namespace.forwardRef(function PopperTooltip(props, forwardedRef) {
      var _slots$root;
      const {
          anchorEl,
          children,
          direction,
          disablePortal,
          modifiers,
          open,
          placement: initialPlacement,
          popperOptions,
          popperRef: popperRefProp,
          slotProps = {},
          slots = {},
          TransitionProps
          // @ts-ignore internal logic
          // prevent from spreading to DOM, it can come from the parent component e.g. Select.
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$G);
      const tooltipRef = React__namespace.useRef(null);
      const ownRef = useForkRef(tooltipRef, forwardedRef);
      const popperRef = React__namespace.useRef(null);
      const handlePopperRef = useForkRef(popperRef, popperRefProp);
      const handlePopperRefRef = React__namespace.useRef(handlePopperRef);
      useEnhancedEffect$1(() => {
        handlePopperRefRef.current = handlePopperRef;
      }, [handlePopperRef]);
      React__namespace.useImperativeHandle(popperRefProp, () => popperRef.current, []);
      const rtlPlacement = flipPlacement(initialPlacement, direction);
      /**
       * placement initialized from prop but can change during lifetime if modifiers.flip.
       * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
       */
      const [placement, setPlacement] = React__namespace.useState(rtlPlacement);
      const [resolvedAnchorElement, setResolvedAnchorElement] = React__namespace.useState(resolveAnchorEl$1(anchorEl));
      React__namespace.useEffect(() => {
        if (popperRef.current) {
          popperRef.current.forceUpdate();
        }
      });
      React__namespace.useEffect(() => {
        if (anchorEl) {
          setResolvedAnchorElement(resolveAnchorEl$1(anchorEl));
        }
      }, [anchorEl]);
      useEnhancedEffect$1(() => {
        if (!resolvedAnchorElement || !open) {
          return undefined;
        }
        const handlePopperUpdate = data => {
          setPlacement(data.placement);
        };
        let popperModifiers = [{
          name: 'preventOverflow',
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: 'flip',
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: 'onUpdate',
          enabled: true,
          phase: 'afterWrite',
          fn: ({
            state
          }) => {
            handlePopperUpdate(state);
          }
        }];
        if (modifiers != null) {
          popperModifiers = popperModifiers.concat(modifiers);
        }
        if (popperOptions && popperOptions.modifiers != null) {
          popperModifiers = popperModifiers.concat(popperOptions.modifiers);
        }
        const popper = createPopper(resolvedAnchorElement, tooltipRef.current, _extends({
          placement: rtlPlacement
        }, popperOptions, {
          modifiers: popperModifiers
        }));
        handlePopperRefRef.current(popper);
        return () => {
          popper.destroy();
          handlePopperRefRef.current(null);
        };
      }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
      const childProps = {
        placement: placement
      };
      if (TransitionProps !== null) {
        childProps.TransitionProps = TransitionProps;
      }
      const classes = useUtilityClasses$w();
      const Root = (_slots$root = slots.root) != null ? _slots$root : 'div';
      const rootProps = useSlotProps({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          role: 'tooltip',
          ref: ownRef
        },
        ownerState: props,
        className: classes.root
      });
      return /*#__PURE__*/jsxRuntime_1(Root, _extends({}, rootProps, {
        children: typeof children === 'function' ? children(childProps) : children
      }));
    });

    /**
     * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
     *
     * Demos:
     *
     * - [Popper](https://mui.com/base-ui/react-popper/)
     *
     * API:
     *
     * - [Popper API](https://mui.com/base-ui/react-popper/components-api/#popper)
     */
    const Popper$1 = /*#__PURE__*/React__namespace.forwardRef(function Popper(props, forwardedRef) {
      const {
          anchorEl,
          children,
          container: containerProp,
          direction = 'ltr',
          disablePortal = false,
          keepMounted = false,
          modifiers,
          open,
          placement = 'bottom',
          popperOptions = defaultPopperOptions,
          popperRef,
          style,
          transition = false,
          slotProps = {},
          slots = {}
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded2$7);
      const [exited, setExited] = React__namespace.useState(true);
      const handleEnter = () => {
        setExited(false);
      };
      const handleExited = () => {
        setExited(true);
      };
      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }

      // If the container prop is provided, use that
      // If the anchorEl prop is provided, use its parent body element as the container
      // If neither are provided let the Modal take care of choosing the container
      let container;
      if (containerProp) {
        container = containerProp;
      } else if (anchorEl) {
        const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);
        container = resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
      }
      const display = !open && keepMounted && (!transition || exited) ? 'none' : undefined;
      const transitionProps = transition ? {
        in: open,
        onEnter: handleEnter,
        onExited: handleExited
      } : undefined;
      return /*#__PURE__*/jsxRuntime_1(Portal, {
        disablePortal: disablePortal,
        container: container,
        children: /*#__PURE__*/jsxRuntime_1(PopperTooltip, _extends({
          anchorEl: anchorEl,
          direction: direction,
          disablePortal: disablePortal,
          modifiers: modifiers,
          ref: forwardedRef,
          open: transition ? !exited : open,
          placement: placement,
          popperOptions: popperOptions,
          popperRef: popperRef,
          slotProps: slotProps,
          slots: slots
        }, other, {
          style: _extends({
            // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
            position: 'fixed',
            // Fix Popper.js display issue
            top: 0,
            left: 0,
            display
          }, style),
          TransitionProps: transitionProps,
          children: children
        }))
      });
    });

    // Is a vertical scrollbar displayed?
    function isOverflowing(container) {
      const doc = ownerDocument(container);
      if (doc.body === container) {
        return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
      }
      return container.scrollHeight > container.clientHeight;
    }
    function ariaHidden(element, show) {
      if (show) {
        element.setAttribute('aria-hidden', 'true');
      } else {
        element.removeAttribute('aria-hidden');
      }
    }
    function getPaddingRight(element) {
      return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
    }
    function isAriaHiddenForbiddenOnElement(element) {
      // The forbidden HTML tags are the ones from ARIA specification that
      // can be children of body and can't have aria-hidden attribute.
      // cf. https://www.w3.org/TR/html-aria/#docconformance
      const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];
      const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
      const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
      return isForbiddenTagName || isInputHidden;
    }
    function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
      const blacklist = [mountElement, currentElement, ...elementsToExclude];
      [].forEach.call(container.children, element => {
        const isNotExcludedElement = blacklist.indexOf(element) === -1;
        const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
        if (isNotExcludedElement && isNotForbiddenElement) {
          ariaHidden(element, show);
        }
      });
    }
    function findIndexOf(items, callback) {
      let idx = -1;
      items.some((item, index) => {
        if (callback(item)) {
          idx = index;
          return true;
        }
        return false;
      });
      return idx;
    }
    function handleContainer(containerInfo, props) {
      const restoreStyle = [];
      const container = containerInfo.container;
      if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
          // Compute the size before applying overflow hidden to avoid any scroll jumps.
          const scrollbarSize = getScrollbarSize(ownerDocument(container));
          restoreStyle.push({
            value: container.style.paddingRight,
            property: 'padding-right',
            el: container
          });
          // Use computed style, here to get the real padding to add our scrollbar width.
          container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;

          // .mui-fixed is a global helper.
          const fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
          [].forEach.call(fixedElements, element => {
            restoreStyle.push({
              value: element.style.paddingRight,
              property: 'padding-right',
              el: element
            });
            element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
          });
        }
        let scrollContainer;
        if (container.parentNode instanceof DocumentFragment) {
          scrollContainer = ownerDocument(container).body;
        } else {
          // Support html overflow-y: auto for scroll stability between pages
          // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
          const parent = container.parentElement;
          const containerWindow = ownerWindow(container);
          scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
        }

        // Block the scroll even if no scrollbar is visible to account for mobile keyboard
        // screensize shrink.
        restoreStyle.push({
          value: scrollContainer.style.overflow,
          property: 'overflow',
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowX,
          property: 'overflow-x',
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowY,
          property: 'overflow-y',
          el: scrollContainer
        });
        scrollContainer.style.overflow = 'hidden';
      }
      const restore = () => {
        restoreStyle.forEach(({
          value,
          el,
          property
        }) => {
          if (value) {
            el.style.setProperty(property, value);
          } else {
            el.style.removeProperty(property);
          }
        });
      };
      return restore;
    }
    function getHiddenSiblings(container) {
      const hiddenSiblings = [];
      [].forEach.call(container.children, element => {
        if (element.getAttribute('aria-hidden') === 'true') {
          hiddenSiblings.push(element);
        }
      });
      return hiddenSiblings;
    }
    /**
     * @ignore - do not document.
     *
     * Proper state management for containers and the modals in those containers.
     * Simplified, but inspired by react-overlay's ModalManager class.
     * Used by the Modal to ensure proper styling of containers.
     */
    class ModalManager {
      constructor() {
        this.containers = void 0;
        this.modals = void 0;
        this.modals = [];
        this.containers = [];
      }
      add(modal, container) {
        let modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
          return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);

        // If the modal we are adding is already in the DOM.
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }
        const hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        const containerIndex = findIndexOf(this.containers, item => item.container === container);
        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }
        this.containers.push({
          modals: [modal],
          container,
          restore: null,
          hiddenSiblings
        });
        return modalIndex;
      }
      mount(modal, props) {
        const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
      remove(modal, ariaHiddenState = true) {
        const modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
          return modalIndex;
        }
        const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);

        // If that was the last modal in a container, clean up the container.
        if (containerInfo.modals.length === 0) {
          // The modal might be closed before it had the chance to be mounted in the DOM.
          if (containerInfo.restore) {
            containerInfo.restore();
          }
          if (modal.modalRef) {
            // In case the modal wasn't in the DOM yet.
            ariaHidden(modal.modalRef, ariaHiddenState);
          }
          ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
          this.containers.splice(containerIndex, 1);
        } else {
          // Otherwise make sure the next top modal is visible to a screen reader.
          const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
          // as soon as a modal is adding its modalRef is undefined. it can't set
          // aria-hidden because the dom element doesn't exist either
          // when modal was unmounted before modalRef gets null
          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }
        return modalIndex;
      }
      isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    }

    function getContainer(container) {
      return typeof container === 'function' ? container() : container;
    }
    function getHasTransition(children) {
      return children ? children.props.hasOwnProperty('in') : false;
    }

    // A modal manager used to track and manage the state of open Modals.
    // Modals don't open on the server so this won't conflict with concurrent requests.
    const defaultManager = new ModalManager();
    /**
     *
     * Demos:
     *
     * - [Modal](https://mui.com/base-ui/react-modal/#hook)
     *
     * API:
     *
     * - [useModal API](https://mui.com/base-ui/react-modal/hooks-api/#use-modal)
     */
    function useModal(parameters) {
      const {
        container,
        disableEscapeKeyDown = false,
        disableScrollLock = false,
        // @ts-ignore internal logic - Base UI supports the manager as a prop too
        manager = defaultManager,
        closeAfterTransition = false,
        onTransitionEnter,
        onTransitionExited,
        children,
        onClose,
        open,
        rootRef
      } = parameters;

      // @ts-ignore internal logic
      const modal = React__namespace.useRef({});
      const mountNodeRef = React__namespace.useRef(null);
      const modalRef = React__namespace.useRef(null);
      const handleRef = useForkRef(modalRef, rootRef);
      const [exited, setExited] = React__namespace.useState(!open);
      const hasTransition = getHasTransition(children);
      let ariaHiddenProp = true;
      if (parameters['aria-hidden'] === 'false' || parameters['aria-hidden'] === false) {
        ariaHiddenProp = false;
      }
      const getDoc = () => ownerDocument(mountNodeRef.current);
      const getModal = () => {
        modal.current.modalRef = modalRef.current;
        modal.current.mount = mountNodeRef.current;
        return modal.current;
      };
      const handleMounted = () => {
        manager.mount(getModal(), {
          disableScrollLock
        });

        // Fix a bug on Chrome where the scroll isn't initially 0.
        if (modalRef.current) {
          modalRef.current.scrollTop = 0;
        }
      };
      const handleOpen = useEventCallback(() => {
        const resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer);

        // The element was already mounted.
        if (modalRef.current) {
          handleMounted();
        }
      });
      const isTopModal = React__namespace.useCallback(() => manager.isTopModal(getModal()), [manager]);
      const handlePortalRef = useEventCallback(node => {
        mountNodeRef.current = node;
        if (!node) {
          return;
        }
        if (open && isTopModal()) {
          handleMounted();
        } else if (modalRef.current) {
          ariaHidden(modalRef.current, ariaHiddenProp);
        }
      });
      const handleClose = React__namespace.useCallback(() => {
        manager.remove(getModal(), ariaHiddenProp);
      }, [ariaHiddenProp, manager]);
      React__namespace.useEffect(() => {
        return () => {
          handleClose();
        };
      }, [handleClose]);
      React__namespace.useEffect(() => {
        if (open) {
          handleOpen();
        } else if (!hasTransition || !closeAfterTransition) {
          handleClose();
        }
      }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
      const createHandleKeyDown = otherHandlers => event => {
        var _otherHandlers$onKeyD;
        (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);

        // The handler doesn't take event.defaultPrevented into account:
        //
        // event.preventDefault() is meant to stop default behaviors like
        // clicking a checkbox to check it, hitting a button to submit a form,
        // and hitting left arrow to move the cursor in a text input etc.
        // Only special HTML elements have these default behaviors.
        if (event.key !== 'Escape' || !isTopModal()) {
          return;
        }
        if (!disableEscapeKeyDown) {
          // Swallow the event, in case someone is listening for the escape key on the body.
          event.stopPropagation();
          if (onClose) {
            onClose(event, 'escapeKeyDown');
          }
        }
      };
      const createHandleBackdropClick = otherHandlers => event => {
        var _otherHandlers$onClic;
        (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
        if (event.target !== event.currentTarget) {
          return;
        }
        if (onClose) {
          onClose(event, 'backdropClick');
        }
      };
      const getRootProps = (otherHandlers = {}) => {
        const propsEventHandlers = extractEventHandlers(parameters);

        // The custom event handlers shouldn't be spread on the root element
        delete propsEventHandlers.onTransitionEnter;
        delete propsEventHandlers.onTransitionExited;
        const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
        return _extends({
          role: 'presentation'
        }, externalEventHandlers, {
          onKeyDown: createHandleKeyDown(externalEventHandlers),
          ref: handleRef
        });
      };
      const getBackdropProps = (otherHandlers = {}) => {
        const externalEventHandlers = otherHandlers;
        return _extends({
          'aria-hidden': true
        }, externalEventHandlers, {
          onClick: createHandleBackdropClick(externalEventHandlers),
          open
        });
      };
      const getTransitionProps = () => {
        const handleEnter = () => {
          setExited(false);
          if (onTransitionEnter) {
            onTransitionEnter();
          }
        };
        const handleExited = () => {
          setExited(true);
          if (onTransitionExited) {
            onTransitionExited();
          }
          if (closeAfterTransition) {
            handleClose();
          }
        };
        return {
          onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
          onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
        };
      };
      return {
        getRootProps,
        getBackdropProps,
        getTransitionProps,
        rootRef: handleRef,
        portalRef: handlePortalRef,
        isTopModal,
        exited,
        hasTransition
      };
    }

    const _excluded$F = ["onChange", "maxRows", "minRows", "style", "value"];
    function getStyleValue(value) {
      return parseInt(value, 10) || 0;
    }
    const styles$2 = {
      shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: 'hidden',
        // Remove from the content flow
        position: 'absolute',
        // Ignore the scrollbar width
        overflow: 'hidden',
        height: 0,
        top: 0,
        left: 0,
        // Create a new layer, increase the isolation of the computed values
        transform: 'translateZ(0)'
      }
    };
    function isEmpty$1(obj) {
      return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;
    }

    /**
     *
     * Demos:
     *
     * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)
     * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)
     *
     * API:
     *
     * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)
     */
    const TextareaAutosize = /*#__PURE__*/React__namespace.forwardRef(function TextareaAutosize(props, forwardedRef) {
      const {
          onChange,
          maxRows,
          minRows = 1,
          style,
          value
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$F);
      const {
        current: isControlled
      } = React__namespace.useRef(value != null);
      const inputRef = React__namespace.useRef(null);
      const handleRef = useForkRef(forwardedRef, inputRef);
      const shadowRef = React__namespace.useRef(null);
      const renders = React__namespace.useRef(0);
      const [state, setState] = React__namespace.useState({
        outerHeightStyle: 0
      });
      const getUpdatedState = React__namespace.useCallback(() => {
        const input = inputRef.current;
        const containerWindow = ownerWindow(input);
        const computedStyle = containerWindow.getComputedStyle(input);

        // If input's width is shrunk and it's not visible, don't sync height.
        if (computedStyle.width === '0px') {
          return {
            outerHeightStyle: 0
          };
        }
        const inputShallow = shadowRef.current;
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || 'x';
        if (inputShallow.value.slice(-1) === '\n') {
          // Certain fonts which overflow the line height will cause the textarea
          // to report a different scrollHeight depending on whether the last line
          // is empty. Make it non-empty to avoid this issue.
          inputShallow.value += ' ';
        }
        const boxSizing = computedStyle.boxSizing;
        const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
        const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);

        // The height of the inner content
        const innerHeight = inputShallow.scrollHeight;

        // Measure height of a textarea with a single row
        inputShallow.value = 'x';
        const singleRowHeight = inputShallow.scrollHeight;

        // The height of the outer content
        let outerHeight = innerHeight;
        if (minRows) {
          outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
        }
        if (maxRows) {
          outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
        }
        outerHeight = Math.max(outerHeight, singleRowHeight);

        // Take the box sizing into account for applying this value as a style.
        const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
        const overflow = Math.abs(outerHeight - innerHeight) <= 1;
        return {
          outerHeightStyle,
          overflow
        };
      }, [maxRows, minRows, props.placeholder]);
      const updateState = (prevState, newState) => {
        const {
          outerHeightStyle,
          overflow
        } = newState;
        // Need a large enough difference to update the height.
        // This prevents infinite rendering loop.
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
          renders.current += 1;
          return {
            overflow,
            outerHeightStyle
          };
        }
        return prevState;
      };
      const syncHeight = React__namespace.useCallback(() => {
        const newState = getUpdatedState();
        if (isEmpty$1(newState)) {
          return;
        }
        setState(prevState => updateState(prevState, newState));
      }, [getUpdatedState]);
      useEnhancedEffect$1(() => {
        const syncHeightWithFlushSync = () => {
          const newState = getUpdatedState();
          if (isEmpty$1(newState)) {
            return;
          }

          // In React 18, state updates in a ResizeObserver's callback are happening after
          // the paint, this leads to an infinite rendering.
          //
          // Using flushSync ensures that the states is updated before the next pain.
          // Related issue - https://github.com/facebook/react/issues/24331
          ReactDOM__namespace.flushSync(() => {
            setState(prevState => updateState(prevState, newState));
          });
        };
        const handleResize = () => {
          renders.current = 0;
          syncHeightWithFlushSync();
        };
        // Workaround a "ResizeObserver loop completed with undelivered notifications" error
        // in test.
        // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38
        // Also see https://github.com/mui/mui-x/issues/8733
        let rAF;
        const debounceHandleResize = debounce$1(handleResize);
        const input = inputRef.current;
        const containerWindow = ownerWindow(input);
        containerWindow.addEventListener('resize', debounceHandleResize);
        let resizeObserver;
        if (typeof ResizeObserver !== 'undefined') {
          resizeObserver = new ResizeObserver(handleResize);
          resizeObserver.observe(input);
        }
        return () => {
          debounceHandleResize.clear();
          cancelAnimationFrame(rAF);
          containerWindow.removeEventListener('resize', debounceHandleResize);
          if (resizeObserver) {
            resizeObserver.disconnect();
          }
        };
      }, [getUpdatedState]);
      useEnhancedEffect$1(() => {
        syncHeight();
      });
      React__namespace.useEffect(() => {
        renders.current = 0;
      }, [value]);
      const handleChange = event => {
        renders.current = 0;
        if (!isControlled) {
          syncHeight();
        }
        if (onChange) {
          onChange(event);
        }
      };
      return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime_1("textarea", _extends({
          value: value,
          onChange: handleChange,
          ref: handleRef
          // Apply the rows prop to get a "correct" first SSR paint
          ,
          rows: minRows,
          style: _extends({
            height: state.outerHeightStyle,
            // Need a large enough difference to allow scrolling.
            // This prevents infinite rendering loop.
            overflow: state.overflow ? 'hidden' : undefined
          }, style)
        }, other)), /*#__PURE__*/jsxRuntime_1("textarea", {
          "aria-hidden": true,
          className: props.className,
          readOnly: true,
          ref: shadowRef,
          tabIndex: -1,
          style: _extends({}, styles$2.shadow, style, {
            paddingTop: 0,
            paddingBottom: 0
          })
        })]
      });
    });

    function formControlState({
      props,
      states,
      muiFormControl
    }) {
      return states.reduce((acc, state) => {
        acc[state] = props[state];
        if (muiFormControl) {
          if (typeof props[state] === 'undefined') {
            acc[state] = muiFormControl[state];
          }
        }
        return acc;
      }, {});
    }

    /**
     * @ignore - internal component.
     */
    const FormControlContext = /*#__PURE__*/React__namespace.createContext(undefined);
    var FormControlContext$1 = FormControlContext;

    function useFormControl() {
      return React__namespace.useContext(FormControlContext$1);
    }

    function GlobalStyles(props) {
      return /*#__PURE__*/jsxRuntime_1(GlobalStyles$1, _extends({}, props, {
        defaultTheme: defaultTheme$1,
        themeId: THEME_ID
      }));
    }

    // Supports determination of isControlled().
    // Controlled input accepts its current value as a prop.
    //
    // @see https://facebook.github.io/react/docs/forms.html#controlled-components
    // @param value
    // @returns {boolean} true if string (including '') or number (including zero)
    function hasValue(value) {
      return value != null && !(Array.isArray(value) && value.length === 0);
    }

    // Determine if field is empty or filled.
    // Response determines if label is presented above field or as placeholder.
    //
    // @param obj
    // @param SSR
    // @returns {boolean} False when not present or empty string.
    //                    True when any number or string with length.
    function isFilled(obj, SSR = false) {
      return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
    }

    // Determine if an Input is adorned on start.
    // It's corresponding to the left with LTR.
    //
    // @param obj
    // @returns {boolean} False when no adornments.
    //                    True when adorned at the start.
    function isAdornedStart(obj) {
      return obj.startAdornment;
    }

    function getInputBaseUtilityClass(slot) {
      return generateUtilityClass('MuiInputBase', slot);
    }
    const inputBaseClasses = generateUtilityClasses('MuiInputBase', ['root', 'formControl', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'colorSecondary', 'fullWidth', 'hiddenLabel', 'readOnly', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch', 'inputAdornedStart', 'inputAdornedEnd', 'inputHiddenLabel']);
    var inputBaseClasses$1 = inputBaseClasses;

    const _excluded$E = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
    const rootOverridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === 'small' && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
    };
    const inputOverridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.input, ownerState.size === 'small' && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === 'search' && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
    };
    const useUtilityClasses$v = ownerState => {
      const {
        classes,
        color,
        disabled,
        error,
        endAdornment,
        focused,
        formControl,
        fullWidth,
        hiddenLabel,
        multiline,
        readOnly,
        size,
        startAdornment,
        type
      } = ownerState;
      const slots = {
        root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', fullWidth && 'fullWidth', focused && 'focused', formControl && 'formControl', size && size !== 'medium' && `size${capitalize(size)}`, multiline && 'multiline', startAdornment && 'adornedStart', endAdornment && 'adornedEnd', hiddenLabel && 'hiddenLabel', readOnly && 'readOnly'],
        input: ['input', disabled && 'disabled', type === 'search' && 'inputTypeSearch', multiline && 'inputMultiline', size === 'small' && 'inputSizeSmall', hiddenLabel && 'inputHiddenLabel', startAdornment && 'inputAdornedStart', endAdornment && 'inputAdornedEnd', readOnly && 'readOnly']
      };
      return composeClasses(slots, getInputBaseUtilityClass, classes);
    };
    const InputBaseRoot = styled$1('div', {
      name: 'MuiInputBase',
      slot: 'Root',
      overridesResolver: rootOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends({}, theme.typography.body1, {
      color: (theme.vars || theme).palette.text.primary,
      lineHeight: '1.4375em',
      // 23px
      boxSizing: 'border-box',
      // Prevent padding issue with fullWidth.
      position: 'relative',
      cursor: 'text',
      display: 'inline-flex',
      alignItems: 'center',
      [`&.${inputBaseClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled,
        cursor: 'default'
      }
    }, ownerState.multiline && _extends({
      padding: '4px 0 5px'
    }, ownerState.size === 'small' && {
      paddingTop: 1
    }), ownerState.fullWidth && {
      width: '100%'
    }));
    const InputBaseComponent = styled$1('input', {
      name: 'MuiInputBase',
      slot: 'Input',
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => {
      const light = theme.palette.mode === 'light';
      const placeholder = _extends({
        color: 'currentColor'
      }, theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light ? 0.42 : 0.5
      }, {
        transition: theme.transitions.create('opacity', {
          duration: theme.transitions.duration.shorter
        })
      });
      const placeholderHidden = {
        opacity: '0 !important'
      };
      const placeholderVisible = theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light ? 0.42 : 0.5
      };
      return _extends({
        font: 'inherit',
        letterSpacing: 'inherit',
        color: 'currentColor',
        padding: '4px 0 5px',
        border: 0,
        boxSizing: 'content-box',
        background: 'none',
        height: '1.4375em',
        // Reset 23pxthe native input line-height
        margin: 0,
        // Reset for Safari
        WebkitTapHighlightColor: 'transparent',
        display: 'block',
        // Make the flex item shrink with Firefox
        minWidth: 0,
        width: '100%',
        // Fix IE11 width issue
        animationName: 'mui-auto-fill-cancel',
        animationDuration: '10ms',
        '&::-webkit-input-placeholder': placeholder,
        '&::-moz-placeholder': placeholder,
        // Firefox 19+
        '&:-ms-input-placeholder': placeholder,
        // IE11
        '&::-ms-input-placeholder': placeholder,
        // Edge
        '&:focus': {
          outline: 0
        },
        // Reset Firefox invalid required input style
        '&:invalid': {
          boxShadow: 'none'
        },
        '&::-webkit-search-decoration': {
          // Remove the padding when type=search.
          WebkitAppearance: 'none'
        },
        // Show and hide the placeholder logic
        [`label[data-shrink=false] + .${inputBaseClasses$1.formControl} &`]: {
          '&::-webkit-input-placeholder': placeholderHidden,
          '&::-moz-placeholder': placeholderHidden,
          // Firefox 19+
          '&:-ms-input-placeholder': placeholderHidden,
          // IE11
          '&::-ms-input-placeholder': placeholderHidden,
          // Edge
          '&:focus::-webkit-input-placeholder': placeholderVisible,
          '&:focus::-moz-placeholder': placeholderVisible,
          // Firefox 19+
          '&:focus:-ms-input-placeholder': placeholderVisible,
          // IE11
          '&:focus::-ms-input-placeholder': placeholderVisible // Edge
        },

        [`&.${inputBaseClasses$1.disabled}`]: {
          opacity: 1,
          // Reset iOS opacity
          WebkitTextFillColor: (theme.vars || theme).palette.text.disabled // Fix opacity Safari bug
        },

        '&:-webkit-autofill': {
          animationDuration: '5000s',
          animationName: 'mui-auto-fill'
        }
      }, ownerState.size === 'small' && {
        paddingTop: 1
      }, ownerState.multiline && {
        height: 'auto',
        resize: 'none',
        padding: 0,
        paddingTop: 0
      }, ownerState.type === 'search' && {
        // Improve type search style.
        MozAppearance: 'textfield'
      });
    });
    const inputGlobalStyles = /*#__PURE__*/jsxRuntime_1(GlobalStyles, {
      styles: {
        '@keyframes mui-auto-fill': {
          from: {
            display: 'block'
          }
        },
        '@keyframes mui-auto-fill-cancel': {
          from: {
            display: 'block'
          }
        }
      }
    });

    /**
     * `InputBase` contains as few styles as possible.
     * It aims to be a simple building block for creating an input.
     * It contains a load of style reset and some state logic.
     */
    const InputBase = /*#__PURE__*/React__namespace.forwardRef(function InputBase(inProps, ref) {
      var _slotProps$input;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiInputBase'
      });
      const {
          'aria-describedby': ariaDescribedby,
          autoComplete,
          autoFocus,
          className,
          components = {},
          componentsProps = {},
          defaultValue,
          disabled,
          disableInjectingGlobalStyles,
          endAdornment,
          fullWidth = false,
          id,
          inputComponent = 'input',
          inputProps: inputPropsProp = {},
          inputRef: inputRefProp,
          maxRows,
          minRows,
          multiline = false,
          name,
          onBlur,
          onChange,
          onClick,
          onFocus,
          onKeyDown,
          onKeyUp,
          placeholder,
          readOnly,
          renderSuffix,
          rows,
          slotProps = {},
          slots = {},
          startAdornment,
          type = 'text',
          value: valueProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$E);
      const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
      const {
        current: isControlled
      } = React__namespace.useRef(value != null);
      const inputRef = React__namespace.useRef();
      const handleInputRefWarning = React__namespace.useCallback(instance => {
      }, []);
      const handleInputRef = useForkRef(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
      const [focused, setFocused] = React__namespace.useState(false);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['color', 'disabled', 'error', 'hiddenLabel', 'size', 'required', 'filled']
      });
      fcs.focused = muiFormControl ? muiFormControl.focused : focused;

      // The blur won't fire when the disabled state is set on a focused input.
      // We need to book keep the focused state manually.
      React__namespace.useEffect(() => {
        if (!muiFormControl && disabled && focused) {
          setFocused(false);
          if (onBlur) {
            onBlur();
          }
        }
      }, [muiFormControl, disabled, focused, onBlur]);
      const onFilled = muiFormControl && muiFormControl.onFilled;
      const onEmpty = muiFormControl && muiFormControl.onEmpty;
      const checkDirty = React__namespace.useCallback(obj => {
        if (isFilled(obj)) {
          if (onFilled) {
            onFilled();
          }
        } else if (onEmpty) {
          onEmpty();
        }
      }, [onFilled, onEmpty]);
      useEnhancedEffect$1(() => {
        if (isControlled) {
          checkDirty({
            value
          });
        }
      }, [value, checkDirty, isControlled]);
      const handleFocus = event => {
        // Fix a bug with IE11 where the focus/blur events are triggered
        // while the component is disabled.
        if (fcs.disabled) {
          event.stopPropagation();
          return;
        }
        if (onFocus) {
          onFocus(event);
        }
        if (inputPropsProp.onFocus) {
          inputPropsProp.onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        } else {
          setFocused(true);
        }
      };
      const handleBlur = event => {
        if (onBlur) {
          onBlur(event);
        }
        if (inputPropsProp.onBlur) {
          inputPropsProp.onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        } else {
          setFocused(false);
        }
      };
      const handleChange = (event, ...args) => {
        if (!isControlled) {
          const element = event.target || inputRef.current;
          if (element == null) {
            throw new Error(formatMuiErrorMessage(1));
          }
          checkDirty({
            value: element.value
          });
        }
        if (inputPropsProp.onChange) {
          inputPropsProp.onChange(event, ...args);
        }

        // Perform in the willUpdate
        if (onChange) {
          onChange(event, ...args);
        }
      };

      // Check the input state on mount, in case it was filled by the user
      // or auto filled by the browser before the hydration (for SSR).
      React__namespace.useEffect(() => {
        checkDirty(inputRef.current);
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, []);
      const handleClick = event => {
        if (inputRef.current && event.currentTarget === event.target) {
          inputRef.current.focus();
        }
        if (onClick) {
          onClick(event);
        }
      };
      let InputComponent = inputComponent;
      let inputProps = inputPropsProp;
      if (multiline && InputComponent === 'input') {
        if (rows) {
          inputProps = _extends({
            type: undefined,
            minRows: rows,
            maxRows: rows
          }, inputProps);
        } else {
          inputProps = _extends({
            type: undefined,
            maxRows,
            minRows
          }, inputProps);
        }
        InputComponent = TextareaAutosize;
      }
      const handleAutoFill = event => {
        // Provide a fake value as Chrome might not let you access it for security reasons.
        checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
          value: 'x'
        });
      };
      React__namespace.useEffect(() => {
        if (muiFormControl) {
          muiFormControl.setAdornedStart(Boolean(startAdornment));
        }
      }, [muiFormControl, startAdornment]);
      const ownerState = _extends({}, props, {
        color: fcs.color || 'primary',
        disabled: fcs.disabled,
        endAdornment,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        startAdornment,
        type
      });
      const classes = useUtilityClasses$v(ownerState);
      const Root = slots.root || components.Root || InputBaseRoot;
      const rootProps = slotProps.root || componentsProps.root || {};
      const Input = slots.input || components.Input || InputBaseComponent;
      inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
      return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
        children: [!disableInjectingGlobalStyles && inputGlobalStyles, /*#__PURE__*/jsxRuntime_2(Root, _extends({}, rootProps, !isHostComponent(Root) && {
          ownerState: _extends({}, ownerState, rootProps.ownerState)
        }, {
          ref: ref,
          onClick: handleClick
        }, other, {
          className: clsx(classes.root, rootProps.className, className, readOnly && 'MuiInputBase-readOnly'),
          children: [startAdornment, /*#__PURE__*/jsxRuntime_1(FormControlContext$1.Provider, {
            value: null,
            children: /*#__PURE__*/jsxRuntime_1(Input, _extends({
              ownerState: ownerState,
              "aria-invalid": fcs.error,
              "aria-describedby": ariaDescribedby,
              autoComplete: autoComplete,
              autoFocus: autoFocus,
              defaultValue: defaultValue,
              disabled: fcs.disabled,
              id: id,
              onAnimationStart: handleAutoFill,
              name: name,
              placeholder: placeholder,
              readOnly: readOnly,
              required: fcs.required,
              rows: rows,
              value: value,
              onKeyDown: onKeyDown,
              onKeyUp: onKeyUp,
              type: type
            }, inputProps, !isHostComponent(Input) && {
              as: InputComponent,
              ownerState: _extends({}, ownerState, inputProps.ownerState)
            }, {
              ref: handleInputRef,
              className: clsx(classes.input, inputProps.className, readOnly && 'MuiInputBase-readOnly'),
              onBlur: handleBlur,
              onChange: handleChange,
              onFocus: handleFocus
            }))
          }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
            startAdornment
          })) : null]
        }))]
      });
    });
    var InputBase$1 = InputBase;

    function getInputUtilityClass(slot) {
      return generateUtilityClass('MuiInput', slot);
    }
    const inputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiInput', ['root', 'underline', 'input']));
    var inputClasses$1 = inputClasses;

    const _excluded$D = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
    const useUtilityClasses$u = ownerState => {
      const {
        classes,
        disableUnderline
      } = ownerState;
      const slots = {
        root: ['root', !disableUnderline && 'underline'],
        input: ['input']
      };
      const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const InputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiInput',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
      }
    })(({
      theme,
      ownerState
    }) => {
      const light = theme.palette.mode === 'light';
      let bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      if (theme.vars) {
        bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
      }
      return _extends({
        position: 'relative'
      }, ownerState.formControl && {
        'label + &': {
          marginTop: 16
        }
      }, !ownerState.disableUnderline && {
        '&:after': {
          borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: 'absolute',
          right: 0,
          transform: 'scaleX(0)',
          transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: 'none' // Transparent to the hover style.
        },

        [`&.${inputClasses$1.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: 'scaleX(1) translateX(0)'
        },
        [`&.${inputClasses$1.error}`]: {
          '&:before, &:after': {
            borderBottomColor: (theme.vars || theme).palette.error.main
          }
        },
        '&:before': {
          borderBottom: `1px solid ${bottomLineColor}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: 'absolute',
          right: 0,
          transition: theme.transitions.create('border-bottom-color', {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: 'none' // Transparent to the hover style.
        },

        [`&:hover:not(.${inputClasses$1.disabled}, .${inputClasses$1.error}):before`]: {
          borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            borderBottom: `1px solid ${bottomLineColor}`
          }
        },
        [`&.${inputClasses$1.disabled}:before`]: {
          borderBottomStyle: 'dotted'
        }
      });
    });
    const InputInput = styled$1(InputBaseComponent, {
      name: 'MuiInput',
      slot: 'Input',
      overridesResolver: inputOverridesResolver
    })({});
    const Input = /*#__PURE__*/React__namespace.forwardRef(function Input(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiInput'
      });
      const {
          disableUnderline,
          components = {},
          componentsProps: componentsPropsProp,
          fullWidth = false,
          inputComponent = 'input',
          multiline = false,
          slotProps,
          slots = {},
          type = 'text'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$D);
      const classes = useUtilityClasses$u(props);
      const ownerState = {
        disableUnderline
      };
      const inputComponentsProps = {
        root: {
          ownerState
        }
      };
      const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
      return /*#__PURE__*/jsxRuntime_1(InputBase$1, _extends({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        slotProps: componentsProps,
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other, {
        classes: classes
      }));
    });
    Input.muiName = 'Input';
    var Input$1 = Input;

    function getFilledInputUtilityClass(slot) {
      return generateUtilityClass('MuiFilledInput', slot);
    }
    const filledInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiFilledInput', ['root', 'underline', 'input']));
    var filledInputClasses$1 = filledInputClasses;

    const _excluded$C = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
    const useUtilityClasses$t = ownerState => {
      const {
        classes,
        disableUnderline
      } = ownerState;
      const slots = {
        root: ['root', !disableUnderline && 'underline'],
        input: ['input']
      };
      const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const FilledInputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiFilledInput',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _palette;
      const light = theme.palette.mode === 'light';
      const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      const backgroundColor = light ? 'rgba(0, 0, 0, 0.06)' : 'rgba(255, 255, 255, 0.09)';
      const hoverBackground = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.13)';
      const disabledBackground = light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)';
      return _extends({
        position: 'relative',
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor,
        borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
        borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
        transition: theme.transitions.create('background-color', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        '&:hover': {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
          }
        },
        [`&.${filledInputClasses$1.focused}`]: {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
        },
        [`&.${filledInputClasses$1.disabled}`]: {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
        }
      }, !ownerState.disableUnderline && {
        '&:after': {
          borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || 'primary']) == null ? void 0 : _palette.main}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: 'absolute',
          right: 0,
          transform: 'scaleX(0)',
          transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: 'none' // Transparent to the hover style.
        },

        [`&.${filledInputClasses$1.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: 'scaleX(1) translateX(0)'
        },
        [`&.${filledInputClasses$1.error}`]: {
          '&:before, &:after': {
            borderBottomColor: (theme.vars || theme).palette.error.main
          }
        },
        '&:before': {
          borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: 'absolute',
          right: 0,
          transition: theme.transitions.create('border-bottom-color', {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: 'none' // Transparent to the hover style.
        },

        [`&:hover:not(.${filledInputClasses$1.disabled}, .${filledInputClasses$1.error}):before`]: {
          borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
        },
        [`&.${filledInputClasses$1.disabled}:before`]: {
          borderBottomStyle: 'dotted'
        }
      }, ownerState.startAdornment && {
        paddingLeft: 12
      }, ownerState.endAdornment && {
        paddingRight: 12
      }, ownerState.multiline && _extends({
        padding: '25px 12px 8px'
      }, ownerState.size === 'small' && {
        paddingTop: 21,
        paddingBottom: 4
      }, ownerState.hiddenLabel && {
        paddingTop: 16,
        paddingBottom: 17
      }));
    });
    const FilledInputInput = styled$1(InputBaseComponent, {
      name: 'MuiFilledInput',
      slot: 'Input',
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends({
      paddingTop: 25,
      paddingRight: 12,
      paddingBottom: 8,
      paddingLeft: 12
    }, !theme.vars && {
      '&:-webkit-autofill': {
        WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
        WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
        caretColor: theme.palette.mode === 'light' ? null : '#fff',
        borderTopLeftRadius: 'inherit',
        borderTopRightRadius: 'inherit'
      }
    }, theme.vars && {
      '&:-webkit-autofill': {
        borderTopLeftRadius: 'inherit',
        borderTopRightRadius: 'inherit'
      },
      [theme.getColorSchemeSelector('dark')]: {
        '&:-webkit-autofill': {
          WebkitBoxShadow: '0 0 0 100px #266798 inset',
          WebkitTextFillColor: '#fff',
          caretColor: '#fff'
        }
      }
    }, ownerState.size === 'small' && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }, ownerState.multiline && {
      paddingTop: 0,
      paddingBottom: 0,
      paddingLeft: 0,
      paddingRight: 0
    }, ownerState.startAdornment && {
      paddingLeft: 0
    }, ownerState.endAdornment && {
      paddingRight: 0
    }, ownerState.hiddenLabel && ownerState.size === 'small' && {
      paddingTop: 8,
      paddingBottom: 9
    }));
    const FilledInput = /*#__PURE__*/React__namespace.forwardRef(function FilledInput(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFilledInput'
      });
      const {
          components = {},
          componentsProps: componentsPropsProp,
          fullWidth = false,
          // declare here to prevent spreading to DOM
          inputComponent = 'input',
          multiline = false,
          slotProps,
          slots = {},
          type = 'text'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$C);
      const ownerState = _extends({}, props, {
        fullWidth,
        inputComponent,
        multiline,
        type
      });
      const classes = useUtilityClasses$t(props);
      const filledInputComponentsProps = {
        root: {
          ownerState
        },
        input: {
          ownerState
        }
      };
      const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
      return /*#__PURE__*/jsxRuntime_1(InputBase$1, _extends({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        componentsProps: componentsProps,
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other, {
        classes: classes
      }));
    });
    FilledInput.muiName = 'Input';
    var FilledInput$1 = FilledInput;

    var _span$3;
    const _excluded$B = ["children", "classes", "className", "label", "notched"];
    const NotchedOutlineRoot$1 = styled$1('fieldset')({
      textAlign: 'left',
      position: 'absolute',
      bottom: 0,
      right: 0,
      top: -5,
      left: 0,
      margin: 0,
      padding: '0 8px',
      pointerEvents: 'none',
      borderRadius: 'inherit',
      borderStyle: 'solid',
      borderWidth: 1,
      overflow: 'hidden',
      minWidth: '0%'
    });
    const NotchedOutlineLegend = styled$1('legend')(({
      ownerState,
      theme
    }) => _extends({
      float: 'unset',
      // Fix conflict with bootstrap
      width: 'auto',
      // Fix conflict with bootstrap
      overflow: 'hidden'
    }, !ownerState.withLabel && {
      padding: 0,
      lineHeight: '11px',
      // sync with `height` in `legend` styles
      transition: theme.transitions.create('width', {
        duration: 150,
        easing: theme.transitions.easing.easeOut
      })
    }, ownerState.withLabel && _extends({
      display: 'block',
      // Fix conflict with normalize.css and sanitize.css
      padding: 0,
      height: 11,
      // sync with `lineHeight` in `legend` styles
      fontSize: '0.75em',
      visibility: 'hidden',
      maxWidth: 0.01,
      transition: theme.transitions.create('max-width', {
        duration: 50,
        easing: theme.transitions.easing.easeOut
      }),
      whiteSpace: 'nowrap',
      '& > span': {
        paddingLeft: 5,
        paddingRight: 5,
        display: 'inline-block',
        opacity: 0,
        visibility: 'visible'
      }
    }, ownerState.notched && {
      maxWidth: '100%',
      transition: theme.transitions.create('max-width', {
        duration: 100,
        easing: theme.transitions.easing.easeOut,
        delay: 50
      })
    })));

    /**
     * @ignore - internal component.
     */
    function NotchedOutline(props) {
      const {
          className,
          label,
          notched
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$B);
      const withLabel = label != null && label !== '';
      const ownerState = _extends({}, props, {
        notched,
        withLabel
      });
      return /*#__PURE__*/jsxRuntime_1(NotchedOutlineRoot$1, _extends({
        "aria-hidden": true,
        className: className,
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime_1(NotchedOutlineLegend, {
          ownerState: ownerState,
          children: withLabel ? /*#__PURE__*/jsxRuntime_1("span", {
            children: label
          }) : // notranslate needed while Google Translate will not fix zero-width space issue
          _span$3 || (_span$3 = /*#__PURE__*/jsxRuntime_1("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        })
      }));
    }

    function getOutlinedInputUtilityClass(slot) {
      return generateUtilityClass('MuiOutlinedInput', slot);
    }
    const outlinedInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiOutlinedInput', ['root', 'notchedOutline', 'input']));
    var outlinedInputClasses$1 = outlinedInputClasses;

    const _excluded$A = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
    const useUtilityClasses$s = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        notchedOutline: ['notchedOutline'],
        input: ['input']
      };
      const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const OutlinedInputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiOutlinedInput',
      slot: 'Root',
      overridesResolver: rootOverridesResolver
    })(({
      theme,
      ownerState
    }) => {
      const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
      return _extends({
        position: 'relative',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.text.primary
        },
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
            borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
          }
        },
        [`&.${outlinedInputClasses$1.focused} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette[ownerState.color].main,
          borderWidth: 2
        },
        [`&.${outlinedInputClasses$1.error} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.error.main
        },
        [`&.${outlinedInputClasses$1.disabled} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.action.disabled
        }
      }, ownerState.startAdornment && {
        paddingLeft: 14
      }, ownerState.endAdornment && {
        paddingRight: 14
      }, ownerState.multiline && _extends({
        padding: '16.5px 14px'
      }, ownerState.size === 'small' && {
        padding: '8.5px 14px'
      }));
    });
    const NotchedOutlineRoot = styled$1(NotchedOutline, {
      name: 'MuiOutlinedInput',
      slot: 'NotchedOutline',
      overridesResolver: (props, styles) => styles.notchedOutline
    })(({
      theme
    }) => {
      const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
      return {
        borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
      };
    });
    const OutlinedInputInput = styled$1(InputBaseComponent, {
      name: 'MuiOutlinedInput',
      slot: 'Input',
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends({
      padding: '16.5px 14px'
    }, !theme.vars && {
      '&:-webkit-autofill': {
        WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
        WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
        caretColor: theme.palette.mode === 'light' ? null : '#fff',
        borderRadius: 'inherit'
      }
    }, theme.vars && {
      '&:-webkit-autofill': {
        borderRadius: 'inherit'
      },
      [theme.getColorSchemeSelector('dark')]: {
        '&:-webkit-autofill': {
          WebkitBoxShadow: '0 0 0 100px #266798 inset',
          WebkitTextFillColor: '#fff',
          caretColor: '#fff'
        }
      }
    }, ownerState.size === 'small' && {
      padding: '8.5px 14px'
    }, ownerState.multiline && {
      padding: 0
    }, ownerState.startAdornment && {
      paddingLeft: 0
    }, ownerState.endAdornment && {
      paddingRight: 0
    }));
    const OutlinedInput = /*#__PURE__*/React__namespace.forwardRef(function OutlinedInput(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiOutlinedInput'
      });
      const {
          components = {},
          fullWidth = false,
          inputComponent = 'input',
          label,
          multiline = false,
          notched,
          slots = {},
          type = 'text'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$A);
      const classes = useUtilityClasses$s(props);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['color', 'disabled', 'error', 'focused', 'hiddenLabel', 'size', 'required']
      });
      const ownerState = _extends({}, props, {
        color: fcs.color || 'primary',
        disabled: fcs.disabled,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        type
      });
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
      return /*#__PURE__*/jsxRuntime_1(InputBase$1, _extends({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        renderSuffix: state => /*#__PURE__*/jsxRuntime_1(NotchedOutlineRoot, {
          ownerState: ownerState,
          className: classes.notchedOutline,
          label: label != null && label !== '' && fcs.required ? _React$Fragment || (_React$Fragment = /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
            children: [label, "\u2009", '*']
          })) : label,
          notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other, {
        classes: _extends({}, classes, {
          notchedOutline: null
        })
      }));
    });
    OutlinedInput.muiName = 'Input';
    var OutlinedInput$1 = OutlinedInput;

    function getFormLabelUtilityClasses(slot) {
      return generateUtilityClass('MuiFormLabel', slot);
    }
    const formLabelClasses = generateUtilityClasses('MuiFormLabel', ['root', 'colorSecondary', 'focused', 'disabled', 'error', 'filled', 'required', 'asterisk']);
    var formLabelClasses$1 = formLabelClasses;

    const _excluded$z = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
    const useUtilityClasses$r = ownerState => {
      const {
        classes,
        color,
        focused,
        disabled,
        error,
        filled,
        required
      } = ownerState;
      const slots = {
        root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', filled && 'filled', focused && 'focused', required && 'required'],
        asterisk: ['asterisk', error && 'error']
      };
      return composeClasses(slots, getFormLabelUtilityClasses, classes);
    };
    const FormLabelRoot = styled$1('label', {
      name: 'MuiFormLabel',
      slot: 'Root',
      overridesResolver: ({
        ownerState
      }, styles) => {
        return _extends({}, styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled);
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      color: (theme.vars || theme).palette.text.secondary
    }, theme.typography.body1, {
      lineHeight: '1.4375em',
      padding: 0,
      position: 'relative',
      [`&.${formLabelClasses$1.focused}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      },
      [`&.${formLabelClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`&.${formLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const AsteriskComponent = styled$1('span', {
      name: 'MuiFormLabel',
      slot: 'Asterisk',
      overridesResolver: (props, styles) => styles.asterisk
    })(({
      theme
    }) => ({
      [`&.${formLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const FormLabel = /*#__PURE__*/React__namespace.forwardRef(function FormLabel(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFormLabel'
      });
      const {
          children,
          className,
          component = 'label'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$z);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
      });
      const ownerState = _extends({}, props, {
        color: fcs.color || 'primary',
        component,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      });
      const classes = useUtilityClasses$r(ownerState);
      return /*#__PURE__*/jsxRuntime_2(FormLabelRoot, _extends({
        as: component,
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other, {
        children: [children, fcs.required && /*#__PURE__*/jsxRuntime_2(AsteriskComponent, {
          ownerState: ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", '*']
        })]
      }));
    });
    var FormLabel$1 = FormLabel;

    function getInputLabelUtilityClasses(slot) {
      return generateUtilityClass('MuiInputLabel', slot);
    }
    generateUtilityClasses('MuiInputLabel', ['root', 'focused', 'disabled', 'error', 'required', 'asterisk', 'formControl', 'sizeSmall', 'shrink', 'animated', 'standard', 'filled', 'outlined']);

    const _excluded$y = ["disableAnimation", "margin", "shrink", "variant", "className"];
    const useUtilityClasses$q = ownerState => {
      const {
        classes,
        formControl,
        size,
        shrink,
        disableAnimation,
        variant,
        required
      } = ownerState;
      const slots = {
        root: ['root', formControl && 'formControl', !disableAnimation && 'animated', shrink && 'shrink', size && size !== 'normal' && `size${capitalize(size)}`, variant],
        asterisk: [required && 'asterisk']
      };
      const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
      return _extends({}, classes, composedClasses);
    };
    const InputLabelRoot = styled$1(FormLabel$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiInputLabel',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${formLabelClasses$1.asterisk}`]: styles.asterisk
        }, styles.root, ownerState.formControl && styles.formControl, ownerState.size === 'small' && styles.sizeSmall, ownerState.shrink && styles.shrink, !ownerState.disableAnimation && styles.animated, styles[ownerState.variant]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'block',
      transformOrigin: 'top left',
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      maxWidth: '100%'
    }, ownerState.formControl && {
      position: 'absolute',
      left: 0,
      top: 0,
      // slight alteration to spec spacing to match visual spec result
      transform: 'translate(0, 20px) scale(1)'
    }, ownerState.size === 'small' && {
      // Compensation for the `Input.inputSizeSmall` style.
      transform: 'translate(0, 17px) scale(1)'
    }, ownerState.shrink && {
      transform: 'translate(0, -1.5px) scale(0.75)',
      transformOrigin: 'top left',
      maxWidth: '133%'
    }, !ownerState.disableAnimation && {
      transition: theme.transitions.create(['color', 'transform', 'max-width'], {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      })
    }, ownerState.variant === 'filled' && _extends({
      // Chrome's autofill feature gives the input field a yellow background.
      // Since the input field is behind the label in the HTML tree,
      // the input field is drawn last and hides the label with an opaque background color.
      // zIndex: 1 will raise the label above opaque background-colors of input.
      zIndex: 1,
      pointerEvents: 'none',
      transform: 'translate(12px, 16px) scale(1)',
      maxWidth: 'calc(100% - 24px)'
    }, ownerState.size === 'small' && {
      transform: 'translate(12px, 13px) scale(1)'
    }, ownerState.shrink && _extends({
      userSelect: 'none',
      pointerEvents: 'auto',
      transform: 'translate(12px, 7px) scale(0.75)',
      maxWidth: 'calc(133% - 24px)'
    }, ownerState.size === 'small' && {
      transform: 'translate(12px, 4px) scale(0.75)'
    })), ownerState.variant === 'outlined' && _extends({
      // see comment above on filled.zIndex
      zIndex: 1,
      pointerEvents: 'none',
      transform: 'translate(14px, 16px) scale(1)',
      maxWidth: 'calc(100% - 24px)'
    }, ownerState.size === 'small' && {
      transform: 'translate(14px, 9px) scale(1)'
    }, ownerState.shrink && {
      userSelect: 'none',
      pointerEvents: 'auto',
      // Theoretically, we should have (8+5)*2/0.75 = 34px
      // but it feels a better when it bleeds a bit on the left, so 32px.
      maxWidth: 'calc(133% - 32px)',
      transform: 'translate(14px, -9px) scale(0.75)'
    })));
    const InputLabel = /*#__PURE__*/React__namespace.forwardRef(function InputLabel(inProps, ref) {
      const props = useThemeProps({
        name: 'MuiInputLabel',
        props: inProps
      });
      const {
          disableAnimation = false,
          shrink: shrinkProp,
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$y);
      const muiFormControl = useFormControl();
      let shrink = shrinkProp;
      if (typeof shrink === 'undefined' && muiFormControl) {
        shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
      }
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['size', 'variant', 'required']
      });
      const ownerState = _extends({}, props, {
        disableAnimation,
        formControl: muiFormControl,
        shrink,
        size: fcs.size,
        variant: fcs.variant,
        required: fcs.required
      });
      const classes = useUtilityClasses$q(ownerState);
      return /*#__PURE__*/jsxRuntime_1(InputLabelRoot, _extends({
        "data-shrink": shrink,
        ownerState: ownerState,
        ref: ref,
        className: clsx(classes.root, className)
      }, other, {
        classes: classes
      }));
    });
    var InputLabel$1 = InputLabel;

    function getFormControlUtilityClasses(slot) {
      return generateUtilityClass('MuiFormControl', slot);
    }
    generateUtilityClasses('MuiFormControl', ['root', 'marginNone', 'marginNormal', 'marginDense', 'fullWidth', 'disabled']);

    const _excluded$x = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
    const useUtilityClasses$p = ownerState => {
      const {
        classes,
        margin,
        fullWidth
      } = ownerState;
      const slots = {
        root: ['root', margin !== 'none' && `margin${capitalize(margin)}`, fullWidth && 'fullWidth']
      };
      return composeClasses(slots, getFormControlUtilityClasses, classes);
    };
    const FormControlRoot = styled$1('div', {
      name: 'MuiFormControl',
      slot: 'Root',
      overridesResolver: ({
        ownerState
      }, styles) => {
        return _extends({}, styles.root, styles[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
      }
    })(({
      ownerState
    }) => _extends({
      display: 'inline-flex',
      flexDirection: 'column',
      position: 'relative',
      // Reset fieldset default style.
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: 'top'
    }, ownerState.margin === 'normal' && {
      marginTop: 16,
      marginBottom: 8
    }, ownerState.margin === 'dense' && {
      marginTop: 8,
      marginBottom: 4
    }, ownerState.fullWidth && {
      width: '100%'
    }));

    /**
     * Provides context such as filled/focused/error/required for form inputs.
     * Relying on the context provides high flexibility and ensures that the state always stays
     * consistent across the children of the `FormControl`.
     * This context is used by the following components:
     *
     *  - FormLabel
     *  - FormHelperText
     *  - Input
     *  - InputLabel
     *
     * You can find one composition example below and more going to [the demos](/material-ui/react-text-field/#components).
     *
     * ```jsx
     * <FormControl>
     *   <InputLabel htmlFor="my-input">Email address</InputLabel>
     *   <Input id="my-input" aria-describedby="my-helper-text" />
     *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
     * </FormControl>
     * ```
     *
     * ⚠️ Only one `InputBase` can be used within a FormControl because it creates visual inconsistencies.
     * For instance, only one input can be focused at the same time, the state shouldn't be shared.
     */
    const FormControl = /*#__PURE__*/React__namespace.forwardRef(function FormControl(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFormControl'
      });
      const {
          children,
          className,
          color = 'primary',
          component = 'div',
          disabled = false,
          error = false,
          focused: visuallyFocused,
          fullWidth = false,
          hiddenLabel = false,
          margin = 'none',
          required = false,
          size = 'medium',
          variant = 'outlined'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$x);
      const ownerState = _extends({}, props, {
        color,
        component,
        disabled,
        error,
        fullWidth,
        hiddenLabel,
        margin,
        required,
        size,
        variant
      });
      const classes = useUtilityClasses$p(ownerState);
      const [adornedStart, setAdornedStart] = React__namespace.useState(() => {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        let initialAdornedStart = false;
        if (children) {
          React__namespace.Children.forEach(children, child => {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }
            const input = isMuiElement(child, ['Select']) ? child.props.input : child;
            if (input && isAdornedStart(input.props)) {
              initialAdornedStart = true;
            }
          });
        }
        return initialAdornedStart;
      });
      const [filled, setFilled] = React__namespace.useState(() => {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        let initialFilled = false;
        if (children) {
          React__namespace.Children.forEach(children, child => {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }
            if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
              initialFilled = true;
            }
          });
        }
        return initialFilled;
      });
      const [focusedState, setFocused] = React__namespace.useState(false);
      if (disabled && focusedState) {
        setFocused(false);
      }
      const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
      let registerEffect;
      const childContext = React__namespace.useMemo(() => {
        return {
          adornedStart,
          setAdornedStart,
          color,
          disabled,
          error,
          filled,
          focused,
          fullWidth,
          hiddenLabel,
          size,
          onBlur: () => {
            setFocused(false);
          },
          onEmpty: () => {
            setFilled(false);
          },
          onFilled: () => {
            setFilled(true);
          },
          onFocus: () => {
            setFocused(true);
          },
          registerEffect,
          required,
          variant
        };
      }, [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
      return /*#__PURE__*/jsxRuntime_1(FormControlContext$1.Provider, {
        value: childContext,
        children: /*#__PURE__*/jsxRuntime_1(FormControlRoot, _extends({
          as: component,
          ownerState: ownerState,
          className: clsx(classes.root, className),
          ref: ref
        }, other, {
          children: children
        }))
      });
    });
    var FormControl$1 = FormControl;

    function getFormHelperTextUtilityClasses(slot) {
      return generateUtilityClass('MuiFormHelperText', slot);
    }
    const formHelperTextClasses = generateUtilityClasses('MuiFormHelperText', ['root', 'error', 'disabled', 'sizeSmall', 'sizeMedium', 'contained', 'focused', 'filled', 'required']);
    var formHelperTextClasses$1 = formHelperTextClasses;

    var _span$2;
    const _excluded$w = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
    const useUtilityClasses$o = ownerState => {
      const {
        classes,
        contained,
        size,
        disabled,
        error,
        filled,
        focused,
        required
      } = ownerState;
      const slots = {
        root: ['root', disabled && 'disabled', error && 'error', size && `size${capitalize(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']
      };
      return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
    };
    const FormHelperTextRoot = styled$1('p', {
      name: 'MuiFormHelperText',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.size && styles[`size${capitalize(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      color: (theme.vars || theme).palette.text.secondary
    }, theme.typography.caption, {
      textAlign: 'left',
      marginTop: 3,
      marginRight: 0,
      marginBottom: 0,
      marginLeft: 0,
      [`&.${formHelperTextClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`&.${formHelperTextClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }, ownerState.size === 'small' && {
      marginTop: 4
    }, ownerState.contained && {
      marginLeft: 14,
      marginRight: 14
    }));
    const FormHelperText = /*#__PURE__*/React__namespace.forwardRef(function FormHelperText(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiFormHelperText'
      });
      const {
          children,
          className,
          component = 'p'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$w);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['variant', 'size', 'disabled', 'error', 'filled', 'focused', 'required']
      });
      const ownerState = _extends({}, props, {
        component,
        contained: fcs.variant === 'filled' || fcs.variant === 'outlined',
        variant: fcs.variant,
        size: fcs.size,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      });
      const classes = useUtilityClasses$o(ownerState);
      return /*#__PURE__*/jsxRuntime_1(FormHelperTextRoot, _extends({
        as: component,
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other, {
        children: children === ' ' ? // notranslate needed while Google Translate will not fix zero-width space issue
        _span$2 || (_span$2 = /*#__PURE__*/jsxRuntime_1("span", {
          className: "notranslate",
          children: "\u200B"
        })) : children
      }));
    });
    var FormHelperText$1 = FormHelperText;

    const reflow = node => node.scrollTop;
    function getTransitionProps(props, options) {
      var _style$transitionDura, _style$transitionTimi;
      const {
        timeout,
        easing,
        style = {}
      } = props;
      return {
        duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
        easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
        delay: style.transitionDelay
      };
    }

    const _excluded$v = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    function getScale(value) {
      return `scale(${value}, ${value ** 2})`;
    }
    const styles$1 = {
      entering: {
        opacity: 1,
        transform: getScale(1)
      },
      entered: {
        opacity: 1,
        transform: 'none'
      }
    };

    /*
     TODO v6: remove
     Conditionally apply a workaround for the CSS transition bug in Safari 15.4 / WebKit browsers.
     */
    const isWebKit154 = typeof navigator !== 'undefined' && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);

    /**
     * The Grow transition is used by the [Tooltip](/material-ui/react-tooltip/) and
     * [Popover](/material-ui/react-popover/) components.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
    const Grow = /*#__PURE__*/React__namespace.forwardRef(function Grow(props, ref) {
      const {
          addEndListener,
          appear = true,
          children,
          easing,
          in: inProp,
          onEnter,
          onEntered,
          onEntering,
          onExit,
          onExited,
          onExiting,
          style,
          timeout = 'auto',
          // eslint-disable-next-line react/prop-types
          TransitionComponent = Transition$1
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$v);
      const timer = React__namespace.useRef();
      const autoTimeout = React__namespace.useRef();
      const theme = useTheme();
      const nodeRef = React__namespace.useRef(null);
      const handleRef = useForkRef(nodeRef, children.ref, ref);
      const normalizedTransitionCallback = callback => maybeIsAppearing => {
        if (callback) {
          const node = nodeRef.current;

          // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
          if (maybeIsAppearing === undefined) {
            callback(node);
          } else {
            callback(node, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
        reflow(node); // So the animation always start from the start.

        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'enter'
        });
        let duration;
        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
        node.style.transition = [theme.transitions.create('opacity', {
          duration,
          delay
        }), theme.transitions.create('transform', {
          duration: isWebKit154 ? duration : duration * 0.666,
          delay,
          easing: transitionTimingFunction
        })].join(',');
        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback(node => {
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'exit'
        });
        let duration;
        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
        node.style.transition = [theme.transitions.create('opacity', {
          duration,
          delay
        }), theme.transitions.create('transform', {
          duration: isWebKit154 ? duration : duration * 0.666,
          delay: isWebKit154 ? delay : delay || duration * 0.333,
          easing: transitionTimingFunction
        })].join(',');
        node.style.opacity = 0;
        node.style.transform = getScale(0.75);
        if (onExit) {
          onExit(node);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = next => {
        if (timeout === 'auto') {
          timer.current = setTimeout(next, autoTimeout.current || 0);
        }
        if (addEndListener) {
          // Old call signature before `react-transition-group` implemented `nodeRef`
          addEndListener(nodeRef.current, next);
        }
      };
      React__namespace.useEffect(() => {
        return () => {
          clearTimeout(timer.current);
        };
      }, []);
      return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
        appear: appear,
        in: inProp,
        nodeRef: nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout === 'auto' ? null : timeout
      }, other, {
        children: (state, childProps) => {
          return /*#__PURE__*/React__namespace.cloneElement(children, _extends({
            style: _extends({
              opacity: 0,
              transform: getScale(0.75),
              visibility: state === 'exited' && !inProp ? 'hidden' : undefined
            }, styles$1[state], style, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    Grow.muiSupportAuto = true;
    var Grow$1 = Grow;

    const _excluded$u = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    const styles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      }
    };

    /**
     * The Fade transition is used by the [Modal](/material-ui/react-modal/) component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */
    const Fade = /*#__PURE__*/React__namespace.forwardRef(function Fade(props, ref) {
      const theme = useTheme();
      const defaultTimeout = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
      };
      const {
          addEndListener,
          appear = true,
          children,
          easing,
          in: inProp,
          onEnter,
          onEntered,
          onEntering,
          onExit,
          onExited,
          onExiting,
          style,
          timeout = defaultTimeout,
          // eslint-disable-next-line react/prop-types
          TransitionComponent = Transition$1
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$u);
      const nodeRef = React__namespace.useRef(null);
      const handleRef = useForkRef(nodeRef, children.ref, ref);
      const normalizedTransitionCallback = callback => maybeIsAppearing => {
        if (callback) {
          const node = nodeRef.current;

          // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
          if (maybeIsAppearing === undefined) {
            callback(node);
          } else {
            callback(node, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
        reflow(node); // So the animation always start from the start.

        const transitionProps = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback(node => {
        const transitionProps = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);
        if (onExit) {
          onExit(node);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = next => {
        if (addEndListener) {
          // Old call signature before `react-transition-group` implemented `nodeRef`
          addEndListener(nodeRef.current, next);
        }
      };
      return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
        appear: appear,
        in: inProp,
        nodeRef: nodeRef ,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout
      }, other, {
        children: (state, childProps) => {
          return /*#__PURE__*/React__namespace.cloneElement(children, _extends({
            style: _extends({
              opacity: 0,
              visibility: state === 'exited' && !inProp ? 'hidden' : undefined
            }, styles[state], style, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    var Fade$1 = Fade;

    function getBackdropUtilityClass(slot) {
      return generateUtilityClass('MuiBackdrop', slot);
    }
    generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);

    const _excluded$t = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
    const useUtilityClasses$n = ownerState => {
      const {
        classes,
        invisible
      } = ownerState;
      const slots = {
        root: ['root', invisible && 'invisible']
      };
      return composeClasses(slots, getBackdropUtilityClass, classes);
    };
    const BackdropRoot = styled$1('div', {
      name: 'MuiBackdrop',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.invisible && styles.invisible];
      }
    })(({
      ownerState
    }) => _extends({
      position: 'fixed',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      WebkitTapHighlightColor: 'transparent'
    }, ownerState.invisible && {
      backgroundColor: 'transparent'
    }));
    const Backdrop = /*#__PURE__*/React__namespace.forwardRef(function Backdrop(inProps, ref) {
      var _slotProps$root, _ref, _slots$root;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiBackdrop'
      });
      const {
          children,
          className,
          component = 'div',
          components = {},
          componentsProps = {},
          invisible = false,
          open,
          slotProps = {},
          slots = {},
          TransitionComponent = Fade$1,
          transitionDuration
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$t);
      const ownerState = _extends({}, props, {
        component,
        invisible
      });
      const classes = useUtilityClasses$n(ownerState);
      const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
      return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
        in: open,
        timeout: transitionDuration
      }, other, {
        children: /*#__PURE__*/jsxRuntime_1(BackdropRoot, _extends({
          "aria-hidden": true
        }, rootSlotProps, {
          as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
          className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
          ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
          classes: classes,
          ref: ref,
          children: children
        }))
      }));
    });
    var Backdrop$1 = Backdrop;

    function getModalUtilityClass(slot) {
      return generateUtilityClass('MuiModal', slot);
    }
    generateUtilityClasses('MuiModal', ['root', 'hidden', 'backdrop']);

    const _excluded$s = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
    const useUtilityClasses$m = ownerState => {
      const {
        open,
        exited,
        classes
      } = ownerState;
      const slots = {
        root: ['root', !open && exited && 'hidden'],
        backdrop: ['backdrop']
      };
      return composeClasses(slots, getModalUtilityClass, classes);
    };
    const ModalRoot = styled$1('div', {
      name: 'MuiModal',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      position: 'fixed',
      zIndex: (theme.vars || theme).zIndex.modal,
      right: 0,
      bottom: 0,
      top: 0,
      left: 0
    }, !ownerState.open && ownerState.exited && {
      visibility: 'hidden'
    }));
    const ModalBackdrop = styled$1(Backdrop$1, {
      name: 'MuiModal',
      slot: 'Backdrop',
      overridesResolver: (props, styles) => {
        return styles.backdrop;
      }
    })({
      zIndex: -1
    });

    /**
     * Modal is a lower-level construct that is leveraged by the following components:
     *
     * - [Dialog](/material-ui/api/dialog/)
     * - [Drawer](/material-ui/api/drawer/)
     * - [Menu](/material-ui/api/menu/)
     * - [Popover](/material-ui/api/popover/)
     *
     * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
     * rather than directly using Modal.
     *
     * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
     */
    const Modal = /*#__PURE__*/React__namespace.forwardRef(function Modal(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
      const props = useThemeProps({
        name: 'MuiModal',
        props: inProps
      });
      const {
          BackdropComponent = ModalBackdrop,
          BackdropProps,
          className,
          closeAfterTransition = false,
          children,
          container,
          component,
          components = {},
          componentsProps = {},
          disableAutoFocus = false,
          disableEnforceFocus = false,
          disableEscapeKeyDown = false,
          disablePortal = false,
          disableRestoreFocus = false,
          disableScrollLock = false,
          hideBackdrop = false,
          keepMounted = false,
          onBackdropClick,
          open,
          slotProps,
          slots
          // eslint-disable-next-line react/prop-types
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$s);
      const propsWithDefaults = _extends({}, props, {
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        hideBackdrop,
        keepMounted
      });
      const {
        getRootProps,
        getBackdropProps,
        getTransitionProps,
        portalRef,
        isTopModal,
        exited,
        hasTransition
      } = useModal(_extends({}, propsWithDefaults, {
        rootRef: ref
      }));
      const ownerState = _extends({}, propsWithDefaults, {
        exited
      });
      const classes = useUtilityClasses$m(ownerState);
      const childProps = {};
      if (children.props.tabIndex === undefined) {
        childProps.tabIndex = '-1';
      }

      // It's a Transition like component
      if (hasTransition) {
        const {
          onEnter,
          onExited
        } = getTransitionProps();
        childProps.onEnter = onEnter;
        childProps.onExited = onExited;
      }
      const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
      const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
      const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
      const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
      const rootProps = useSlotProps({
        elementType: RootSlot,
        externalSlotProps: rootSlotProps,
        externalForwardedProps: other,
        getSlotProps: getRootProps,
        additionalProps: {
          ref,
          as: component
        },
        ownerState,
        className: clsx(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
      });
      const backdropProps = useSlotProps({
        elementType: BackdropSlot,
        externalSlotProps: backdropSlotProps,
        additionalProps: BackdropProps,
        getSlotProps: otherHandlers => {
          return getBackdropProps(_extends({}, otherHandlers, {
            onClick: e => {
              if (onBackdropClick) {
                onBackdropClick(e);
              }
              if (otherHandlers != null && otherHandlers.onClick) {
                otherHandlers.onClick(e);
              }
            }
          }));
        },
        className: clsx(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
        ownerState
      });
      if (!keepMounted && !open && (!hasTransition || exited)) {
        return null;
      }
      return /*#__PURE__*/jsxRuntime_1(Portal, {
        ref: portalRef,
        container: container,
        disablePortal: disablePortal,
        children: /*#__PURE__*/jsxRuntime_2(RootSlot, _extends({}, rootProps, {
          children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/jsxRuntime_1(BackdropSlot, _extends({}, backdropProps)) : null, /*#__PURE__*/jsxRuntime_1(FocusTrap, {
            disableEnforceFocus: disableEnforceFocus,
            disableAutoFocus: disableAutoFocus,
            disableRestoreFocus: disableRestoreFocus,
            isEnabled: isTopModal,
            open: open,
            children: /*#__PURE__*/React__namespace.cloneElement(children, childProps)
          })]
        }))
      });
    });
    var Modal$1 = Modal;

    function getPaperUtilityClass(slot) {
      return generateUtilityClass('MuiPaper', slot);
    }
    generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);

    const _excluded$r = ["className", "component", "elevation", "square", "variant"];
    const useUtilityClasses$l = ownerState => {
      const {
        square,
        elevation,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
      };
      return composeClasses(slots, getPaperUtilityClass, classes);
    };
    const PaperRoot = styled$1('div', {
      name: 'MuiPaper',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$vars$overlays;
      return _extends({
        backgroundColor: (theme.vars || theme).palette.background.paper,
        color: (theme.vars || theme).palette.text.primary,
        transition: theme.transitions.create('box-shadow')
      }, !ownerState.square && {
        borderRadius: theme.shape.borderRadius
      }, ownerState.variant === 'outlined' && {
        border: `1px solid ${(theme.vars || theme).palette.divider}`
      }, ownerState.variant === 'elevation' && _extends({
        boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
      }, !theme.vars && theme.palette.mode === 'dark' && {
        backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))}, ${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))})`
      }, theme.vars && {
        backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
      }));
    });
    const Paper = /*#__PURE__*/React__namespace.forwardRef(function Paper(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPaper'
      });
      const {
          className,
          component = 'div',
          elevation = 1,
          square = false,
          variant = 'elevation'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$r);
      const ownerState = _extends({}, props, {
        component,
        elevation,
        square,
        variant
      });
      const classes = useUtilityClasses$l(ownerState);
      return /*#__PURE__*/jsxRuntime_1(PaperRoot, _extends({
        as: component,
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other));
    });
    var MuiPaper = Paper;

    function getPopoverUtilityClass(slot) {
      return generateUtilityClass('MuiPopover', slot);
    }
    generateUtilityClasses('MuiPopover', ['root', 'paper']);

    const _excluded$q = ["onEntering"],
      _excluded2$6 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"],
      _excluded3$2 = ["slotProps"];
    function getOffsetTop(rect, vertical) {
      let offset = 0;
      if (typeof vertical === 'number') {
        offset = vertical;
      } else if (vertical === 'center') {
        offset = rect.height / 2;
      } else if (vertical === 'bottom') {
        offset = rect.height;
      }
      return offset;
    }
    function getOffsetLeft(rect, horizontal) {
      let offset = 0;
      if (typeof horizontal === 'number') {
        offset = horizontal;
      } else if (horizontal === 'center') {
        offset = rect.width / 2;
      } else if (horizontal === 'right') {
        offset = rect.width;
      }
      return offset;
    }
    function getTransformOriginValue(transformOrigin) {
      return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');
    }
    function resolveAnchorEl(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }
    const useUtilityClasses$k = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        paper: ['paper']
      };
      return composeClasses(slots, getPopoverUtilityClass, classes);
    };
    const PopoverRoot = styled$1(Modal$1, {
      name: 'MuiPopover',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});
    const PopoverPaper = styled$1(MuiPaper, {
      name: 'MuiPopover',
      slot: 'Paper',
      overridesResolver: (props, styles) => styles.paper
    })({
      position: 'absolute',
      overflowY: 'auto',
      overflowX: 'hidden',
      // So we see the popover when it's empty.
      // It's most likely on issue on userland.
      minWidth: 16,
      minHeight: 16,
      maxWidth: 'calc(100% - 32px)',
      maxHeight: 'calc(100% - 32px)',
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    });
    const Popover = /*#__PURE__*/React__namespace.forwardRef(function Popover(inProps, ref) {
      var _slotProps$paper, _slots$root, _slots$paper;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPopover'
      });
      const {
          action,
          anchorEl,
          anchorOrigin = {
            vertical: 'top',
            horizontal: 'left'
          },
          anchorPosition,
          anchorReference = 'anchorEl',
          children,
          className,
          container: containerProp,
          elevation = 8,
          marginThreshold = 16,
          open,
          PaperProps: PaperPropsProp = {},
          slots,
          slotProps,
          transformOrigin = {
            vertical: 'top',
            horizontal: 'left'
          },
          TransitionComponent = Grow$1,
          transitionDuration: transitionDurationProp = 'auto',
          TransitionProps: {
            onEntering
          } = {},
          disableScrollLock = false
        } = props,
        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$q),
        other = _objectWithoutPropertiesLoose(props, _excluded2$6);
      const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
      const paperRef = React__namespace.useRef();
      const handlePaperRef = useForkRef(paperRef, externalPaperSlotProps.ref);
      const ownerState = _extends({}, props, {
        anchorOrigin,
        anchorReference,
        elevation,
        marginThreshold,
        externalPaperSlotProps,
        transformOrigin,
        TransitionComponent,
        transitionDuration: transitionDurationProp,
        TransitionProps
      });
      const classes = useUtilityClasses$k(ownerState);

      // Returns the top/left offset of the position
      // to attach to on the anchor element (or body if none is provided)
      const getAnchorOffset = React__namespace.useCallback(() => {
        if (anchorReference === 'anchorPosition') {
          return anchorPosition;
        }
        const resolvedAnchorEl = resolveAnchorEl(anchorEl);

        // If an anchor element wasn't provided, just use the parent body element of this Popover
        const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
        const anchorRect = anchorElement.getBoundingClientRect();
        return {
          top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
          left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
        };
      }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);

      // Returns the base transform origin using the element
      const getTransformOrigin = React__namespace.useCallback(elemRect => {
        return {
          vertical: getOffsetTop(elemRect, transformOrigin.vertical),
          horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
        };
      }, [transformOrigin.horizontal, transformOrigin.vertical]);
      const getPositioningStyle = React__namespace.useCallback(element => {
        const elemRect = {
          width: element.offsetWidth,
          height: element.offsetHeight
        };

        // Get the transform origin point on the element itself
        const elemTransformOrigin = getTransformOrigin(elemRect);
        if (anchorReference === 'none') {
          return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
          };
        }

        // Get the offset of the anchoring element
        const anchorOffset = getAnchorOffset();

        // Calculate element positioning
        let top = anchorOffset.top - elemTransformOrigin.vertical;
        let left = anchorOffset.left - elemTransformOrigin.horizontal;
        const bottom = top + elemRect.height;
        const right = left + elemRect.width;

        // Use the parent window of the anchorEl if provided
        const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));

        // Window thresholds taking required margin into account
        const heightThreshold = containerWindow.innerHeight - marginThreshold;
        const widthThreshold = containerWindow.innerWidth - marginThreshold;

        // Check if the vertical axis needs shifting
        if (marginThreshold !== null && top < marginThreshold) {
          const diff = top - marginThreshold;
          top -= diff;
          elemTransformOrigin.vertical += diff;
        } else if (marginThreshold !== null && bottom > heightThreshold) {
          const diff = bottom - heightThreshold;
          top -= diff;
          elemTransformOrigin.vertical += diff;
        }

        // Check if the horizontal axis needs shifting
        if (marginThreshold !== null && left < marginThreshold) {
          const diff = left - marginThreshold;
          left -= diff;
          elemTransformOrigin.horizontal += diff;
        } else if (right > widthThreshold) {
          const diff = right - widthThreshold;
          left -= diff;
          elemTransformOrigin.horizontal += diff;
        }
        return {
          top: `${Math.round(top)}px`,
          left: `${Math.round(left)}px`,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
      const [isPositioned, setIsPositioned] = React__namespace.useState(open);
      const setPositioningStyles = React__namespace.useCallback(() => {
        const element = paperRef.current;
        if (!element) {
          return;
        }
        const positioning = getPositioningStyle(element);
        if (positioning.top !== null) {
          element.style.top = positioning.top;
        }
        if (positioning.left !== null) {
          element.style.left = positioning.left;
        }
        element.style.transformOrigin = positioning.transformOrigin;
        setIsPositioned(true);
      }, [getPositioningStyle]);
      React__namespace.useEffect(() => {
        if (disableScrollLock) {
          window.addEventListener('scroll', setPositioningStyles);
        }
        return () => window.removeEventListener('scroll', setPositioningStyles);
      }, [anchorEl, disableScrollLock, setPositioningStyles]);
      const handleEntering = (element, isAppearing) => {
        if (onEntering) {
          onEntering(element, isAppearing);
        }
        setPositioningStyles();
      };
      const handleExited = () => {
        setIsPositioned(false);
      };
      React__namespace.useEffect(() => {
        if (open) {
          setPositioningStyles();
        }
      });
      React__namespace.useImperativeHandle(action, () => open ? {
        updatePosition: () => {
          setPositioningStyles();
        }
      } : null, [open, setPositioningStyles]);
      React__namespace.useEffect(() => {
        if (!open) {
          return undefined;
        }
        const handleResize = debounce$1(() => {
          setPositioningStyles();
        });
        const containerWindow = ownerWindow(anchorEl);
        containerWindow.addEventListener('resize', handleResize);
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener('resize', handleResize);
        };
      }, [anchorEl, open, setPositioningStyles]);
      let transitionDuration = transitionDurationProp;
      if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
        transitionDuration = undefined;
      }

      // If the container prop is provided, use that
      // If the anchorEl prop is provided, use its parent body element as the container
      // If neither are provided let the Modal take care of choosing the container
      const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
      const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
      const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
      const paperProps = useSlotProps({
        elementType: PaperSlot,
        externalSlotProps: _extends({}, externalPaperSlotProps, {
          style: isPositioned ? externalPaperSlotProps.style : _extends({}, externalPaperSlotProps.style, {
            opacity: 0
          })
        }),
        additionalProps: {
          elevation,
          ref: handlePaperRef
        },
        ownerState,
        className: clsx(classes.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
      });
      const _useSlotProps = useSlotProps({
          elementType: RootSlot,
          externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
          externalForwardedProps: other,
          additionalProps: {
            ref,
            slotProps: {
              backdrop: {
                invisible: true
              }
            },
            container,
            open
          },
          ownerState,
          className: clsx(classes.root, className)
        }),
        {
          slotProps: rootSlotPropsProp
        } = _useSlotProps,
        rootProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded3$2);
      return /*#__PURE__*/jsxRuntime_1(RootSlot, _extends({}, rootProps, !isHostComponent(RootSlot) && {
        slotProps: rootSlotPropsProp,
        disableScrollLock
      }, {
        children: /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
          appear: true,
          in: open,
          onEntering: handleEntering,
          onExited: handleExited,
          timeout: transitionDuration
        }, TransitionProps, {
          children: /*#__PURE__*/jsxRuntime_1(PaperSlot, _extends({}, paperProps, {
            children: children
          }))
        }))
      }));
    });
    var Popover$1 = Popover;

    function getMenuUtilityClass(slot) {
      return generateUtilityClass('MuiMenu', slot);
    }
    generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);

    const _excluded$p = ["onEntering"],
      _excluded2$5 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
    const RTL_ORIGIN = {
      vertical: 'top',
      horizontal: 'right'
    };
    const LTR_ORIGIN = {
      vertical: 'top',
      horizontal: 'left'
    };
    const useUtilityClasses$j = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        paper: ['paper'],
        list: ['list']
      };
      return composeClasses(slots, getMenuUtilityClass, classes);
    };
    const MenuRoot = styled$1(Popover$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiMenu',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});
    const MenuPaper = styled$1(PopoverPaper, {
      name: 'MuiMenu',
      slot: 'Paper',
      overridesResolver: (props, styles) => styles.paper
    })({
      // specZ: The maximum height of a simple menu should be one or more rows less than the view
      // height. This ensures a tappable area outside of the simple menu with which to dismiss
      // the menu.
      maxHeight: 'calc(100% - 96px)',
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: 'touch'
    });
    const MenuMenuList = styled$1(MenuList$1, {
      name: 'MuiMenu',
      slot: 'List',
      overridesResolver: (props, styles) => styles.list
    })({
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    });
    const Menu = /*#__PURE__*/React__namespace.forwardRef(function Menu(inProps, ref) {
      var _slots$paper, _slotProps$paper;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiMenu'
      });
      const {
          autoFocus = true,
          children,
          className,
          disableAutoFocusItem = false,
          MenuListProps = {},
          onClose,
          open,
          PaperProps = {},
          PopoverClasses,
          transitionDuration = 'auto',
          TransitionProps: {
            onEntering
          } = {},
          variant = 'selectedMenu',
          slots = {},
          slotProps = {}
        } = props,
        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$p),
        other = _objectWithoutPropertiesLoose(props, _excluded2$5);
      const theme = useTheme();
      const isRtl = theme.direction === 'rtl';
      const ownerState = _extends({}, props, {
        autoFocus,
        disableAutoFocusItem,
        MenuListProps,
        onEntering,
        PaperProps,
        transitionDuration,
        TransitionProps,
        variant
      });
      const classes = useUtilityClasses$j(ownerState);
      const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
      const menuListActionsRef = React__namespace.useRef(null);
      const handleEntering = (element, isAppearing) => {
        if (menuListActionsRef.current) {
          menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
        }
        if (onEntering) {
          onEntering(element, isAppearing);
        }
      };
      const handleListKeyDown = event => {
        if (event.key === 'Tab') {
          event.preventDefault();
          if (onClose) {
            onClose(event, 'tabKeyDown');
          }
        }
      };

      /**
       * the index of the item should receive focus
       * in a `variant="selectedMenu"` it's the first `selected` item
       * otherwise it's the very first item.
       */
      let activeItemIndex = -1;
      // since we inject focus related props into children we have to do a lookahead
      // to check if there is a `selected` item. We're looking for the last `selected`
      // item and use the first valid item as a fallback
      React__namespace.Children.map(children, (child, index) => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return;
        }
        if (!child.props.disabled) {
          if (variant === 'selectedMenu' && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
      const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
      const rootSlotProps = useSlotProps({
        elementType: slots.root,
        externalSlotProps: slotProps.root,
        ownerState,
        className: [classes.root, className]
      });
      const paperSlotProps = useSlotProps({
        elementType: PaperSlot,
        externalSlotProps: paperExternalSlotProps,
        ownerState,
        className: classes.paper
      });
      return /*#__PURE__*/jsxRuntime_1(MenuRoot, _extends({
        onClose: onClose,
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: isRtl ? 'right' : 'left'
        },
        transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
        slots: {
          paper: PaperSlot,
          root: slots.root
        },
        slotProps: {
          root: rootSlotProps,
          paper: paperSlotProps
        },
        open: open,
        ref: ref,
        transitionDuration: transitionDuration,
        TransitionProps: _extends({
          onEntering: handleEntering
        }, TransitionProps),
        ownerState: ownerState
      }, other, {
        classes: PopoverClasses,
        children: /*#__PURE__*/jsxRuntime_1(MenuMenuList, _extends({
          onKeyDown: handleListKeyDown,
          actions: menuListActionsRef,
          autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
          autoFocusItem: autoFocusItem,
          variant: variant
        }, MenuListProps, {
          className: clsx(classes.list, MenuListProps.className),
          children: children
        }))
      }));
    });
    var Menu$1 = Menu;

    function getNativeSelectUtilityClasses(slot) {
      return generateUtilityClass('MuiNativeSelect', slot);
    }
    const nativeSelectClasses = generateUtilityClasses('MuiNativeSelect', ['root', 'select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput', 'error']);
    var nativeSelectClasses$1 = nativeSelectClasses;

    const _excluded$o = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
    const useUtilityClasses$i = ownerState => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open,
        error
      } = ownerState;
      const slots = {
        select: ['select', variant, disabled && 'disabled', multiple && 'multiple', error && 'error'],
        icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled']
      };
      return composeClasses(slots, getNativeSelectUtilityClasses, classes);
    };
    const nativeSelectSelectStyles = ({
      ownerState,
      theme
    }) => _extends({
      MozAppearance: 'none',
      // Reset
      WebkitAppearance: 'none',
      // Reset
      // When interacting quickly, the text can end up selected.
      // Native select can't be selected either.
      userSelect: 'none',
      borderRadius: 0,
      // Reset
      cursor: 'pointer',
      '&:focus': _extends({}, theme.vars ? {
        backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
      } : {
        backgroundColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
      }, {
        borderRadius: 0 // Reset Chrome style
      }),

      // Remove IE11 arrow
      '&::-ms-expand': {
        display: 'none'
      },
      [`&.${nativeSelectClasses$1.disabled}`]: {
        cursor: 'default'
      },
      '&[multiple]': {
        height: 'auto'
      },
      '&:not([multiple]) option, &:not([multiple]) optgroup': {
        backgroundColor: (theme.vars || theme).palette.background.paper
      },
      // Bump specificity to allow extending custom inputs
      '&&&': {
        paddingRight: 24,
        minWidth: 16 // So it doesn't collapse.
      }
    }, ownerState.variant === 'filled' && {
      '&&&': {
        paddingRight: 32
      }
    }, ownerState.variant === 'outlined' && {
      borderRadius: (theme.vars || theme).shape.borderRadius,
      '&:focus': {
        borderRadius: (theme.vars || theme).shape.borderRadius // Reset the reset for Chrome style
      },

      '&&&': {
        paddingRight: 32
      }
    });
    const NativeSelectSelect = styled$1('select', {
      name: 'MuiNativeSelect',
      slot: 'Select',
      shouldForwardProp: rootShouldForwardProp,
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.select, styles[ownerState.variant], ownerState.error && styles.error, {
          [`&.${nativeSelectClasses$1.multiple}`]: styles.multiple
        }];
      }
    })(nativeSelectSelectStyles);
    const nativeSelectIconStyles = ({
      ownerState,
      theme
    }) => _extends({
      // We use a position absolute over a flexbox in order to forward the pointer events
      // to the input and to support wrapping tags..
      position: 'absolute',
      right: 0,
      top: 'calc(50% - .5em)',
      // Center vertically, height is 1em
      pointerEvents: 'none',
      // Don't block pointer events on the select under the icon.
      color: (theme.vars || theme).palette.action.active,
      [`&.${nativeSelectClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.open && {
      transform: 'rotate(180deg)'
    }, ownerState.variant === 'filled' && {
      right: 7
    }, ownerState.variant === 'outlined' && {
      right: 7
    });
    const NativeSelectIcon = styled$1('svg', {
      name: 'MuiNativeSelect',
      slot: 'Icon',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
      }
    })(nativeSelectIconStyles);

    /**
     * @ignore - internal component.
     */
    const NativeSelectInput = /*#__PURE__*/React__namespace.forwardRef(function NativeSelectInput(props, ref) {
      const {
          className,
          disabled,
          error,
          IconComponent,
          inputRef,
          variant = 'standard'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$o);
      const ownerState = _extends({}, props, {
        disabled,
        variant,
        error
      });
      const classes = useUtilityClasses$i(ownerState);
      return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime_1(NativeSelectSelect, _extends({
          ownerState: ownerState,
          className: clsx(classes.select, className),
          disabled: disabled,
          ref: inputRef || ref
        }, other)), props.multiple ? null : /*#__PURE__*/jsxRuntime_1(NativeSelectIcon, {
          as: IconComponent,
          ownerState: ownerState,
          className: classes.icon
        })]
      });
    });
    var NativeSelectInput$1 = NativeSelectInput;

    function getSelectUtilityClasses(slot) {
      return generateUtilityClass('MuiSelect', slot);
    }
    const selectClasses = generateUtilityClasses('MuiSelect', ['root', 'select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'focused', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput', 'error']);
    var selectClasses$1 = selectClasses;

    var _span$1;
    const _excluded$n = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
    const SelectSelect = styled$1('div', {
      name: 'MuiSelect',
      slot: 'Select',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [
        // Win specificity over the input base
        {
          [`&.${selectClasses$1.select}`]: styles.select
        }, {
          [`&.${selectClasses$1.select}`]: styles[ownerState.variant]
        }, {
          [`&.${selectClasses$1.error}`]: styles.error
        }, {
          [`&.${selectClasses$1.multiple}`]: styles.multiple
        }];
      }
    })(nativeSelectSelectStyles, {
      // Win specificity over the input base
      [`&.${selectClasses$1.select}`]: {
        height: 'auto',
        // Resets for multiple select with chips
        minHeight: '1.4375em',
        // Required for select\text-field height consistency
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        overflow: 'hidden'
      }
    });
    const SelectIcon = styled$1('svg', {
      name: 'MuiSelect',
      slot: 'Icon',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
      }
    })(nativeSelectIconStyles);
    const SelectNativeInput = styled$1('input', {
      shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'classes',
      name: 'MuiSelect',
      slot: 'NativeInput',
      overridesResolver: (props, styles) => styles.nativeInput
    })({
      bottom: 0,
      left: 0,
      position: 'absolute',
      opacity: 0,
      pointerEvents: 'none',
      width: '100%',
      boxSizing: 'border-box'
    });
    function areEqualValues(a, b) {
      if (typeof b === 'object' && b !== null) {
        return a === b;
      }

      // The value could be a number, the DOM will stringify it anyway.
      return String(a) === String(b);
    }
    function isEmpty(display) {
      return display == null || typeof display === 'string' && !display.trim();
    }
    const useUtilityClasses$h = ownerState => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open,
        error
      } = ownerState;
      const slots = {
        select: ['select', variant, disabled && 'disabled', multiple && 'multiple', error && 'error'],
        icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled'],
        nativeInput: ['nativeInput']
      };
      return composeClasses(slots, getSelectUtilityClasses, classes);
    };

    /**
     * @ignore - internal component.
     */
    const SelectInput = /*#__PURE__*/React__namespace.forwardRef(function SelectInput(props, ref) {
      var _MenuProps$slotProps;
      const {
          'aria-describedby': ariaDescribedby,
          'aria-label': ariaLabel,
          autoFocus,
          autoWidth,
          children,
          className,
          defaultOpen,
          defaultValue,
          disabled,
          displayEmpty,
          error = false,
          IconComponent,
          inputRef: inputRefProp,
          labelId,
          MenuProps = {},
          multiple,
          name,
          onBlur,
          onChange,
          onClose,
          onFocus,
          onOpen,
          open: openProp,
          readOnly,
          renderValue,
          SelectDisplayProps = {},
          tabIndex: tabIndexProp
          // catching `type` from Input which makes no sense for SelectInput
          ,

          value: valueProp,
          variant = 'standard'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$n);
      const [value, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: 'Select'
      });
      const [openState, setOpenState] = useControlled({
        controlled: openProp,
        default: defaultOpen,
        name: 'Select'
      });
      const inputRef = React__namespace.useRef(null);
      const displayRef = React__namespace.useRef(null);
      const [displayNode, setDisplayNode] = React__namespace.useState(null);
      const {
        current: isOpenControlled
      } = React__namespace.useRef(openProp != null);
      const [menuMinWidthState, setMenuMinWidthState] = React__namespace.useState();
      const handleRef = useForkRef(ref, inputRefProp);
      const handleDisplayRef = React__namespace.useCallback(node => {
        displayRef.current = node;
        if (node) {
          setDisplayNode(node);
        }
      }, []);
      const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
      React__namespace.useImperativeHandle(handleRef, () => ({
        focus: () => {
          displayRef.current.focus();
        },
        node: inputRef.current,
        value
      }), [value]);

      // Resize menu on `defaultOpen` automatic toggle.
      React__namespace.useEffect(() => {
        if (defaultOpen && openState && displayNode && !isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
          displayRef.current.focus();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [displayNode, autoWidth]);
      // `isOpenControlled` is ignored because the component should never switch between controlled and uncontrolled modes.
      // `defaultOpen` and `openState` are ignored to avoid unnecessary callbacks.
      React__namespace.useEffect(() => {
        if (autoFocus) {
          displayRef.current.focus();
        }
      }, [autoFocus]);
      React__namespace.useEffect(() => {
        if (!labelId) {
          return undefined;
        }
        const label = ownerDocument(displayRef.current).getElementById(labelId);
        if (label) {
          const handler = () => {
            if (getSelection().isCollapsed) {
              displayRef.current.focus();
            }
          };
          label.addEventListener('click', handler);
          return () => {
            label.removeEventListener('click', handler);
          };
        }
        return undefined;
      }, [labelId]);
      const update = (open, event) => {
        if (open) {
          if (onOpen) {
            onOpen(event);
          }
        } else if (onClose) {
          onClose(event);
        }
        if (!isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
          setOpenState(open);
        }
      };
      const handleMouseDown = event => {
        // Ignore everything but left-click
        if (event.button !== 0) {
          return;
        }
        // Hijack the default focus behavior.
        event.preventDefault();
        displayRef.current.focus();
        update(true, event);
      };
      const handleClose = event => {
        update(false, event);
      };
      const childrenArray = React__namespace.Children.toArray(children);

      // Support autofill.
      const handleChange = event => {
        const child = childrenArray.find(childItem => childItem.props.value === event.target.value);
        if (child === undefined) {
          return;
        }
        setValueState(child.props.value);
        if (onChange) {
          onChange(event, child);
        }
      };
      const handleItemClick = child => event => {
        let newValue;

        // We use the tabindex attribute to signal the available options.
        if (!event.currentTarget.hasAttribute('tabindex')) {
          return;
        }
        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];
          const itemIndex = value.indexOf(child.props.value);
          if (itemIndex === -1) {
            newValue.push(child.props.value);
          } else {
            newValue.splice(itemIndex, 1);
          }
        } else {
          newValue = child.props.value;
        }
        if (child.props.onClick) {
          child.props.onClick(event);
        }
        if (value !== newValue) {
          setValueState(newValue);
          if (onChange) {
            // Redefine target to allow name and value to be read.
            // This allows seamless integration with the most popular form libraries.
            // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
            // Clone the event to not override `target` of the original event.
            const nativeEvent = event.nativeEvent || event;
            const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            Object.defineProperty(clonedEvent, 'target', {
              writable: true,
              value: {
                value: newValue,
                name
              }
            });
            onChange(clonedEvent, child);
          }
        }
        if (!multiple) {
          update(false, event);
        }
      };
      const handleKeyDown = event => {
        if (!readOnly) {
          const validKeys = [' ', 'ArrowUp', 'ArrowDown',
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
          'Enter'];
          if (validKeys.indexOf(event.key) !== -1) {
            event.preventDefault();
            update(true, event);
          }
        }
      };
      const open = displayNode !== null && openState;
      const handleBlur = event => {
        // if open event.stopImmediatePropagation
        if (!open && onBlur) {
          // Preact support, target is read only property on a native event.
          Object.defineProperty(event, 'target', {
            writable: true,
            value: {
              value,
              name
            }
          });
          onBlur(event);
        }
      };
      delete other['aria-invalid'];
      let display;
      let displaySingle;
      const displayMultiple = [];
      let computeDisplay = false;

      // No need to display any value if the field is empty.
      if (isFilled({
        value
      }) || displayEmpty) {
        if (renderValue) {
          display = renderValue(value);
        } else {
          computeDisplay = true;
        }
      }
      const items = childrenArray.map(child => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }
        let selected;
        if (multiple) {
          if (!Array.isArray(value)) {
            throw new Error(formatMuiErrorMessage(2));
          }
          selected = value.some(v => areEqualValues(v, child.props.value));
          if (selected && computeDisplay) {
            displayMultiple.push(child.props.children);
          }
        } else {
          selected = areEqualValues(value, child.props.value);
          if (selected && computeDisplay) {
            displaySingle = child.props.children;
          }
        }
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          'aria-selected': selected ? 'true' : 'false',
          onClick: handleItemClick(child),
          onKeyUp: event => {
            if (event.key === ' ') {
              // otherwise our MenuItems dispatches a click event
              // it's not behavior of the native <option> and causes
              // the select to close immediately since we open on space keydown
              event.preventDefault();
            }
            if (child.props.onKeyUp) {
              child.props.onKeyUp(event);
            }
          },
          role: 'option',
          selected,
          value: undefined,
          // The value is most likely not a valid HTML attribute.
          'data-value': child.props.value // Instead, we provide it as a data attribute.
        });
      });
      if (computeDisplay) {
        if (multiple) {
          if (displayMultiple.length === 0) {
            display = null;
          } else {
            display = displayMultiple.reduce((output, child, index) => {
              output.push(child);
              if (index < displayMultiple.length - 1) {
                output.push(', ');
              }
              return output;
            }, []);
          }
        } else {
          display = displaySingle;
        }
      }

      // Avoid performing a layout computation in the render method.
      let menuMinWidth = menuMinWidthState;
      if (!autoWidth && isOpenControlled && displayNode) {
        menuMinWidth = anchorElement.clientWidth;
      }
      let tabIndex;
      if (typeof tabIndexProp !== 'undefined') {
        tabIndex = tabIndexProp;
      } else {
        tabIndex = disabled ? null : 0;
      }
      const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : undefined);
      const ownerState = _extends({}, props, {
        variant,
        value,
        open,
        error
      });
      const classes = useUtilityClasses$h(ownerState);
      const paperProps = _extends({}, MenuProps.PaperProps, (_MenuProps$slotProps = MenuProps.slotProps) == null ? void 0 : _MenuProps$slotProps.paper);
      const listboxId = useId();
      return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
        children: [/*#__PURE__*/jsxRuntime_1(SelectSelect, _extends({
          ref: handleDisplayRef,
          tabIndex: tabIndex,
          role: "combobox",
          "aria-controls": listboxId,
          "aria-disabled": disabled ? 'true' : undefined,
          "aria-expanded": open ? 'true' : 'false',
          "aria-haspopup": "listbox",
          "aria-label": ariaLabel,
          "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
          "aria-describedby": ariaDescribedby,
          onKeyDown: handleKeyDown,
          onMouseDown: disabled || readOnly ? null : handleMouseDown,
          onBlur: handleBlur,
          onFocus: onFocus
        }, SelectDisplayProps, {
          ownerState: ownerState,
          className: clsx(SelectDisplayProps.className, classes.select, className)
          // The id is required for proper a11y
          ,
          id: buttonId,
          children: isEmpty(display) ? // notranslate needed while Google Translate will not fix zero-width space issue
          _span$1 || (_span$1 = /*#__PURE__*/jsxRuntime_1("span", {
            className: "notranslate",
            children: "\u200B"
          })) : display
        })), /*#__PURE__*/jsxRuntime_1(SelectNativeInput, _extends({
          "aria-invalid": error,
          value: Array.isArray(value) ? value.join(',') : value,
          name: name,
          ref: inputRef,
          "aria-hidden": true,
          onChange: handleChange,
          tabIndex: -1,
          disabled: disabled,
          className: classes.nativeInput,
          autoFocus: autoFocus,
          ownerState: ownerState
        }, other)), /*#__PURE__*/jsxRuntime_1(SelectIcon, {
          as: IconComponent,
          className: classes.icon,
          ownerState: ownerState
        }), /*#__PURE__*/jsxRuntime_1(Menu$1, _extends({
          id: `menu-${name || ''}`,
          anchorEl: anchorElement,
          open: open,
          onClose: handleClose,
          anchorOrigin: {
            vertical: 'bottom',
            horizontal: 'center'
          },
          transformOrigin: {
            vertical: 'top',
            horizontal: 'center'
          }
        }, MenuProps, {
          MenuListProps: _extends({
            'aria-labelledby': labelId,
            role: 'listbox',
            'aria-multiselectable': multiple ? 'true' : undefined,
            disableListWrap: true,
            id: listboxId
          }, MenuProps.MenuListProps),
          slotProps: _extends({}, MenuProps.slotProps, {
            paper: _extends({}, paperProps, {
              style: _extends({
                minWidth: menuMinWidth
              }, paperProps != null ? paperProps.style : null)
            })
          }),
          children: items
        }))]
      });
    });
    var SelectInput$1 = SelectInput;

    var ArrowDropDownIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');

    const _excluded$m = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"],
      _excluded2$4 = ["root"];
    const useUtilityClasses$g = ownerState => {
      const {
        classes
      } = ownerState;
      return classes;
    };
    const styledRootConfig = {
      name: 'MuiSelect',
      overridesResolver: (props, styles) => styles.root,
      shouldForwardProp: prop => rootShouldForwardProp(prop) && prop !== 'variant',
      slot: 'Root'
    };
    const StyledInput = styled$1(Input$1, styledRootConfig)('');
    const StyledOutlinedInput = styled$1(OutlinedInput$1, styledRootConfig)('');
    const StyledFilledInput = styled$1(FilledInput$1, styledRootConfig)('');
    const Select = /*#__PURE__*/React__namespace.forwardRef(function Select(inProps, ref) {
      const props = useThemeProps({
        name: 'MuiSelect',
        props: inProps
      });
      const {
          autoWidth = false,
          children,
          classes: classesProp = {},
          className,
          defaultOpen = false,
          displayEmpty = false,
          IconComponent = ArrowDropDownIcon,
          id,
          input,
          inputProps,
          label,
          labelId,
          MenuProps,
          multiple = false,
          native = false,
          onClose,
          onOpen,
          open,
          renderValue,
          SelectDisplayProps,
          variant: variantProp = 'outlined'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$m);
      const inputComponent = native ? NativeSelectInput$1 : SelectInput$1;
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ['variant', 'error']
      });
      const variant = fcs.variant || variantProp;
      const ownerState = _extends({}, props, {
        variant,
        classes: classesProp
      });
      const classes = useUtilityClasses$g(ownerState);
      const restOfClasses = _objectWithoutPropertiesLoose(classes, _excluded2$4);
      const InputComponent = input || {
        standard: /*#__PURE__*/jsxRuntime_1(StyledInput, {
          ownerState: ownerState
        }),
        outlined: /*#__PURE__*/jsxRuntime_1(StyledOutlinedInput, {
          label: label,
          ownerState: ownerState
        }),
        filled: /*#__PURE__*/jsxRuntime_1(StyledFilledInput, {
          ownerState: ownerState
        })
      }[variant];
      const inputComponentRef = useForkRef(ref, InputComponent.ref);
      return /*#__PURE__*/jsxRuntime_1(React__namespace.Fragment, {
        children: /*#__PURE__*/React__namespace.cloneElement(InputComponent, _extends({
          // Most of the logic is implemented in `SelectInput`.
          // The `Select` component is a simple API wrapper to expose something better to play with.
          inputComponent,
          inputProps: _extends({
            children,
            error: fcs.error,
            IconComponent,
            variant,
            type: undefined,
            // We render a select. We can ignore the type provided by the `Input`.
            multiple
          }, native ? {
            id
          } : {
            autoWidth,
            defaultOpen,
            displayEmpty,
            labelId,
            MenuProps,
            onClose,
            onOpen,
            open,
            renderValue,
            SelectDisplayProps: _extends({
              id
            }, SelectDisplayProps)
          }, inputProps, {
            classes: inputProps ? deepmerge(restOfClasses, inputProps.classes) : restOfClasses
          }, input ? input.props.inputProps : {})
        }, multiple && native && variant === 'outlined' ? {
          notched: true
        } : {}, {
          ref: inputComponentRef,
          className: clsx(InputComponent.props.className, className, classes.root)
        }, !input && {
          variant
        }, other))
      });
    });
    Select.muiName = 'Select';
    var Select$1 = Select;

    function getTextFieldUtilityClass(slot) {
      return generateUtilityClass('MuiTextField', slot);
    }
    generateUtilityClasses('MuiTextField', ['root']);

    const _excluded$l = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
    const variantComponent = {
      standard: Input$1,
      filled: FilledInput$1,
      outlined: OutlinedInput$1
    };
    const useUtilityClasses$f = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getTextFieldUtilityClass, classes);
    };
    const TextFieldRoot = styled$1(FormControl$1, {
      name: 'MuiTextField',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});

    /**
     * The `TextField` is a convenience wrapper for the most common cases (80%).
     * It cannot be all things to all people, otherwise the API would grow out of control.
     *
     * ## Advanced Configuration
     *
     * It's important to understand that the text field is a simple abstraction
     * on top of the following components:
     *
     * - [FormControl](/material-ui/api/form-control/)
     * - [InputLabel](/material-ui/api/input-label/)
     * - [FilledInput](/material-ui/api/filled-input/)
     * - [OutlinedInput](/material-ui/api/outlined-input/)
     * - [Input](/material-ui/api/input/)
     * - [FormHelperText](/material-ui/api/form-helper-text/)
     *
     * If you wish to alter the props applied to the `input` element, you can do so as follows:
     *
     * ```jsx
     * const inputProps = {
     *   step: 300,
     * };
     *
     * return <TextField id="time" type="time" inputProps={inputProps} />;
     * ```
     *
     * For advanced cases, please look at the source of TextField by clicking on the
     * "Edit this page" button above. Consider either:
     *
     * - using the upper case props for passing values directly to the components
     * - using the underlying components directly as shown in the demos
     */
    const TextField = /*#__PURE__*/React__namespace.forwardRef(function TextField(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTextField'
      });
      const {
          autoComplete,
          autoFocus = false,
          children,
          className,
          color = 'primary',
          defaultValue,
          disabled = false,
          error = false,
          FormHelperTextProps,
          fullWidth = false,
          helperText,
          id: idOverride,
          InputLabelProps,
          inputProps,
          InputProps,
          inputRef,
          label,
          maxRows,
          minRows,
          multiline = false,
          name,
          onBlur,
          onChange,
          onFocus,
          placeholder,
          required = false,
          rows,
          select = false,
          SelectProps,
          type,
          value,
          variant = 'outlined'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$l);
      const ownerState = _extends({}, props, {
        autoFocus,
        color,
        disabled,
        error,
        fullWidth,
        multiline,
        required,
        select,
        variant
      });
      const classes = useUtilityClasses$f(ownerState);
      const InputMore = {};
      if (variant === 'outlined') {
        if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
          InputMore.notched = InputLabelProps.shrink;
        }
        InputMore.label = label;
      }
      if (select) {
        // unset defaults from textbox inputs
        if (!SelectProps || !SelectProps.native) {
          InputMore.id = undefined;
        }
        InputMore['aria-describedby'] = undefined;
      }
      const id = useId(idOverride);
      const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
      const inputLabelId = label && id ? `${id}-label` : undefined;
      const InputComponent = variantComponent[variant];
      const InputElement = /*#__PURE__*/jsxRuntime_1(InputComponent, _extends({
        "aria-describedby": helperTextId,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        fullWidth: fullWidth,
        multiline: multiline,
        name: name,
        rows: rows,
        maxRows: maxRows,
        minRows: minRows,
        type: type,
        value: value,
        id: id,
        inputRef: inputRef,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        placeholder: placeholder,
        inputProps: inputProps
      }, InputMore, InputProps));
      return /*#__PURE__*/jsxRuntime_2(TextFieldRoot, _extends({
        className: clsx(classes.root, className),
        disabled: disabled,
        error: error,
        fullWidth: fullWidth,
        ref: ref,
        required: required,
        color: color,
        variant: variant,
        ownerState: ownerState
      }, other, {
        children: [label != null && label !== '' && /*#__PURE__*/jsxRuntime_1(InputLabel$1, _extends({
          htmlFor: id,
          id: inputLabelId
        }, InputLabelProps, {
          children: label
        })), select ? /*#__PURE__*/jsxRuntime_1(Select$1, _extends({
          "aria-describedby": helperTextId,
          id: id,
          labelId: inputLabelId,
          value: value,
          input: InputElement
        }, SelectProps, {
          children: children
        })) : InputElement, helperText && /*#__PURE__*/jsxRuntime_1(FormHelperText$1, _extends({
          id: helperTextId
        }, FormHelperTextProps, {
          children: helperText
        }))]
      }));
    });
    var MuiTextField = TextField;

    function useValidation(props, validate, isSameError, defaultErrorState) {
      const {
        value,
        onError
      } = props;
      const adapter = useLocalizationContext();
      const previousValidationErrorRef = React__namespace.useRef(defaultErrorState);
      const validationError = validate({
        adapter,
        value,
        props
      });
      React__namespace.useEffect(() => {
        if (onError && !isSameError(validationError, previousValidationErrorRef.current)) {
          onError(validationError, value);
        }
        previousValidationErrorRef.current = validationError;
      }, [isSameError, onError, previousValidationErrorRef, validationError, value]);
      return validationError;
    }

    const useFieldState = params => {
      const utils = useUtils();
      const localeText = useLocaleText();
      const adapter = useLocalizationContext();
      const theme = useTheme();
      const isRTL = theme.direction === 'rtl';
      const {
        valueManager,
        fieldValueManager,
        valueType,
        validator,
        internalProps,
        internalProps: {
          value: valueProp,
          defaultValue,
          referenceDate: referenceDateProp,
          onChange,
          format,
          formatDensity = 'dense',
          selectedSections: selectedSectionsProp,
          onSelectedSectionsChange,
          shouldRespectLeadingZeros = false,
          timezone: timezoneProp
        }
      } = params;
      const {
        timezone,
        value: valueFromTheOutside,
        handleValueChange
      } = useValueWithTimezone({
        timezone: timezoneProp,
        value: valueProp,
        defaultValue,
        onChange,
        valueManager
      });
      const sectionsValueBoundaries = React__namespace.useMemo(() => getSectionsBoundaries(utils, timezone), [utils, timezone]);
      const getSectionsFromValue = React__namespace.useCallback((value, fallbackSections = null) => fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, date => splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL)), [fieldValueManager, format, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);
      const placeholder = React__namespace.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);
      const [state, setState] = React__namespace.useState(() => {
        const sections = getSectionsFromValue(valueFromTheOutside);
        const stateWithoutReferenceDate = {
          sections,
          value: valueFromTheOutside,
          referenceValue: valueManager.emptyValue,
          tempValueStrAndroid: null
        };
        const granularity = getSectionTypeGranularity(sections);
        const referenceValue = valueManager.getInitialReferenceValue({
          referenceDate: referenceDateProp,
          value: valueFromTheOutside,
          utils,
          props: internalProps,
          granularity,
          timezone
        });
        return _extends({}, stateWithoutReferenceDate, {
          referenceValue
        });
      });
      const [selectedSections, innerSetSelectedSections] = useControlled({
        controlled: selectedSectionsProp,
        default: null,
        name: 'useField',
        state: 'selectedSectionIndexes'
      });
      const setSelectedSections = newSelectedSections => {
        innerSetSelectedSections(newSelectedSections);
        onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);
        setState(prevState => _extends({}, prevState, {
          selectedSectionQuery: null
        }));
      };
      const selectedSectionIndexes = React__namespace.useMemo(() => {
        if (selectedSections == null) {
          return null;
        }
        if (selectedSections === 'all') {
          return {
            startIndex: 0,
            endIndex: state.sections.length - 1,
            shouldSelectBoundarySelectors: true
          };
        }
        if (typeof selectedSections === 'number') {
          return {
            startIndex: selectedSections,
            endIndex: selectedSections
          };
        }
        if (typeof selectedSections === 'string') {
          const selectedSectionIndex = state.sections.findIndex(section => section.type === selectedSections);
          return {
            startIndex: selectedSectionIndex,
            endIndex: selectedSectionIndex
          };
        }
        return selectedSections;
      }, [selectedSections, state.sections]);
      const publishValue = ({
        value,
        referenceValue,
        sections
      }) => {
        setState(prevState => _extends({}, prevState, {
          sections,
          value,
          referenceValue,
          tempValueStrAndroid: null
        }));
        const context = {
          validationError: validator({
            adapter,
            value,
            props: _extends({}, internalProps, {
              value,
              timezone
            })
          })
        };
        handleValueChange(value, context);
      };
      const setSectionValue = (sectionIndex, newSectionValue) => {
        const newSections = [...state.sections];
        newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {
          value: newSectionValue,
          modified: true
        });
        return addPositionPropertiesToSections(newSections, isRTL);
      };
      const clearValue = () => {
        if (valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue)) {
          return;
        }
        publishValue({
          value: valueManager.emptyValue,
          referenceValue: state.referenceValue,
          sections: getSectionsFromValue(valueManager.emptyValue)
        });
      };
      const clearActiveSection = () => {
        if (selectedSectionIndexes == null) {
          return;
        }
        const activeSection = state.sections[selectedSectionIndexes.startIndex];
        if (activeSection.value === '') {
          return;
        }
        const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
        const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter(section => section.value !== '').length;
        const isTheOnlyNonEmptySection = nonEmptySectionCountBefore === 1;
        const newSections = setSectionValue(selectedSectionIndexes.startIndex, '');
        const newActiveDate = isTheOnlyNonEmptySection ? null : utils.date(new Date(''));
        const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
        if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {
          publishValue(_extends({}, newValues, {
            sections: newSections
          }));
        } else {
          setState(prevState => _extends({}, prevState, newValues, {
            sections: newSections,
            tempValueStrAndroid: null
          }));
        }
      };
      const updateValueFromValueStr = valueStr => {
        const parseDateStr = (dateStr, referenceDate) => {
          const date = utils.parse(dateStr, format);
          if (date == null || !utils.isValid(date)) {
            return null;
          }
          const sections = splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);
          return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);
        };
        const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);
        const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);
        publishValue({
          value: newValue,
          referenceValue: newReferenceValue,
          sections: getSectionsFromValue(newValue, state.sections)
        });
      };
      const updateSectionValue = ({
        activeSection,
        newSectionValue,
        shouldGoToNextSection
      }) => {
        /**
         * 1. Decide which section should be focused
         */
        if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {
          setSelectedSections(selectedSectionIndexes.startIndex + 1);
        } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
          setSelectedSections(selectedSectionIndexes.startIndex);
        }

        /**
         * 2. Try to build a valid date from the new section value
         */
        const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
        const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);
        const newActiveDateSections = activeDateManager.getSections(newSections);
        const newActiveDate = getDateFromDateSections(utils, newActiveDateSections);
        let values;
        let shouldPublish;

        /**
         * If the new date is valid,
         * Then we merge the value of the modified sections into the reference date.
         * This makes sure that we don't lose some information of the initial date (like the time on a date field).
         */
        if (newActiveDate != null && utils.isValid(newActiveDate)) {
          const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);
          values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);
          shouldPublish = true;
        } else {
          values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
          shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));
        }

        /**
         * Publish or update the internal state with the new value and sections.
         */
        if (shouldPublish) {
          return publishValue(_extends({}, values, {
            sections: newSections
          }));
        }
        return setState(prevState => _extends({}, prevState, values, {
          sections: newSections,
          tempValueStrAndroid: null
        }));
      };
      const setTempAndroidValueStr = tempValueStrAndroid => setState(prev => _extends({}, prev, {
        tempValueStrAndroid
      }));
      React__namespace.useEffect(() => {
        const sections = getSectionsFromValue(state.value);
        setState(prevState => _extends({}, prevState, {
          sections
        }));
      }, [format, utils.locale]); // eslint-disable-line react-hooks/exhaustive-deps

      React__namespace.useEffect(() => {
        let shouldUpdate = false;
        if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {
          shouldUpdate = true;
        } else {
          shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);
        }
        if (shouldUpdate) {
          setState(prevState => _extends({}, prevState, {
            value: valueFromTheOutside,
            referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),
            sections: getSectionsFromValue(valueFromTheOutside)
          }));
        }
      }, [valueFromTheOutside]); // eslint-disable-line react-hooks/exhaustive-deps

      return {
        state,
        selectedSectionIndexes,
        setSelectedSections,
        clearValue,
        clearActiveSection,
        updateSectionValue,
        updateValueFromValueStr,
        setTempAndroidValueStr,
        sectionsValueBoundaries,
        placeholder,
        timezone
      };
    };

    /**
     * The letter editing and the numeric editing each define a `CharacterEditingApplier`.
     * This function decides what the new section value should be and if the focus should switch to the next section.
     *
     * If it returns `null`, then the section value is not updated and the focus does not move.
     */

    /**
     * Function called by `applyQuery` which decides:
     * - what is the new section value ?
     * - should the query used to get this value be stored for the next key press ?
     *
     * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,
     * Then we store the query and update the section with the new value.
     *
     * If it returns `{ saveQuery: true` },
     * Then we store the query and don't update the section.
     *
     * If it returns `{ saveQuery: false },
     * Then we do nothing.
     */

    const QUERY_LIFE_DURATION_MS = 5000;
    const isQueryResponseWithoutValue = response => response.saveQuery != null;

    /**
     * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).
     * This hook has two main editing behaviors
     *
     * 1. The numeric editing when the user presses a digit
     * 2. The letter editing when the user presses another key
     */
    const useFieldCharacterEditing = ({
      sections,
      updateSectionValue,
      sectionsValueBoundaries,
      setTempAndroidValueStr,
      timezone
    }) => {
      const utils = useUtils();
      const [query, setQuery] = React__namespace.useState(null);
      const resetQuery = useEventCallback(() => setQuery(null));
      React__namespace.useEffect(() => {
        var _sections$query$secti;
        if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {
          resetQuery();
        }
      }, [sections, query, resetQuery]);
      React__namespace.useEffect(() => {
        if (query != null) {
          const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);
          return () => {
            window.clearTimeout(timeout);
          };
        }
        return () => {};
      }, [query, resetQuery]);
      const applyQuery = ({
        keyPressed,
        sectionIndex
      }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {
        const cleanKeyPressed = keyPressed.toLowerCase();
        const activeSection = sections[sectionIndex];

        // The current query targets the section being editing
        // We can try to concatenated value
        if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {
          const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;
          const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);
          if (!isQueryResponseWithoutValue(queryResponse)) {
            setQuery({
              sectionIndex,
              value: concatenatedQueryValue,
              sectionType: activeSection.type
            });
            return queryResponse;
          }
        }
        const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);
        if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {
          resetQuery();
          return null;
        }
        setQuery({
          sectionIndex,
          value: cleanKeyPressed,
          sectionType: activeSection.type
        });
        if (isQueryResponseWithoutValue(queryResponse)) {
          return null;
        }
        return queryResponse;
      };
      const applyLetterEditing = params => {
        const findMatchingOptions = (format, options, queryValue) => {
          const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));
          if (matchingValues.length === 0) {
            return {
              saveQuery: false
            };
          }
          return {
            sectionValue: matchingValues[0],
            shouldGoToNextSection: matchingValues.length === 1
          };
        };
        const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {
          const getOptions = format => getLetterEditingOptions(utils, timezone, activeSection.type, format);
          if (activeSection.contentType === 'letter') {
            return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);
          }

          // When editing a digit-format month / weekDay and the user presses a letter,
          // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.
          // We just have to make sure that the default month / weekDay format is a letter format,
          if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {
            const fallbackOptions = getOptions(fallbackFormat);
            const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);
            if (isQueryResponseWithoutValue(response)) {
              return {
                saveQuery: false
              };
            }
            return _extends({}, response, {
              sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)
            });
          }
          return {
            saveQuery: false
          };
        };
        const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
          switch (activeSection.type) {
            case 'month':
              {
                const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);
                return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);
              }
            case 'weekDay':
              {
                const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();
                return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);
              }
            case 'meridiem':
              {
                return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);
              }
            default:
              {
                return {
                  saveQuery: false
                };
              }
          }
        };
        return applyQuery(params, getFirstSectionValueMatchingWithQuery);
      };
      const applyNumericEditing = params => {
        const getNewSectionValue = (queryValue, section) => {
          const queryValueNumber = Number(`${queryValue}`);
          const sectionBoundaries = sectionsValueBoundaries[section.type]({
            currentDate: null,
            format: section.format,
            contentType: section.contentType
          });
          if (queryValueNumber > sectionBoundaries.maximum) {
            return {
              saveQuery: false
            };
          }

          // If the user types `0` on a month section,
          // It is below the minimum, but we want to store the `0` in the query,
          // So that when he pressed `1`, it will store `01` and move to the next section.
          if (queryValueNumber < sectionBoundaries.minimum) {
            return {
              saveQuery: true
            };
          }
          const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;
          const newSectionValue = cleanDigitSectionValue(utils, timezone, queryValueNumber, sectionBoundaries, section);
          return {
            sectionValue: newSectionValue,
            shouldGoToNextSection
          };
        };
        const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
          if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {
            return getNewSectionValue(queryValue, activeSection);
          }

          // When editing a letter-format month and the user presses a digit,
          // We can support the numeric editing by using the digit-format month and re-formatting the result.
          if (activeSection.type === 'month') {
            const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, 'digit', 'month', 'MM');
            const response = getNewSectionValue(queryValue, {
              type: activeSection.type,
              format: 'MM',
              hasLeadingZerosInFormat,
              hasLeadingZerosInInput: true,
              contentType: 'digit',
              maxLength: 2
            });
            if (isQueryResponseWithoutValue(response)) {
              return response;
            }
            const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);
            return _extends({}, response, {
              sectionValue: formattedValue
            });
          }

          // When editing a letter-format weekDay and the user presses a digit,
          // We can support the numeric editing by returning the nth day in the week day array.
          if (activeSection.type === 'weekDay') {
            const response = getNewSectionValue(queryValue, activeSection);
            if (isQueryResponseWithoutValue(response)) {
              return response;
            }
            const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];
            return _extends({}, response, {
              sectionValue: formattedValue
            });
          }
          return {
            saveQuery: false
          };
        };
        return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => !Number.isNaN(Number(queryValue)));
      };
      const applyCharacterEditing = useEventCallback(params => {
        const activeSection = sections[params.sectionIndex];
        const isNumericEditing = !Number.isNaN(Number(params.keyPressed));
        const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);
        if (response == null) {
          setTempAndroidValueStr(null);
        } else {
          updateSectionValue({
            activeSection,
            newSectionValue: response.sectionValue,
            shouldGoToNextSection: response.shouldGoToNextSection
          });
        }
      });
      return {
        applyCharacterEditing,
        resetCharacterQuery: resetQuery
      };
    };

    /* Use it instead of .includes method for IE support */
    function arrayIncludes(array, itemOrItems) {
      if (Array.isArray(itemOrItems)) {
        return itemOrItems.every(item => array.indexOf(item) !== -1);
      }
      return array.indexOf(itemOrItems) !== -1;
    }
    const onSpaceOrEnter = (innerFn, externalEvent) => event => {
      if (event.key === 'Enter' || event.key === ' ') {
        innerFn(event);

        // prevent any side effects
        event.preventDefault();
        event.stopPropagation();
      }
      if (externalEvent) {
        externalEvent(event);
      }
    };

    // https://www.abeautifulsite.net/posts/finding-the-active-element-in-a-shadow-root/
    const getActiveElement = (root = document) => {
      const activeEl = root.activeElement;
      if (!activeEl) {
        return null;
      }
      if (activeEl.shadowRoot) {
        return getActiveElement(activeEl.shadowRoot);
      }
      return activeEl;
    };

    const _excluded$k = ["onClick", "onKeyDown", "onFocus", "onBlur", "onMouseUp", "onPaste", "error", "clearable", "onClear", "disabled"];
    const useField = params => {
      const utils = useUtils();
      const {
        state,
        selectedSectionIndexes,
        setSelectedSections,
        clearValue,
        clearActiveSection,
        updateSectionValue,
        updateValueFromValueStr,
        setTempAndroidValueStr,
        sectionsValueBoundaries,
        placeholder,
        timezone
      } = useFieldState(params);
      const {
          inputRef: inputRefProp,
          internalProps,
          internalProps: {
            readOnly = false,
            unstableFieldRef,
            minutesStep
          },
          forwardedProps: {
            onClick,
            onKeyDown,
            onFocus,
            onBlur,
            onMouseUp,
            onPaste,
            error,
            clearable,
            onClear,
            disabled
          },
          fieldValueManager,
          valueManager,
          validator
        } = params,
        otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded$k);
      const {
        applyCharacterEditing,
        resetCharacterQuery
      } = useFieldCharacterEditing({
        sections: state.sections,
        updateSectionValue,
        sectionsValueBoundaries,
        setTempAndroidValueStr,
        timezone
      });
      const inputRef = React__namespace.useRef(null);
      const handleRef = useForkRef(inputRefProp, inputRef);
      const focusTimeoutRef = React__namespace.useRef(undefined);
      const theme = useTheme();
      const isRTL = theme.direction === 'rtl';
      const sectionOrder = React__namespace.useMemo(() => getSectionOrder(state.sections, isRTL), [state.sections, isRTL]);
      const syncSelectionFromDOM = () => {
        var _selectionStart;
        if (readOnly) {
          setSelectedSections(null);
          return;
        }
        const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;
        let nextSectionIndex;
        if (browserStartIndex <= state.sections[0].startInInput) {
          // Special case if browser index is in invisible characters at the beginning
          nextSectionIndex = 1;
        } else if (browserStartIndex >= state.sections[state.sections.length - 1].endInInput) {
          // If the click is after the last character of the input, then we want to select the 1st section.
          nextSectionIndex = 1;
        } else {
          nextSectionIndex = state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);
        }
        const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
        setSelectedSections(sectionIndex);
      };
      const handleInputClick = useEventCallback((event, ...args) => {
        // The click event on the clear button would propagate to the input, trigger this handler and result in a wrong section selection.
        // We avoid this by checking if the call of `handleInputClick` is actually intended, or a side effect.
        if (event.isDefaultPrevented()) {
          return;
        }
        onClick == null || onClick(event, ...args);
        syncSelectionFromDOM();
      });
      const handleInputMouseUp = useEventCallback(event => {
        onMouseUp == null || onMouseUp(event);

        // Without this, the browser will remove the selected when clicking inside an already-selected section.
        event.preventDefault();
      });
      const handleInputFocus = useEventCallback((...args) => {
        onFocus == null || onFocus(...args);
        // The ref is guaranteed to be resolved at this point.
        const input = inputRef.current;
        window.clearTimeout(focusTimeoutRef.current);
        focusTimeoutRef.current = setTimeout(() => {
          // The ref changed, the component got remounted, the focus event is no longer relevant.
          if (!input || input !== inputRef.current) {
            return;
          }
          if (selectedSectionIndexes != null || readOnly) {
            return;
          }
          if (
          // avoid selecting all sections when focusing empty field without value
          input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {
            setSelectedSections('all');
          } else {
            syncSelectionFromDOM();
          }
        });
      });
      const handleInputBlur = useEventCallback((...args) => {
        onBlur == null || onBlur(...args);
        setSelectedSections(null);
      });
      const handleInputPaste = useEventCallback(event => {
        onPaste == null || onPaste(event);
        if (readOnly) {
          event.preventDefault();
          return;
        }
        const pastedValue = event.clipboardData.getData('text');
        if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {
          const activeSection = state.sections[selectedSectionIndexes.startIndex];
          const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);
          const digitsOnly = /^[0-9]+$/.test(pastedValue);
          const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);
          const isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly || activeSection.contentType === 'digit-with-letter' && digitsAndLetterOnly;
          if (isValidPastedValue) {
            // Early return to let the paste update section, value
            return;
          }
          if (lettersOnly || digitsOnly) {
            // The pasted value correspond to a single section but not the expected type
            // skip the modification
            event.preventDefault();
            return;
          }
        }
        event.preventDefault();
        resetCharacterQuery();
        updateValueFromValueStr(pastedValue);
      });
      const handleInputChange = useEventCallback(event => {
        if (readOnly) {
          return;
        }
        const targetValue = event.target.value;
        const eventData = event.nativeEvent.data;
        // Calling `.fill(04/11/2022)` in playwright will trigger a change event with the requested content to insert in `event.nativeEvent.data`
        // usual changes have only the currently typed character in the `event.nativeEvent.data`
        const shouldUseEventData = eventData && eventData.length > 1;
        const valueStr = shouldUseEventData ? eventData : targetValue;
        const cleanValueStr = cleanString(valueStr);

        // If no section is selected or eventData should be used, we just try to parse the new value
        // This line is mostly triggered by imperative code / application tests.
        if (selectedSectionIndexes == null || shouldUseEventData) {
          updateValueFromValueStr(shouldUseEventData ? eventData : cleanValueStr);
          return;
        }
        let keyPressed;
        if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1 && cleanValueStr.length === 1) {
          keyPressed = cleanValueStr;
        } else {
          const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));
          let startOfDiffIndex = -1;
          let endOfDiffIndex = -1;
          for (let i = 0; i < prevValueStr.length; i += 1) {
            if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {
              startOfDiffIndex = i;
            }
            if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {
              endOfDiffIndex = i;
            }
          }
          const activeSection = state.sections[selectedSectionIndexes.startIndex];
          const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;
          if (hasDiffOutsideOfActiveSection) {
            // TODO: Support if the new date is valid
            return;
          }

          // The active section being selected, the browser has replaced its value with the key pressed by the user.
          const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;
          keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || '').length, activeSectionEndRelativeToNewValue);
        }
        if (isAndroid() && keyPressed.length === 0) {
          setTempAndroidValueStr(valueStr);
          return;
        }
        applyCharacterEditing({
          keyPressed,
          sectionIndex: selectedSectionIndexes.startIndex
        });
      });
      const handleInputKeyDown = useEventCallback(event => {
        onKeyDown == null || onKeyDown(event);

        // eslint-disable-next-line default-case
        switch (true) {
          // Select all
          case event.key === 'a' && (event.ctrlKey || event.metaKey):
            {
              // prevent default to make sure that the next line "select all" while updating
              // the internal state at the same time.
              event.preventDefault();
              setSelectedSections('all');
              break;
            }

          // Move selection to next section
          case event.key === 'ArrowRight':
            {
              event.preventDefault();
              if (selectedSectionIndexes == null) {
                setSelectedSections(sectionOrder.startIndex);
              } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
                setSelectedSections(selectedSectionIndexes.endIndex);
              } else {
                const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;
                if (nextSectionIndex !== null) {
                  setSelectedSections(nextSectionIndex);
                }
              }
              break;
            }

          // Move selection to previous section
          case event.key === 'ArrowLeft':
            {
              event.preventDefault();
              if (selectedSectionIndexes == null) {
                setSelectedSections(sectionOrder.endIndex);
              } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
                setSelectedSections(selectedSectionIndexes.startIndex);
              } else {
                const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;
                if (nextSectionIndex !== null) {
                  setSelectedSections(nextSectionIndex);
                }
              }
              break;
            }

          // Reset the value of the selected section
          case ['Backspace', 'Delete'].includes(event.key):
            {
              event.preventDefault();
              if (readOnly) {
                break;
              }
              if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {
                clearValue();
              } else {
                clearActiveSection();
              }
              resetCharacterQuery();
              break;
            }

          // Increment / decrement the selected section value
          case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):
            {
              event.preventDefault();
              if (readOnly || selectedSectionIndexes == null) {
                break;
              }
              const activeSection = state.sections[selectedSectionIndexes.startIndex];
              const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
              const newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date, {
                minutesStep
              });
              updateSectionValue({
                activeSection,
                newSectionValue,
                shouldGoToNextSection: false
              });
              break;
            }
        }
      });
      useEnhancedEffect$1(() => {
        if (!inputRef.current) {
          return;
        }
        if (selectedSectionIndexes == null) {
          if (inputRef.current.scrollLeft) {
            // Ensure that input content is not marked as selected.
            // setting selection range to 0 causes issues in Safari.
            // https://bugs.webkit.org/show_bug.cgi?id=224425
            inputRef.current.scrollLeft = 0;
          }
          return;
        }
        const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];
        const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];
        let selectionStart = firstSelectedSection.startInInput;
        let selectionEnd = lastSelectedSection.endInInput;
        if (selectedSectionIndexes.shouldSelectBoundarySelectors) {
          selectionStart -= firstSelectedSection.startSeparator.length;
          selectionEnd += lastSelectedSection.endSeparator.length;
        }
        if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {
          // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321
          const currentScrollTop = inputRef.current.scrollTop;
          // On multi input range pickers we want to update selection range only for the active input
          // This helps avoiding the focus jumping on Safari https://github.com/mui/mui-x/issues/9003
          // because WebKit implements the `setSelectionRange` based on the spec: https://bugs.webkit.org/show_bug.cgi?id=224425
          if (inputRef.current === getActiveElement(document)) {
            inputRef.current.setSelectionRange(selectionStart, selectionEnd);
          }
          // Even reading this variable seems to do the trick, but also setting it just to make use of it
          inputRef.current.scrollTop = currentScrollTop;
        }
      });
      const validationError = useValidation(_extends({}, internalProps, {
        value: state.value,
        timezone
      }), validator, valueManager.isSameError, valueManager.defaultErrorState);
      const inputError = React__namespace.useMemo(() => {
        // only override when `error` is undefined.
        // in case of multi input fields, the `error` value is provided externally and will always be defined.
        if (error !== undefined) {
          return error;
        }
        return valueManager.hasError(validationError);
      }, [valueManager, validationError, error]);
      React__namespace.useEffect(() => {
        if (!inputError && !selectedSectionIndexes) {
          resetCharacterQuery();
        }
      }, [state.referenceValue, selectedSectionIndexes, inputError]); // eslint-disable-line react-hooks/exhaustive-deps

      React__namespace.useEffect(() => {
        // Select the right section when focused on mount (`autoFocus = true` on the input)
        if (inputRef.current && inputRef.current === document.activeElement) {
          setSelectedSections('all');
        }
        return () => window.clearTimeout(focusTimeoutRef.current);
      }, []); // eslint-disable-line react-hooks/exhaustive-deps

      // If `state.tempValueStrAndroid` is still defined when running `useEffect`,
      // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.
      // This causes a small flickering on Android,
      // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.
      React__namespace.useEffect(() => {
        if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {
          resetCharacterQuery();
          clearActiveSection();
        }
      }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps

      const valueStr = React__namespace.useMemo(() => {
        var _state$tempValueStrAn;
        return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);
      }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);
      const inputMode = React__namespace.useMemo(() => {
        if (selectedSectionIndexes == null) {
          return 'text';
        }
        if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {
          return 'text';
        }
        return 'numeric';
      }, [selectedSectionIndexes, state.sections]);
      const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);
      const areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);
      const shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;
      React__namespace.useImperativeHandle(unstableFieldRef, () => ({
        getSections: () => state.sections,
        getActiveSectionIndex: () => {
          var _selectionStart2, _selectionEnd;
          const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;
          const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;
          if (browserStartIndex === 0 && browserEndIndex === 0) {
            return null;
          }
          const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.
          : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);
          return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
        },
        setSelectedSections: activeSectionIndex => setSelectedSections(activeSectionIndex)
      }));
      const handleClearValue = useEventCallback((event, ...args) => {
        var _inputRef$current;
        event.preventDefault();
        onClear == null || onClear(event, ...args);
        clearValue();
        inputRef == null || (_inputRef$current = inputRef.current) == null || _inputRef$current.focus();
        setSelectedSections(0);
      });
      return _extends({
        placeholder,
        autoComplete: 'off',
        disabled: Boolean(disabled)
      }, otherForwardedProps, {
        value: shouldShowPlaceholder ? '' : valueStr,
        inputMode,
        readOnly,
        onClick: handleInputClick,
        onFocus: handleInputFocus,
        onBlur: handleInputBlur,
        onPaste: handleInputPaste,
        onChange: handleInputChange,
        onKeyDown: handleInputKeyDown,
        onMouseUp: handleInputMouseUp,
        onClear: handleClearValue,
        error: inputError,
        ref: handleRef,
        clearable: Boolean(clearable && !areAllSectionsEmpty && !readOnly && !disabled)
      });
    };

    const DATE_VALIDATION_PROP_NAMES = ['disablePast', 'disableFuture', 'minDate', 'maxDate', 'shouldDisableDate', 'shouldDisableMonth', 'shouldDisableYear'];
    const TIME_VALIDATION_PROP_NAMES = ['disablePast', 'disableFuture', 'minTime', 'maxTime', 'shouldDisableClock', 'shouldDisableTime', 'minutesStep', 'ampm', 'disableIgnoringDatePartForTimeValidation'];
    const DATE_TIME_VALIDATION_PROP_NAMES = ['minDateTime', 'maxDateTime'];
    const VALIDATION_PROP_NAMES = [...DATE_VALIDATION_PROP_NAMES, ...TIME_VALIDATION_PROP_NAMES, ...DATE_TIME_VALIDATION_PROP_NAMES];
    /**
     * Extract the validation props for the props received by a component.
     * Limit the risk of forgetting some of them and reduce the bundle size.
     */
    const extractValidationProps = props => VALIDATION_PROP_NAMES.reduce((extractedProps, propName) => {
      if (props.hasOwnProperty(propName)) {
        extractedProps[propName] = props[propName];
      }
      return extractedProps;
    }, {});

    const SHARED_FIELD_INTERNAL_PROP_NAMES = ['value', 'defaultValue', 'referenceDate', 'format', 'formatDensity', 'onChange', 'timezone', 'readOnly', 'onError', 'shouldRespectLeadingZeros', 'selectedSections', 'onSelectedSectionsChange', 'unstableFieldRef'];
    const splitFieldInternalAndForwardedProps = (props, valueType) => {
      const forwardedProps = _extends({}, props);
      const internalProps = {};
      const extractProp = propName => {
        if (forwardedProps.hasOwnProperty(propName)) {
          // @ts-ignore
          internalProps[propName] = forwardedProps[propName];
          delete forwardedProps[propName];
        }
      };
      SHARED_FIELD_INTERNAL_PROP_NAMES.forEach(extractProp);
      if (valueType === 'date') {
        DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
      } else if (valueType === 'time') {
        TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
      } else if (valueType === 'date-time') {
        DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
        TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
        DATE_TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
      }
      return {
        forwardedProps,
        internalProps
      };
    };

    function getInputAdornmentUtilityClass(slot) {
      return generateUtilityClass('MuiInputAdornment', slot);
    }
    const inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);
    var inputAdornmentClasses$1 = inputAdornmentClasses;

    var _span;
    const _excluded$j = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
    const overridesResolver$1 = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];
    };
    const useUtilityClasses$e = ownerState => {
      const {
        classes,
        disablePointerEvents,
        hiddenLabel,
        position,
        size,
        variant
      } = ownerState;
      const slots = {
        root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]
      };
      return composeClasses(slots, getInputAdornmentUtilityClass, classes);
    };
    const InputAdornmentRoot = styled$1('div', {
      name: 'MuiInputAdornment',
      slot: 'Root',
      overridesResolver: overridesResolver$1
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      height: '0.01em',
      // Fix IE11 flexbox alignment. To remove at some point.
      maxHeight: '2em',
      alignItems: 'center',
      whiteSpace: 'nowrap',
      color: (theme.vars || theme).palette.action.active
    }, ownerState.variant === 'filled' && {
      // Styles applied to the root element if `variant="filled"`.
      [`&.${inputAdornmentClasses$1.positionStart}&:not(.${inputAdornmentClasses$1.hiddenLabel})`]: {
        marginTop: 16
      }
    }, ownerState.position === 'start' && {
      // Styles applied to the root element if `position="start"`.
      marginRight: 8
    }, ownerState.position === 'end' && {
      // Styles applied to the root element if `position="end"`.
      marginLeft: 8
    }, ownerState.disablePointerEvents === true && {
      // Styles applied to the root element if `disablePointerEvents={true}`.
      pointerEvents: 'none'
    }));
    const InputAdornment = /*#__PURE__*/React__namespace.forwardRef(function InputAdornment(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiInputAdornment'
      });
      const {
          children,
          className,
          component = 'div',
          disablePointerEvents = false,
          disableTypography = false,
          position,
          variant: variantProp
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$j);
      const muiFormControl = useFormControl() || {};
      let variant = variantProp;
      if (variantProp && muiFormControl.variant) ;
      if (muiFormControl && !variant) {
        variant = muiFormControl.variant;
      }
      const ownerState = _extends({}, props, {
        hiddenLabel: muiFormControl.hiddenLabel,
        size: muiFormControl.size,
        disablePointerEvents,
        position,
        variant
      });
      const classes = useUtilityClasses$e(ownerState);
      return /*#__PURE__*/jsxRuntime_1(FormControlContext$1.Provider, {
        value: null,
        children: /*#__PURE__*/jsxRuntime_1(InputAdornmentRoot, _extends({
          as: component,
          ownerState: ownerState,
          className: clsx(classes.root, className),
          ref: ref
        }, other, {
          children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/jsxRuntime_1(Typography$1, {
            color: "text.secondary",
            children: children
          }) : /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
            children: [position === 'start' ? /* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/jsxRuntime_1("span", {
              className: "notranslate",
              children: "\u200B"
            })) : null, children]
          })
        }))
      });
    });
    var MuiInputAdornment = InputAdornment;

    function getDialogContentUtilityClass(slot) {
      return generateUtilityClass('MuiDialogContent', slot);
    }
    generateUtilityClasses('MuiDialogContent', ['root', 'dividers']);

    const dialogTitleClasses = generateUtilityClasses('MuiDialogTitle', ['root']);
    var dialogTitleClasses$1 = dialogTitleClasses;

    const _excluded$i = ["className", "dividers"];
    const useUtilityClasses$d = ownerState => {
      const {
        classes,
        dividers
      } = ownerState;
      const slots = {
        root: ['root', dividers && 'dividers']
      };
      return composeClasses(slots, getDialogContentUtilityClass, classes);
    };
    const DialogContentRoot = styled$1('div', {
      name: 'MuiDialogContent',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.dividers && styles.dividers];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      flex: '1 1 auto',
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: 'touch',
      overflowY: 'auto',
      padding: '20px 24px'
    }, ownerState.dividers ? {
      padding: '16px 24px',
      borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
    } : {
      [`.${dialogTitleClasses$1.root} + &`]: {
        paddingTop: 0
      }
    }));
    const DialogContent = /*#__PURE__*/React__namespace.forwardRef(function DialogContent(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDialogContent'
      });
      const {
          className,
          dividers = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$i);
      const ownerState = _extends({}, props, {
        dividers
      });
      const classes = useUtilityClasses$d(ownerState);
      return /*#__PURE__*/jsxRuntime_1(DialogContentRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other));
    });
    var DialogContent$1 = DialogContent;

    function getDialogUtilityClass(slot) {
      return generateUtilityClass('MuiDialog', slot);
    }
    const dialogClasses = generateUtilityClasses('MuiDialog', ['root', 'scrollPaper', 'scrollBody', 'container', 'paper', 'paperScrollPaper', 'paperScrollBody', 'paperWidthFalse', 'paperWidthXs', 'paperWidthSm', 'paperWidthMd', 'paperWidthLg', 'paperWidthXl', 'paperFullWidth', 'paperFullScreen']);
    var dialogClasses$1 = dialogClasses;

    const DialogContext = /*#__PURE__*/React__namespace.createContext({});
    var DialogContext$1 = DialogContext;

    const _excluded$h = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
    const DialogBackdrop = styled$1(Backdrop$1, {
      name: 'MuiDialog',
      slot: 'Backdrop',
      overrides: (props, styles) => styles.backdrop
    })({
      // Improve scrollable dialog support.
      zIndex: -1
    });
    const useUtilityClasses$c = ownerState => {
      const {
        classes,
        scroll,
        maxWidth,
        fullWidth,
        fullScreen
      } = ownerState;
      const slots = {
        root: ['root'],
        container: ['container', `scroll${capitalize(scroll)}`],
        paper: ['paper', `paperScroll${capitalize(scroll)}`, `paperWidth${capitalize(String(maxWidth))}`, fullWidth && 'paperFullWidth', fullScreen && 'paperFullScreen']
      };
      return composeClasses(slots, getDialogUtilityClass, classes);
    };
    const DialogRoot = styled$1(Modal$1, {
      name: 'MuiDialog',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({
      '@media print': {
        // Use !important to override the Modal inline-style.
        position: 'absolute !important'
      }
    });
    const DialogContainer = styled$1('div', {
      name: 'MuiDialog',
      slot: 'Container',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.container, styles[`scroll${capitalize(ownerState.scroll)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      height: '100%',
      '@media print': {
        height: 'auto'
      },
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0
    }, ownerState.scroll === 'paper' && {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }, ownerState.scroll === 'body' && {
      overflowY: 'auto',
      overflowX: 'hidden',
      textAlign: 'center',
      '&:after': {
        content: '""',
        display: 'inline-block',
        verticalAlign: 'middle',
        height: '100%',
        width: '0'
      }
    }));
    const DialogPaper = styled$1(MuiPaper, {
      name: 'MuiDialog',
      slot: 'Paper',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.paper, styles[`scrollPaper${capitalize(ownerState.scroll)}`], styles[`paperWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles.paperFullWidth, ownerState.fullScreen && styles.paperFullScreen];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      margin: 32,
      position: 'relative',
      overflowY: 'auto',
      // Fix IE11 issue, to remove at some point.
      '@media print': {
        overflowY: 'visible',
        boxShadow: 'none'
      }
    }, ownerState.scroll === 'paper' && {
      display: 'flex',
      flexDirection: 'column',
      maxHeight: 'calc(100% - 64px)'
    }, ownerState.scroll === 'body' && {
      display: 'inline-block',
      verticalAlign: 'middle',
      textAlign: 'left' // 'initial' doesn't work on IE11
    }, !ownerState.maxWidth && {
      maxWidth: 'calc(100% - 64px)'
    }, ownerState.maxWidth === 'xs' && {
      maxWidth: theme.breakpoints.unit === 'px' ? Math.max(theme.breakpoints.values.xs, 444) : `max(${theme.breakpoints.values.xs}${theme.breakpoints.unit}, 444px)`,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
          maxWidth: 'calc(100% - 64px)'
        }
      }
    }, ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {
      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
          maxWidth: 'calc(100% - 64px)'
        }
      }
    }, ownerState.fullWidth && {
      width: 'calc(100% - 64px)'
    }, ownerState.fullScreen && {
      margin: 0,
      width: '100%',
      maxWidth: '100%',
      height: '100%',
      maxHeight: 'none',
      borderRadius: 0,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        margin: 0,
        maxWidth: '100%'
      }
    }));

    /**
     * Dialogs are overlaid modal paper based components with a backdrop.
     */
    const Dialog = /*#__PURE__*/React__namespace.forwardRef(function Dialog(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDialog'
      });
      const theme = useTheme();
      const defaultTransitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
      };
      const {
          'aria-describedby': ariaDescribedby,
          'aria-labelledby': ariaLabelledbyProp,
          BackdropComponent,
          BackdropProps,
          children,
          className,
          disableEscapeKeyDown = false,
          fullScreen = false,
          fullWidth = false,
          maxWidth = 'sm',
          onBackdropClick,
          onClose,
          open,
          PaperComponent = MuiPaper,
          PaperProps = {},
          scroll = 'paper',
          TransitionComponent = Fade$1,
          transitionDuration = defaultTransitionDuration,
          TransitionProps
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$h);
      const ownerState = _extends({}, props, {
        disableEscapeKeyDown,
        fullScreen,
        fullWidth,
        maxWidth,
        scroll
      });
      const classes = useUtilityClasses$c(ownerState);
      const backdropClick = React__namespace.useRef();
      const handleMouseDown = event => {
        // We don't want to close the dialog when clicking the dialog content.
        // Make sure the event starts and ends on the same DOM element.
        backdropClick.current = event.target === event.currentTarget;
      };
      const handleBackdropClick = event => {
        // Ignore the events not coming from the "backdrop".
        if (!backdropClick.current) {
          return;
        }
        backdropClick.current = null;
        if (onBackdropClick) {
          onBackdropClick(event);
        }
        if (onClose) {
          onClose(event, 'backdropClick');
        }
      };
      const ariaLabelledby = useId(ariaLabelledbyProp);
      const dialogContextValue = React__namespace.useMemo(() => {
        return {
          titleId: ariaLabelledby
        };
      }, [ariaLabelledby]);
      return /*#__PURE__*/jsxRuntime_1(DialogRoot, _extends({
        className: clsx(classes.root, className),
        closeAfterTransition: true,
        components: {
          Backdrop: DialogBackdrop
        },
        componentsProps: {
          backdrop: _extends({
            transitionDuration,
            as: BackdropComponent
          }, BackdropProps)
        },
        disableEscapeKeyDown: disableEscapeKeyDown,
        onClose: onClose,
        open: open,
        ref: ref,
        onClick: handleBackdropClick,
        ownerState: ownerState
      }, other, {
        children: /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
          appear: true,
          in: open,
          timeout: transitionDuration,
          role: "presentation"
        }, TransitionProps, {
          children: /*#__PURE__*/jsxRuntime_1(DialogContainer, {
            className: clsx(classes.container),
            onMouseDown: handleMouseDown,
            ownerState: ownerState,
            children: /*#__PURE__*/jsxRuntime_1(DialogPaper, _extends({
              as: PaperComponent,
              elevation: 24,
              role: "dialog",
              "aria-describedby": ariaDescribedby,
              "aria-labelledby": ariaLabelledby
            }, PaperProps, {
              className: clsx(classes.paper, PaperProps.className),
              ownerState: ownerState,
              children: /*#__PURE__*/jsxRuntime_1(DialogContext$1.Provider, {
                value: dialogContextValue,
                children: children
              })
            }))
          })
        }))
      }));
    });
    var MuiDialog = Dialog;

    const PickersModalDialogRoot = styled$1(MuiDialog)({
      [`& .${dialogClasses$1.container}`]: {
        outline: 0
      },
      [`& .${dialogClasses$1.paper}`]: {
        outline: 0,
        minWidth: DIALOG_WIDTH
      }
    });
    const PickersModalDialogContent = styled$1(DialogContent$1)({
      '&:first-of-type': {
        padding: 0
      }
    });
    function PickersModalDialog(props) {
      var _slots$dialog, _slots$mobileTransiti;
      const {
        children,
        onDismiss,
        open,
        slots,
        slotProps
      } = props;
      const Dialog = (_slots$dialog = slots == null ? void 0 : slots.dialog) != null ? _slots$dialog : PickersModalDialogRoot;
      const Transition = (_slots$mobileTransiti = slots == null ? void 0 : slots.mobileTransition) != null ? _slots$mobileTransiti : Fade$1;
      return /*#__PURE__*/jsxRuntime_1(Dialog, _extends({
        open: open,
        onClose: onDismiss
      }, slotProps == null ? void 0 : slotProps.dialog, {
        TransitionComponent: Transition,
        TransitionProps: slotProps == null ? void 0 : slotProps.mobileTransition,
        PaperComponent: slots == null ? void 0 : slots.mobilePaper,
        PaperProps: slotProps == null ? void 0 : slotProps.mobilePaper,
        children: /*#__PURE__*/jsxRuntime_1(PickersModalDialogContent, {
          children: children
        })
      }));
    }

    const _excluded$g = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
    const PopperRoot = styled$1(Popper$1, {
      name: 'MuiPopper',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});

    /**
     *
     * Demos:
     *
     * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)
     * - [Menu](https://mui.com/material-ui/react-menu/)
     * - [Popper](https://mui.com/material-ui/react-popper/)
     *
     * API:
     *
     * - [Popper API](https://mui.com/material-ui/api/popper/)
     */
    const Popper = /*#__PURE__*/React__namespace.forwardRef(function Popper(inProps, ref) {
      var _slots$root;
      const theme = useTheme$2();
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPopper'
      });
      const {
          anchorEl,
          component,
          components,
          componentsProps,
          container,
          disablePortal,
          keepMounted,
          modifiers,
          open,
          placement,
          popperOptions,
          popperRef,
          transition,
          slots,
          slotProps
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$g);
      const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
      const otherProps = _extends({
        anchorEl,
        container,
        disablePortal,
        keepMounted,
        modifiers,
        open,
        placement,
        popperOptions,
        popperRef,
        transition
      }, other);
      return /*#__PURE__*/jsxRuntime_1(PopperRoot, _extends({
        as: component,
        direction: theme == null ? void 0 : theme.direction,
        slots: {
          root: RootComponent
        },
        slotProps: slotProps != null ? slotProps : componentsProps
      }, otherProps, {
        ref: ref
      }));
    });
    var MuiPopper = Popper;

    function getPickersPopperUtilityClass(slot) {
      return generateUtilityClass('MuiPickersPopper', slot);
    }
    generateUtilityClasses('MuiPickersPopper', ['root', 'paper']);

    /**
     * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.
     */

    /**
     * @deprecated Not used internally. Use `MediaQueryList` from lib.dom.d.ts instead.
     */

    /**
     * @deprecated Not used internally. Use `(event: MediaQueryListEvent) => void` instead.
     */

    function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
      const [match, setMatch] = React__namespace.useState(() => {
        if (noSsr && matchMedia) {
          return matchMedia(query).matches;
        }
        if (ssrMatchMedia) {
          return ssrMatchMedia(query).matches;
        }

        // Once the component is mounted, we rely on the
        // event listeners to return the correct matches value.
        return defaultMatches;
      });
      useEnhancedEffect$1(() => {
        let active = true;
        if (!matchMedia) {
          return undefined;
        }
        const queryList = matchMedia(query);
        const updateMatch = () => {
          // Workaround Safari wrong implementation of matchMedia
          // TODO can we remove it?
          // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677
          if (active) {
            setMatch(queryList.matches);
          }
        };
        updateMatch();
        // TODO: Use `addEventListener` once support for Safari < 14 is dropped
        queryList.addListener(updateMatch);
        return () => {
          active = false;
          queryList.removeListener(updateMatch);
        };
      }, [query, matchMedia]);
      return match;
    }

    // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814
    const maybeReactUseSyncExternalStore = React__namespace['useSyncExternalStore' + ''];
    function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
      const getDefaultSnapshot = React__namespace.useCallback(() => defaultMatches, [defaultMatches]);
      const getServerSnapshot = React__namespace.useMemo(() => {
        if (noSsr && matchMedia) {
          return () => matchMedia(query).matches;
        }
        if (ssrMatchMedia !== null) {
          const {
            matches
          } = ssrMatchMedia(query);
          return () => matches;
        }
        return getDefaultSnapshot;
      }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
      const [getSnapshot, subscribe] = React__namespace.useMemo(() => {
        if (matchMedia === null) {
          return [getDefaultSnapshot, () => () => {}];
        }
        const mediaQueryList = matchMedia(query);
        return [() => mediaQueryList.matches, notify => {
          // TODO: Use `addEventListener` once support for Safari < 14 is dropped
          mediaQueryList.addListener(notify);
          return () => {
            mediaQueryList.removeListener(notify);
          };
        }];
      }, [getDefaultSnapshot, matchMedia, query]);
      const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      return match;
    }
    function useMediaQuery(queryInput, options = {}) {
      const theme = useTheme$2();
      // Wait for jsdom to support the match media feature.
      // All the browsers MUI support have this built-in.
      // This defensive check is here for simplicity.
      // Most of the time, the match media logic isn't central to people tests.
      const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
      const {
        defaultMatches = false,
        matchMedia = supportMatchMedia ? window.matchMedia : null,
        ssrMatchMedia = null,
        noSsr = false
      } = getThemeProps({
        name: 'MuiUseMediaQuery',
        props: options,
        theme
      });
      let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;
      query = query.replace(/^@media( ?)/m, '');

      // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable
      const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;
      const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
      return match;
    }

    const PREFERS_REDUCED_MOTION = '@media (prefers-reduced-motion: reduce)';

    // detect if user agent has Android version < 10 or iOS version < 13
    const mobileVersionMatches = typeof navigator !== 'undefined' && navigator.userAgent.match(/android\s(\d+)|OS\s(\d+)/i);
    const androidVersion = mobileVersionMatches && mobileVersionMatches[1] ? parseInt(mobileVersionMatches[1], 10) : null;
    const iOSVersion = mobileVersionMatches && mobileVersionMatches[2] ? parseInt(mobileVersionMatches[2], 10) : null;
    const slowAnimationDevices = androidVersion && androidVersion < 10 || iOSVersion && iOSVersion < 13 || false;
    const useDefaultReduceAnimations = () => {
      const prefersReduced = useMediaQuery(PREFERS_REDUCED_MOTION, {
        defaultMatches: false
      });
      return prefersReduced || slowAnimationDevices;
    };

    const _excluded$f = ["PaperComponent", "popperPlacement", "ownerState", "children", "paperSlotProps", "paperClasses", "onPaperClick", "onPaperTouchStart"];
    const useUtilityClasses$b = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        paper: ['paper']
      };
      return composeClasses(slots, getPickersPopperUtilityClass, classes);
    };
    const PickersPopperRoot = styled$1(MuiPopper, {
      name: 'MuiPickersPopper',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })(({
      theme
    }) => ({
      zIndex: theme.zIndex.modal
    }));
    const PickersPopperPaper = styled$1(MuiPaper, {
      name: 'MuiPickersPopper',
      slot: 'Paper',
      overridesResolver: (_, styles) => styles.paper
    })(({
      ownerState
    }) => _extends({
      outline: 0,
      transformOrigin: 'top center'
    }, ownerState.placement.includes('top') && {
      transformOrigin: 'bottom center'
    }));
    function clickedRootScrollbar(event, doc) {
      return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
    }
    /**
     * Based on @mui/material/ClickAwayListener without the customization.
     * We can probably strip away even more since children won't be portaled.
     * @param {boolean} active Only listen to clicks when the popper is opened.
     * @param {(event: MouseEvent | TouchEvent) => void} onClickAway The callback to call when clicking outside the popper.
     * @returns {Array} The ref and event handler to listen to the outside clicks.
     */
    function useClickAwayListener(active, onClickAway) {
      const movedRef = React__namespace.useRef(false);
      const syntheticEventRef = React__namespace.useRef(false);
      const nodeRef = React__namespace.useRef(null);
      const activatedRef = React__namespace.useRef(false);
      React__namespace.useEffect(() => {
        if (!active) {
          return undefined;
        }

        // Ensure that this hook is not "activated" synchronously.
        // https://github.com/facebook/react/issues/20074
        function armClickAwayListener() {
          activatedRef.current = true;
        }
        document.addEventListener('mousedown', armClickAwayListener, true);
        document.addEventListener('touchstart', armClickAwayListener, true);
        return () => {
          document.removeEventListener('mousedown', armClickAwayListener, true);
          document.removeEventListener('touchstart', armClickAwayListener, true);
          activatedRef.current = false;
        };
      }, [active]);

      // The handler doesn't take event.defaultPrevented into account:
      //
      // event.preventDefault() is meant to stop default behaviors like
      // clicking a checkbox to check it, hitting a button to submit a form,
      // and hitting left arrow to move the cursor in a text input etc.
      // Only special HTML elements have these default behaviors.
      const handleClickAway = useEventCallback(event => {
        if (!activatedRef.current) {
          return;
        }

        // Given developers can stop the propagation of the synthetic event,
        // we can only be confident with a positive value.
        const insideReactTree = syntheticEventRef.current;
        syntheticEventRef.current = false;
        const doc = ownerDocument(nodeRef.current);

        // 1. IE11 support, which trigger the handleClickAway even after the unbind
        // 2. The child might render null.
        // 3. Behave like a blur listener.
        if (!nodeRef.current ||
        // is a TouchEvent?
        'clientX' in event && clickedRootScrollbar(event, doc)) {
          return;
        }

        // Do not act if user performed touchmove
        if (movedRef.current) {
          movedRef.current = false;
          return;
        }
        let insideDOM;

        // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js
        if (event.composedPath) {
          insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
        } else {
          insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
        }
        if (!insideDOM && !insideReactTree) {
          onClickAway(event);
        }
      });

      // Keep track of mouse/touch events that bubbled up through the portal.
      const handleSynthetic = () => {
        syntheticEventRef.current = true;
      };
      React__namespace.useEffect(() => {
        if (active) {
          const doc = ownerDocument(nodeRef.current);
          const handleTouchMove = () => {
            movedRef.current = true;
          };
          doc.addEventListener('touchstart', handleClickAway);
          doc.addEventListener('touchmove', handleTouchMove);
          return () => {
            doc.removeEventListener('touchstart', handleClickAway);
            doc.removeEventListener('touchmove', handleTouchMove);
          };
        }
        return undefined;
      }, [active, handleClickAway]);
      React__namespace.useEffect(() => {
        // TODO This behavior is not tested automatically
        // It's unclear whether this is due to different update semantics in test (batched in act() vs discrete on click).
        // Or if this is a timing related issues due to different Transition components
        // Once we get rid of all the manual scheduling (e.g. setTimeout(update, 0)) we can revisit this code+test.
        if (active) {
          const doc = ownerDocument(nodeRef.current);
          doc.addEventListener('click', handleClickAway);
          return () => {
            doc.removeEventListener('click', handleClickAway);
            // cleanup `handleClickAway`
            syntheticEventRef.current = false;
          };
        }
        return undefined;
      }, [active, handleClickAway]);
      return [nodeRef, handleSynthetic, handleSynthetic];
    }
    const PickersPopperPaperWrapper = /*#__PURE__*/React__namespace.forwardRef((props, ref) => {
      const {
          PaperComponent,
          popperPlacement,
          ownerState: inOwnerState,
          children,
          paperSlotProps,
          paperClasses,
          onPaperClick,
          onPaperTouchStart
          // picks up the style props provided by `Transition`
          // https://mui.com/material-ui/transitions/#child-requirement
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$f);
      const ownerState = _extends({}, inOwnerState, {
        placement: popperPlacement
      });
      const paperProps = useSlotProps({
        elementType: PaperComponent,
        externalSlotProps: paperSlotProps,
        additionalProps: {
          tabIndex: -1,
          elevation: 8,
          ref
        },
        className: paperClasses,
        ownerState
      });
      return /*#__PURE__*/jsxRuntime_1(PaperComponent, _extends({}, other, paperProps, {
        onClick: event => {
          var _paperProps$onClick;
          onPaperClick(event);
          (_paperProps$onClick = paperProps.onClick) == null || _paperProps$onClick.call(paperProps, event);
        },
        onTouchStart: event => {
          var _paperProps$onTouchSt;
          onPaperTouchStart(event);
          (_paperProps$onTouchSt = paperProps.onTouchStart) == null || _paperProps$onTouchSt.call(paperProps, event);
        },
        ownerState: ownerState,
        children: children
      }));
    });
    function PickersPopper(inProps) {
      var _slots$desktopTransit, _slots$desktopTrapFoc, _slots$desktopPaper, _slots$popper;
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersPopper'
      });
      const {
        anchorEl,
        children,
        containerRef = null,
        shouldRestoreFocus,
        onBlur,
        onDismiss,
        open,
        role,
        placement,
        slots,
        slotProps,
        reduceAnimations: inReduceAnimations
      } = props;
      React__namespace.useEffect(() => {
        function handleKeyDown(nativeEvent) {
          // IE11, Edge (prior to using Blink?) use 'Esc'
          if (open && (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc')) {
            onDismiss();
          }
        }
        document.addEventListener('keydown', handleKeyDown);
        return () => {
          document.removeEventListener('keydown', handleKeyDown);
        };
      }, [onDismiss, open]);
      const lastFocusedElementRef = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        if (role === 'tooltip' || shouldRestoreFocus && !shouldRestoreFocus()) {
          return;
        }
        if (open) {
          lastFocusedElementRef.current = getActiveElement(document);
        } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
          // make sure the button is flushed with updated label, before returning focus to it
          // avoids issue, where screen reader could fail to announce selected date after selection
          setTimeout(() => {
            if (lastFocusedElementRef.current instanceof HTMLElement) {
              lastFocusedElementRef.current.focus();
            }
          });
        }
      }, [open, role, shouldRestoreFocus]);
      const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onBlur != null ? onBlur : onDismiss);
      const paperRef = React__namespace.useRef(null);
      const handleRef = useForkRef(paperRef, containerRef);
      const handlePaperRef = useForkRef(handleRef, clickAwayRef);
      const ownerState = props;
      const classes = useUtilityClasses$b(ownerState);
      const defaultReduceAnimations = useDefaultReduceAnimations();
      const reduceAnimations = inReduceAnimations != null ? inReduceAnimations : defaultReduceAnimations;
      const handleKeyDown = event => {
        if (event.key === 'Escape') {
          // stop the propagation to avoid closing parent modal
          event.stopPropagation();
          onDismiss();
        }
      };
      const Transition = ((_slots$desktopTransit = slots == null ? void 0 : slots.desktopTransition) != null ? _slots$desktopTransit : reduceAnimations) ? Fade$1 : Grow$1;
      const FocusTrap$1 = (_slots$desktopTrapFoc = slots == null ? void 0 : slots.desktopTrapFocus) != null ? _slots$desktopTrapFoc : FocusTrap;
      const Paper = (_slots$desktopPaper = slots == null ? void 0 : slots.desktopPaper) != null ? _slots$desktopPaper : PickersPopperPaper;
      const Popper = (_slots$popper = slots == null ? void 0 : slots.popper) != null ? _slots$popper : PickersPopperRoot;
      const popperProps = useSlotProps({
        elementType: Popper,
        externalSlotProps: slotProps == null ? void 0 : slotProps.popper,
        additionalProps: {
          transition: true,
          role,
          open,
          anchorEl,
          placement,
          onKeyDown: handleKeyDown
        },
        className: classes.root,
        ownerState: props
      });
      return /*#__PURE__*/jsxRuntime_1(Popper, _extends({}, popperProps, {
        children: ({
          TransitionProps,
          placement: popperPlacement
        }) => /*#__PURE__*/jsxRuntime_1(FocusTrap$1, _extends({
          open: open,
          disableAutoFocus: true
          // pickers are managing focus position manually
          // without this prop the focus is returned to the button before `aria-label` is updated
          // which would force screen readers to read too old label
          ,
          disableRestoreFocus: true,
          disableEnforceFocus: role === 'tooltip',
          isEnabled: () => true
        }, slotProps == null ? void 0 : slotProps.desktopTrapFocus, {
          children: /*#__PURE__*/jsxRuntime_1(Transition, _extends({}, TransitionProps, slotProps == null ? void 0 : slotProps.desktopTransition, {
            children: /*#__PURE__*/jsxRuntime_1(PickersPopperPaperWrapper, {
              PaperComponent: Paper,
              ownerState: ownerState,
              popperPlacement: popperPlacement,
              ref: handlePaperRef,
              onPaperClick: onPaperClick,
              onPaperTouchStart: onPaperTouchStart,
              paperClasses: classes.paper,
              paperSlotProps: slotProps == null ? void 0 : slotProps.desktopPaper,
              children: children
            })
          }))
        }))
      }));
    }

    function getPickersToolbarUtilityClass(slot) {
      return generateUtilityClass('MuiPickersToolbar', slot);
    }
    generateUtilityClasses('MuiPickersToolbar', ['root', 'content']);

    const useUtilityClasses$a = ownerState => {
      const {
        classes,
        isLandscape
      } = ownerState;
      const slots = {
        root: ['root'],
        content: ['content'],
        penIconButton: ['penIconButton', isLandscape && 'penIconButtonLandscape']
      };
      return composeClasses(slots, getPickersToolbarUtilityClass, classes);
    };
    const PickersToolbarRoot = styled$1('div', {
      name: 'MuiPickersToolbar',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'flex-start',
      justifyContent: 'space-between',
      padding: theme.spacing(2, 3)
    }, ownerState.isLandscape && {
      height: 'auto',
      maxWidth: 160,
      padding: 16,
      justifyContent: 'flex-start',
      flexWrap: 'wrap'
    }));
    const PickersToolbarContent = styled$1('div', {
      name: 'MuiPickersToolbar',
      slot: 'Content',
      overridesResolver: (props, styles) => styles.content
    })(({
      ownerState
    }) => {
      var _ownerState$landscape;
      return {
        display: 'flex',
        flexWrap: 'wrap',
        width: '100%',
        justifyContent: ownerState.isLandscape ? 'flex-start' : 'space-between',
        flexDirection: ownerState.isLandscape ? (_ownerState$landscape = ownerState.landscapeDirection) != null ? _ownerState$landscape : 'column' : 'row',
        flex: 1,
        alignItems: ownerState.isLandscape ? 'flex-start' : 'center'
      };
    });
    const PickersToolbar = /*#__PURE__*/React__namespace.forwardRef(function PickersToolbar(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersToolbar'
      });
      const {
        children,
        className,
        toolbarTitle,
        hidden,
        titleId
      } = props;
      const ownerState = props;
      const classes = useUtilityClasses$a(ownerState);
      if (hidden) {
        return null;
      }
      return /*#__PURE__*/jsxRuntime_2(PickersToolbarRoot, {
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState,
        children: [/*#__PURE__*/jsxRuntime_1(Typography$1, {
          color: "text.secondary",
          variant: "overline",
          id: titleId,
          children: toolbarTitle
        }), /*#__PURE__*/jsxRuntime_1(PickersToolbarContent, {
          className: classes.content,
          ownerState: ownerState,
          children: children
        })]
      });
    });

    function getPickersToolbarTextUtilityClass(slot) {
      return generateUtilityClass('MuiPickersToolbarText', slot);
    }
    const pickersToolbarTextClasses = generateUtilityClasses('MuiPickersToolbarText', ['root', 'selected']);

    function getButtonUtilityClass(slot) {
      return generateUtilityClass('MuiButton', slot);
    }
    const buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'textSuccess', 'textError', 'textInfo', 'textWarning', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'outlinedSuccess', 'outlinedError', 'outlinedInfo', 'outlinedWarning', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'containedSuccess', 'containedError', 'containedInfo', 'containedWarning', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
    var buttonClasses$1 = buttonClasses;

    /**
     * @ignore - internal component.
     */
    const ButtonGroupContext = /*#__PURE__*/React__namespace.createContext({});
    var ButtonGroupContext$1 = ButtonGroupContext;

    /**
     * @ignore - internal component.
     */
    const ButtonGroupButtonContext = /*#__PURE__*/React__namespace.createContext(undefined);
    var ButtonGroupButtonContext$1 = ButtonGroupButtonContext;

    const _excluded$e = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
    const useUtilityClasses$9 = ownerState => {
      const {
        color,
        disableElevation,
        fullWidth,
        size,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ['root', variant, `${variant}${capitalize(color)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
        label: ['label'],
        startIcon: ['startIcon', `iconSize${capitalize(size)}`],
        endIcon: ['endIcon', `iconSize${capitalize(size)}`]
      };
      const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    const commonIconStyles = ownerState => _extends({}, ownerState.size === 'small' && {
      '& > *:nth-of-type(1)': {
        fontSize: 18
      }
    }, ownerState.size === 'medium' && {
      '& > *:nth-of-type(1)': {
        fontSize: 20
      }
    }, ownerState.size === 'large' && {
      '& > *:nth-of-type(1)': {
        fontSize: 22
      }
    });
    const ButtonRoot = styled$1(ButtonBase$1, {
      shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
      name: 'MuiButton',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color)}`], styles[`size${capitalize(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$palette$getCon, _theme$palette;
      const inheritContainedBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey[300] : theme.palette.grey[800];
      const inheritContainedHoverBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey.A100 : theme.palette.grey[700];
      return _extends({}, theme.typography.button, {
        minWidth: 64,
        padding: '6px 16px',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
          duration: theme.transitions.duration.short
        }),
        '&:hover': _extends({
          textDecoration: 'none',
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
          border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }, ownerState.variant === 'contained' && {
          backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
          boxShadow: (theme.vars || theme).shadows[4],
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            boxShadow: (theme.vars || theme).shadows[2],
            backgroundColor: (theme.vars || theme).palette.grey[300]
          }
        }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: (theme.vars || theme).palette[ownerState.color].main
          }
        }),
        '&:active': _extends({}, ownerState.variant === 'contained' && {
          boxShadow: (theme.vars || theme).shadows[8]
        }),
        [`&.${buttonClasses$1.focusVisible}`]: _extends({}, ownerState.variant === 'contained' && {
          boxShadow: (theme.vars || theme).shadows[6]
        }),
        [`&.${buttonClasses$1.disabled}`]: _extends({
          color: (theme.vars || theme).palette.action.disabled
        }, ownerState.variant === 'outlined' && {
          border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
        }, ownerState.variant === 'contained' && {
          color: (theme.vars || theme).palette.action.disabled,
          boxShadow: (theme.vars || theme).shadows[0],
          backgroundColor: (theme.vars || theme).palette.action.disabledBackground
        })
      }, ownerState.variant === 'text' && {
        padding: '6px 8px'
      }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
        color: (theme.vars || theme).palette[ownerState.color].main
      }, ownerState.variant === 'outlined' && {
        padding: '5px 15px',
        border: '1px solid currentColor'
      }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
        color: (theme.vars || theme).palette[ownerState.color].main,
        border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
      }, ownerState.variant === 'contained' && {
        color: theme.vars ?
        // this is safe because grey does not change between default light/dark mode
        theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
        backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
        boxShadow: (theme.vars || theme).shadows[2]
      }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
        color: (theme.vars || theme).palette[ownerState.color].contrastText,
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }, ownerState.color === 'inherit' && {
        color: 'inherit',
        borderColor: 'currentColor'
      }, ownerState.size === 'small' && ownerState.variant === 'text' && {
        padding: '4px 5px',
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === 'large' && ownerState.variant === 'text' && {
        padding: '8px 11px',
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
        padding: '3px 9px',
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
        padding: '7px 21px',
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
        padding: '4px 10px',
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
        padding: '8px 22px',
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.fullWidth && {
        width: '100%'
      });
    }, ({
      ownerState
    }) => ownerState.disableElevation && {
      boxShadow: 'none',
      '&:hover': {
        boxShadow: 'none'
      },
      [`&.${buttonClasses$1.focusVisible}`]: {
        boxShadow: 'none'
      },
      '&:active': {
        boxShadow: 'none'
      },
      [`&.${buttonClasses$1.disabled}`]: {
        boxShadow: 'none'
      }
    });
    const ButtonStartIcon = styled$1('span', {
      name: 'MuiButton',
      slot: 'StartIcon',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.startIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'inherit',
      marginRight: 8,
      marginLeft: -4
    }, ownerState.size === 'small' && {
      marginLeft: -2
    }, commonIconStyles(ownerState)));
    const ButtonEndIcon = styled$1('span', {
      name: 'MuiButton',
      slot: 'EndIcon',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.endIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'inherit',
      marginRight: -4,
      marginLeft: 8
    }, ownerState.size === 'small' && {
      marginRight: -2
    }, commonIconStyles(ownerState)));
    const Button = /*#__PURE__*/React__namespace.forwardRef(function Button(inProps, ref) {
      // props priority: `inProps` > `contextProps` > `themeDefaultProps`
      const contextProps = React__namespace.useContext(ButtonGroupContext$1);
      const buttonGroupButtonContextPositionClassName = React__namespace.useContext(ButtonGroupButtonContext$1);
      const resolvedProps = resolveProps(contextProps, inProps);
      const props = useThemeProps({
        props: resolvedProps,
        name: 'MuiButton'
      });
      const {
          children,
          color = 'primary',
          component = 'button',
          className,
          disabled = false,
          disableElevation = false,
          disableFocusRipple = false,
          endIcon: endIconProp,
          focusVisibleClassName,
          fullWidth = false,
          size = 'medium',
          startIcon: startIconProp,
          type,
          variant = 'text'
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$e);
      const ownerState = _extends({}, props, {
        color,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        fullWidth,
        size,
        type,
        variant
      });
      const classes = useUtilityClasses$9(ownerState);
      const startIcon = startIconProp && /*#__PURE__*/jsxRuntime_1(ButtonStartIcon, {
        className: classes.startIcon,
        ownerState: ownerState,
        children: startIconProp
      });
      const endIcon = endIconProp && /*#__PURE__*/jsxRuntime_1(ButtonEndIcon, {
        className: classes.endIcon,
        ownerState: ownerState,
        children: endIconProp
      });
      const positionClassName = buttonGroupButtonContextPositionClassName || '';
      return /*#__PURE__*/jsxRuntime_2(ButtonRoot, _extends({
        ownerState: ownerState,
        className: clsx(contextProps.className, classes.root, className, positionClassName),
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
        ref: ref,
        type: type
      }, other, {
        classes: classes,
        children: [startIcon, children, endIcon]
      }));
    });
    var Button$1 = Button;

    const _excluded$d = ["className", "selected", "value"];
    const useUtilityClasses$8 = ownerState => {
      const {
        classes,
        selected
      } = ownerState;
      const slots = {
        root: ['root', selected && 'selected']
      };
      return composeClasses(slots, getPickersToolbarTextUtilityClass, classes);
    };
    const PickersToolbarTextRoot = styled$1(Typography$1, {
      name: 'MuiPickersToolbarText',
      slot: 'Root',
      overridesResolver: (_, styles) => [styles.root, {
        [`&.${pickersToolbarTextClasses.selected}`]: styles.selected
      }]
    })(({
      theme
    }) => ({
      transition: theme.transitions.create('color'),
      color: (theme.vars || theme).palette.text.secondary,
      [`&.${pickersToolbarTextClasses.selected}`]: {
        color: (theme.vars || theme).palette.text.primary
      }
    }));
    const PickersToolbarText = /*#__PURE__*/React__namespace.forwardRef(function PickersToolbarText(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersToolbarText'
      });
      const {
          className,
          value
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$d);
      const classes = useUtilityClasses$8(props);
      return /*#__PURE__*/jsxRuntime_1(PickersToolbarTextRoot, _extends({
        ref: ref,
        className: clsx(className, classes.root),
        component: "span"
      }, other, {
        children: value
      }));
    });

    const _excluded$c = ["align", "className", "selected", "typographyClassName", "value", "variant", "width"];
    const useUtilityClasses$7 = ownerState => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ['root']
      };
      return composeClasses(slots, getPickersToolbarUtilityClass, classes);
    };
    const PickersToolbarButtonRoot = styled$1(Button$1, {
      name: 'MuiPickersToolbarButton',
      slot: 'Root',
      overridesResolver: (_, styles) => styles.root
    })({
      padding: 0,
      minWidth: 16,
      textTransform: 'none'
    });
    const PickersToolbarButton = /*#__PURE__*/React__namespace.forwardRef(function PickersToolbarButton(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersToolbarButton'
      });
      const {
          align,
          className,
          selected,
          typographyClassName,
          value,
          variant,
          width
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$c);
      const classes = useUtilityClasses$7(props);
      return /*#__PURE__*/jsxRuntime_1(PickersToolbarButtonRoot, _extends({
        variant: "text",
        ref: ref,
        className: clsx(className, classes.root)
      }, width ? {
        sx: {
          width
        }
      } : {}, other, {
        children: /*#__PURE__*/jsxRuntime_1(PickersToolbarText, {
          align: align,
          className: typographyClassName,
          variant: variant,
          value: value,
          selected: selected
        })
      }));
    });

    const useOpenState = ({
      open,
      onOpen,
      onClose
    }) => {
      const isControllingOpenProp = React__namespace.useRef(typeof open === 'boolean').current;
      const [openState, setIsOpenState] = React__namespace.useState(false);

      // It is required to update inner state in useEffect in order to avoid situation when
      // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)
      React__namespace.useEffect(() => {
        if (isControllingOpenProp) {
          if (typeof open !== 'boolean') {
            throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');
          }
          setIsOpenState(open);
        }
      }, [isControllingOpenProp, open]);
      const setIsOpen = React__namespace.useCallback(newIsOpen => {
        if (!isControllingOpenProp) {
          setIsOpenState(newIsOpen);
        }
        if (newIsOpen && onOpen) {
          onOpen();
        }
        if (!newIsOpen && onClose) {
          onClose();
        }
      }, [isControllingOpenProp, onOpen, onClose]);
      return {
        isOpen: openState,
        setIsOpen
      };
    };

    /**
     * Decide if the new value should be published
     * The published value will be passed to `onChange` if defined.
     */
    const shouldPublishValue = params => {
      const {
        action,
        hasChanged,
        dateState,
        isControlled
      } = params;
      const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;

      // The field is responsible for only calling `onChange` when needed.
      if (action.name === 'setValueFromField') {
        return true;
      }
      if (action.name === 'setValueFromAction') {
        // If the component is not controlled, and the value has not been modified since the mount,
        // Then we want to publish the default value whenever the user pressed the "Accept", "Today" or "Clear" button.
        if (isCurrentValueTheDefaultValue && ['accept', 'today', 'clear'].includes(action.pickerAction)) {
          return true;
        }
        return hasChanged(dateState.lastPublishedValue);
      }
      if (action.name === 'setValueFromView' && action.selectionState !== 'shallow') {
        // On the first view,
        // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onChange`
        if (isCurrentValueTheDefaultValue) {
          return true;
        }
        return hasChanged(dateState.lastPublishedValue);
      }
      if (action.name === 'setValueFromShortcut') {
        // On the first view,
        // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onChange`
        if (isCurrentValueTheDefaultValue) {
          return true;
        }
        return hasChanged(dateState.lastPublishedValue);
      }
      return false;
    };

    /**
     * Decide if the new value should be committed.
     * The committed value will be passed to `onAccept` if defined.
     * It will also be used as a reset target when calling the `cancel` picker action (when clicking on the "Cancel" button).
     */
    const shouldCommitValue = params => {
      const {
        action,
        hasChanged,
        dateState,
        isControlled,
        closeOnSelect
      } = params;
      const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
      if (action.name === 'setValueFromAction') {
        // If the component is not controlled, and the value has not been modified since the mount,
        // Then we want to commit the default value whenever the user pressed the "Accept", "Today" or "Clear" button.
        if (isCurrentValueTheDefaultValue && ['accept', 'today', 'clear'].includes(action.pickerAction)) {
          return true;
        }
        return hasChanged(dateState.lastCommittedValue);
      }
      if (action.name === 'setValueFromView' && action.selectionState === 'finish' && closeOnSelect) {
        // On picker where the 1st view is also the last view,
        // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onAccept`
        if (isCurrentValueTheDefaultValue) {
          return true;
        }
        return hasChanged(dateState.lastCommittedValue);
      }
      if (action.name === 'setValueFromShortcut') {
        return action.changeImportance === 'accept' && hasChanged(dateState.lastCommittedValue);
      }
      return false;
    };

    /**
     * Decide if the picker should be closed after the value is updated.
     */
    const shouldClosePicker = params => {
      const {
        action,
        closeOnSelect
      } = params;
      if (action.name === 'setValueFromAction') {
        return true;
      }
      if (action.name === 'setValueFromView') {
        return action.selectionState === 'finish' && closeOnSelect;
      }
      if (action.name === 'setValueFromShortcut') {
        return action.changeImportance === 'accept';
      }
      return false;
    };

    /**
     * Manage the value lifecycle of all the pickers.
     */
    const usePickerValue = ({
      props,
      valueManager,
      valueType,
      wrapperVariant,
      validator
    }) => {
      const {
        onAccept,
        onChange,
        value: inValue,
        defaultValue: inDefaultValue,
        closeOnSelect = wrapperVariant === 'desktop',
        selectedSections: selectedSectionsProp,
        onSelectedSectionsChange,
        timezone: timezoneProp
      } = props;
      const {
        current: defaultValue
      } = React__namespace.useRef(inDefaultValue);
      const {
        current: isControlled
      } = React__namespace.useRef(inValue !== undefined);
      /* eslint-enable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */

      const utils = useUtils();
      const adapter = useLocalizationContext();
      const [selectedSections, setSelectedSections] = useControlled({
        controlled: selectedSectionsProp,
        default: null,
        name: 'usePickerValue',
        state: 'selectedSections'
      });
      const {
        isOpen,
        setIsOpen
      } = useOpenState(props);
      const [dateState, setDateState] = React__namespace.useState(() => {
        let initialValue;
        if (inValue !== undefined) {
          initialValue = inValue;
        } else if (defaultValue !== undefined) {
          initialValue = defaultValue;
        } else {
          initialValue = valueManager.emptyValue;
        }
        return {
          draft: initialValue,
          lastPublishedValue: initialValue,
          lastCommittedValue: initialValue,
          lastControlledValue: inValue,
          hasBeenModifiedSinceMount: false
        };
      });
      const {
        timezone,
        handleValueChange
      } = useValueWithTimezone({
        timezone: timezoneProp,
        value: inValue,
        defaultValue,
        onChange,
        valueManager
      });
      useValidation(_extends({}, props, {
        value: dateState.draft,
        timezone
      }), validator, valueManager.isSameError, valueManager.defaultErrorState);
      const updateDate = useEventCallback(action => {
        const updaterParams = {
          action,
          dateState,
          hasChanged: comparison => !valueManager.areValuesEqual(utils, action.value, comparison),
          isControlled,
          closeOnSelect
        };
        const shouldPublish = shouldPublishValue(updaterParams);
        const shouldCommit = shouldCommitValue(updaterParams);
        const shouldClose = shouldClosePicker(updaterParams);
        setDateState(prev => _extends({}, prev, {
          draft: action.value,
          lastPublishedValue: shouldPublish ? action.value : prev.lastPublishedValue,
          lastCommittedValue: shouldCommit ? action.value : prev.lastCommittedValue,
          hasBeenModifiedSinceMount: true
        }));
        if (shouldPublish) {
          const validationError = action.name === 'setValueFromField' ? action.context.validationError : validator({
            adapter,
            value: action.value,
            props: _extends({}, props, {
              value: action.value,
              timezone
            })
          });
          const context = {
            validationError
          };

          // TODO v7: Remove 2nd condition
          if (action.name === 'setValueFromShortcut' && action.shortcut != null) {
            context.shortcut = action.shortcut;
          }
          handleValueChange(action.value, context);
        }
        if (shouldCommit && onAccept) {
          onAccept(action.value);
        }
        if (shouldClose) {
          setIsOpen(false);
        }
      });
      if (inValue !== undefined && (dateState.lastControlledValue === undefined || !valueManager.areValuesEqual(utils, dateState.lastControlledValue, inValue))) {
        const isUpdateComingFromPicker = valueManager.areValuesEqual(utils, dateState.draft, inValue);
        setDateState(prev => _extends({}, prev, {
          lastControlledValue: inValue
        }, isUpdateComingFromPicker ? {} : {
          lastCommittedValue: inValue,
          lastPublishedValue: inValue,
          draft: inValue,
          hasBeenModifiedSinceMount: true
        }));
      }
      const handleClear = useEventCallback(() => {
        updateDate({
          value: valueManager.emptyValue,
          name: 'setValueFromAction',
          pickerAction: 'clear'
        });
      });
      const handleAccept = useEventCallback(() => {
        updateDate({
          value: dateState.lastPublishedValue,
          name: 'setValueFromAction',
          pickerAction: 'accept'
        });
      });
      const handleDismiss = useEventCallback(() => {
        updateDate({
          value: dateState.lastPublishedValue,
          name: 'setValueFromAction',
          pickerAction: 'dismiss'
        });
      });
      const handleCancel = useEventCallback(() => {
        updateDate({
          value: dateState.lastCommittedValue,
          name: 'setValueFromAction',
          pickerAction: 'cancel'
        });
      });
      const handleSetToday = useEventCallback(() => {
        updateDate({
          value: valueManager.getTodayValue(utils, timezone, valueType),
          name: 'setValueFromAction',
          pickerAction: 'today'
        });
      });
      const handleOpen = useEventCallback(() => setIsOpen(true));
      const handleClose = useEventCallback(() => setIsOpen(false));
      const handleChange = useEventCallback((newValue, selectionState = 'partial') => updateDate({
        name: 'setValueFromView',
        value: newValue,
        selectionState
      }));

      // TODO v7: Make changeImportance and label mandatory.
      const handleSelectShortcut = useEventCallback((newValue, changeImportance, shortcut) => updateDate({
        name: 'setValueFromShortcut',
        value: newValue,
        changeImportance: changeImportance != null ? changeImportance : 'accept',
        shortcut
      }));
      const handleChangeFromField = useEventCallback((newValue, context) => updateDate({
        name: 'setValueFromField',
        value: newValue,
        context
      }));
      const handleFieldSelectedSectionsChange = useEventCallback(newSelectedSections => {
        setSelectedSections(newSelectedSections);
        onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);
      });
      const actions = {
        onClear: handleClear,
        onAccept: handleAccept,
        onDismiss: handleDismiss,
        onCancel: handleCancel,
        onSetToday: handleSetToday,
        onOpen: handleOpen,
        onClose: handleClose
      };
      const fieldResponse = {
        value: dateState.draft,
        onChange: handleChangeFromField,
        selectedSections,
        onSelectedSectionsChange: handleFieldSelectedSectionsChange
      };
      const viewValue = React__namespace.useMemo(() => valueManager.cleanValue(utils, dateState.draft), [utils, valueManager, dateState.draft]);
      const viewResponse = {
        value: viewValue,
        onChange: handleChange,
        onClose: handleClose,
        open: isOpen,
        onSelectedSectionsChange: handleFieldSelectedSectionsChange
      };
      const isValid = testedValue => {
        const error = validator({
          adapter,
          value: testedValue,
          props: _extends({}, props, {
            value: testedValue,
            timezone
          })
        });
        return !valueManager.hasError(error);
      };
      const layoutResponse = _extends({}, actions, {
        value: viewValue,
        onChange: handleChange,
        onSelectShortcut: handleSelectShortcut,
        isValid
      });
      return {
        open: isOpen,
        fieldProps: fieldResponse,
        viewProps: viewResponse,
        layoutProps: layoutResponse,
        actions
      };
    };

    const _excluded$b = ["className", "sx"];

    /**
     * Props used to handle the views that are common to all pickers.
     */

    /**
     * Props used to handle the views of the pickers.
     */

    /**
     * Props used to handle the value of the pickers.
     */

    /**
     * Manage the views of all the pickers:
     * - Handles the view switch
     * - Handles the switch between UI views and field views
     * - Handles the focus management when switching views
     */
    const usePickerViews = ({
      props,
      propsFromPickerValue,
      additionalViewProps,
      inputRef,
      autoFocusView
    }) => {
      const {
        onChange,
        open,
        onSelectedSectionsChange,
        onClose
      } = propsFromPickerValue;
      const {
        views,
        openTo,
        onViewChange,
        disableOpenPicker,
        viewRenderers,
        timezone
      } = props;
      const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded$b);
      const {
        view,
        setView,
        defaultView,
        focusedView,
        setFocusedView,
        setValueAndGoToNextView
      } = useViews({
        view: undefined,
        views,
        openTo,
        onChange,
        onViewChange,
        autoFocus: autoFocusView
      });
      const {
        hasUIView,
        viewModeLookup
      } = React__namespace.useMemo(() => views.reduce((acc, viewForReduce) => {
        let viewMode;
        if (disableOpenPicker) {
          viewMode = 'field';
        } else if (viewRenderers[viewForReduce] != null) {
          viewMode = 'UI';
        } else {
          viewMode = 'field';
        }
        acc.viewModeLookup[viewForReduce] = viewMode;
        if (viewMode === 'UI') {
          acc.hasUIView = true;
        }
        return acc;
      }, {
        hasUIView: false,
        viewModeLookup: {}
      }), [disableOpenPicker, viewRenderers, views]);
      const timeViewsCount = React__namespace.useMemo(() => views.reduce((acc, viewForReduce) => {
        if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {
          return acc + 1;
        }
        return acc;
      }, 0), [viewRenderers, views]);
      const currentViewMode = viewModeLookup[view];
      const shouldRestoreFocus = useEventCallback(() => currentViewMode === 'UI');
      const [popperView, setPopperView] = React__namespace.useState(currentViewMode === 'UI' ? view : null);
      if (popperView !== view && viewModeLookup[view] === 'UI') {
        setPopperView(view);
      }
      useEnhancedEffect$1(() => {
        // Handle case of `DateTimePicker` without time renderers
        if (currentViewMode === 'field' && open) {
          onClose();
          setTimeout(() => {
            // focusing the input before the range selection is done
            // calling `onSelectedSectionsChange` outside of timeout results in an inconsistent behavior between Safari And Chrome
            inputRef == null || inputRef.current.focus();
            onSelectedSectionsChange(view);
          });
        }
      }, [view]); // eslint-disable-line react-hooks/exhaustive-deps

      useEnhancedEffect$1(() => {
        if (!open) {
          return;
        }
        let newView = view;

        // If the current view is a field view, go to the last popper view
        if (currentViewMode === 'field' && popperView != null) {
          newView = popperView;
        }

        // If the current view is not the default view and both are UI views
        if (newView !== defaultView && viewModeLookup[newView] === 'UI' && viewModeLookup[defaultView] === 'UI') {
          newView = defaultView;
        }
        if (newView !== view) {
          setView(newView);
        }
        setFocusedView(newView, true);
      }, [open]); // eslint-disable-line react-hooks/exhaustive-deps

      const layoutProps = {
        views,
        view: popperView,
        onViewChange: setView
      };
      return {
        hasUIView,
        shouldRestoreFocus,
        layoutProps,
        renderCurrentView: () => {
          if (popperView == null) {
            return null;
          }
          const renderer = viewRenderers[popperView];
          if (renderer == null) {
            return null;
          }
          return renderer(_extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {
            views,
            timezone,
            onChange: setValueAndGoToNextView,
            view: popperView,
            onViewChange: setView,
            focusedView,
            onFocusedViewChange: setFocusedView,
            showViewSwitcher: timeViewsCount > 1,
            timeViewsCount
          }));
        }
      };
    };

    function getOrientation() {
      if (typeof window === 'undefined') {
        return 'portrait';
      }
      if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
        return Math.abs(window.screen.orientation.angle) === 90 ? 'landscape' : 'portrait';
      }

      // Support IOS safari
      if (window.orientation) {
        return Math.abs(Number(window.orientation)) === 90 ? 'landscape' : 'portrait';
      }
      return 'portrait';
    }
    const useIsLandscape = (views, customOrientation) => {
      const [orientation, setOrientation] = React__namespace.useState(getOrientation);
      useEnhancedEffect$1(() => {
        const eventHandler = () => {
          setOrientation(getOrientation());
        };
        window.addEventListener('orientationchange', eventHandler);
        return () => {
          window.removeEventListener('orientationchange', eventHandler);
        };
      }, []);
      if (arrayIncludes(views, ['hours', 'minutes', 'seconds'])) {
        // could not display 13:34:44 in landscape mode
        return false;
      }
      const orientationToUse = customOrientation || orientation;
      return orientationToUse === 'landscape';
    };

    /**
     * Props used to create the layout of the views.
     * Those props are exposed on all the pickers.
     */

    /**
     * Prepare the props for the view layout (managed by `PickersLayout`)
     */
    const usePickerLayoutProps = ({
      props,
      propsFromPickerValue,
      propsFromPickerViews,
      wrapperVariant
    }) => {
      const {
        orientation
      } = props;
      const isLandscape = useIsLandscape(propsFromPickerViews.views, orientation);
      const layoutProps = _extends({}, propsFromPickerViews, propsFromPickerValue, {
        isLandscape,
        wrapperVariant,
        disabled: props.disabled,
        readOnly: props.readOnly
      });
      return {
        layoutProps
      };
    };

    const buildWarning = (message, gravity = 'warning') => {
      let alreadyWarned = false;
      const cleanMessage = Array.isArray(message) ? message.join('\n') : message;
      return () => {
        if (!alreadyWarned) {
          alreadyWarned = true;
          if (gravity === 'error') {
            console.error(cleanMessage);
          } else {
            console.warn(cleanMessage);
          }
        }
      };
    };

    buildWarning(['The `renderInput` prop has been removed in version 6.0 of the Date and Time Pickers.', 'You can replace it with the `textField` component slot in most cases.', 'For more information, please have a look at the migration guide (https://mui.com/x/migration/migration-pickers-v5/#input-renderer-required-in-v5).']);
    const usePicker = ({
      props,
      valueManager,
      valueType,
      wrapperVariant,
      inputRef,
      additionalViewProps,
      validator,
      autoFocusView
    }) => {
      const pickerValueResponse = usePickerValue({
        props,
        valueManager,
        valueType,
        wrapperVariant,
        validator
      });
      const pickerViewsResponse = usePickerViews({
        props,
        inputRef,
        additionalViewProps,
        autoFocusView,
        propsFromPickerValue: pickerValueResponse.viewProps
      });
      const pickerLayoutResponse = usePickerLayoutProps({
        props,
        wrapperVariant,
        propsFromPickerValue: pickerValueResponse.layoutProps,
        propsFromPickerViews: pickerViewsResponse.layoutProps
      });
      return {
        // Picker value
        open: pickerValueResponse.open,
        actions: pickerValueResponse.actions,
        fieldProps: pickerValueResponse.fieldProps,
        // Picker views
        renderCurrentView: pickerViewsResponse.renderCurrentView,
        hasUIView: pickerViewsResponse.hasUIView,
        shouldRestoreFocus: pickerViewsResponse.shouldRestoreFocus,
        // Picker layout
        layoutProps: pickerLayoutResponse.layoutProps
      };
    };

    function getPickersLayoutUtilityClass(slot) {
      return generateUtilityClass('MuiPickersLayout', slot);
    }
    const pickersLayoutClasses = generateUtilityClasses('MuiPickersLayout', ['root', 'landscape', 'contentWrapper', 'toolbar', 'actionBar', 'shortcuts']);

    function getDialogActionsUtilityClass(slot) {
      return generateUtilityClass('MuiDialogActions', slot);
    }
    generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);

    const _excluded$a = ["className", "disableSpacing"];
    const useUtilityClasses$6 = ownerState => {
      const {
        classes,
        disableSpacing
      } = ownerState;
      const slots = {
        root: ['root', !disableSpacing && 'spacing']
      };
      return composeClasses(slots, getDialogActionsUtilityClass, classes);
    };
    const DialogActionsRoot = styled$1('div', {
      name: 'MuiDialogActions',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.disableSpacing && styles.spacing];
      }
    })(({
      ownerState
    }) => _extends({
      display: 'flex',
      alignItems: 'center',
      padding: 8,
      justifyContent: 'flex-end',
      flex: '0 0 auto'
    }, !ownerState.disableSpacing && {
      '& > :not(style) ~ :not(style)': {
        marginLeft: 8
      }
    }));
    const DialogActions = /*#__PURE__*/React__namespace.forwardRef(function DialogActions(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiDialogActions'
      });
      const {
          className,
          disableSpacing = false
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$a);
      const ownerState = _extends({}, props, {
        disableSpacing
      });
      const classes = useUtilityClasses$6(ownerState);
      return /*#__PURE__*/jsxRuntime_1(DialogActionsRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other));
    });
    var DialogActions$1 = DialogActions;

    const _excluded$9 = ["onAccept", "onClear", "onCancel", "onSetToday", "actions"];
    function PickersActionBar(props) {
      const {
          onAccept,
          onClear,
          onCancel,
          onSetToday,
          actions
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$9);
      const localeText = useLocaleText();
      if (actions == null || actions.length === 0) {
        return null;
      }
      const buttons = actions == null ? void 0 : actions.map(actionType => {
        switch (actionType) {
          case 'clear':
            return /*#__PURE__*/jsxRuntime_1(Button$1, {
              onClick: onClear,
              children: localeText.clearButtonLabel
            }, actionType);
          case 'cancel':
            return /*#__PURE__*/jsxRuntime_1(Button$1, {
              onClick: onCancel,
              children: localeText.cancelButtonLabel
            }, actionType);
          case 'accept':
            return /*#__PURE__*/jsxRuntime_1(Button$1, {
              onClick: onAccept,
              children: localeText.okButtonLabel
            }, actionType);
          case 'today':
            return /*#__PURE__*/jsxRuntime_1(Button$1, {
              onClick: onSetToday,
              children: localeText.todayButtonLabel
            }, actionType);
          default:
            return null;
        }
      });
      return /*#__PURE__*/jsxRuntime_1(DialogActions$1, _extends({}, other, {
        children: buttons
      }));
    }

    function getListItemUtilityClass(slot) {
      return generateUtilityClass('MuiListItem', slot);
    }
    const listItemClasses = generateUtilityClasses('MuiListItem', ['root', 'container', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'padding', 'button', 'secondaryAction', 'selected']);
    var listItemClasses$1 = listItemClasses;

    const listItemButtonClasses = generateUtilityClasses('MuiListItemButton', ['root', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'selected']);
    var listItemButtonClasses$1 = listItemButtonClasses;

    function getListItemSecondaryActionClassesUtilityClass(slot) {
      return generateUtilityClass('MuiListItemSecondaryAction', slot);
    }
    generateUtilityClasses('MuiListItemSecondaryAction', ['root', 'disableGutters']);

    const _excluded$8 = ["className"];
    const useUtilityClasses$5 = ownerState => {
      const {
        disableGutters,
        classes
      } = ownerState;
      const slots = {
        root: ['root', disableGutters && 'disableGutters']
      };
      return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
    };
    const ListItemSecondaryActionRoot = styled$1('div', {
      name: 'MuiListItemSecondaryAction',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.disableGutters && styles.disableGutters];
      }
    })(({
      ownerState
    }) => _extends({
      position: 'absolute',
      right: 16,
      top: '50%',
      transform: 'translateY(-50%)'
    }, ownerState.disableGutters && {
      right: 0
    }));

    /**
     * Must be used as the last child of ListItem to function properly.
     */
    const ListItemSecondaryAction = /*#__PURE__*/React__namespace.forwardRef(function ListItemSecondaryAction(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiListItemSecondaryAction'
      });
      const {
          className
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$8);
      const context = React__namespace.useContext(ListContext$1);
      const ownerState = _extends({}, props, {
        disableGutters: context.disableGutters
      });
      const classes = useUtilityClasses$5(ownerState);
      return /*#__PURE__*/jsxRuntime_1(ListItemSecondaryActionRoot, _extends({
        className: clsx(classes.root, className),
        ownerState: ownerState,
        ref: ref
      }, other));
    });
    ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';
    var ListItemSecondaryAction$1 = ListItemSecondaryAction;

    const _excluded$7 = ["className"],
      _excluded2$3 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
    const overridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters, !ownerState.disablePadding && styles.padding, ownerState.button && styles.button, ownerState.hasSecondaryAction && styles.secondaryAction];
    };
    const useUtilityClasses$4 = ownerState => {
      const {
        alignItems,
        button,
        classes,
        dense,
        disabled,
        disableGutters,
        disablePadding,
        divider,
        hasSecondaryAction,
        selected
      } = ownerState;
      const slots = {
        root: ['root', dense && 'dense', !disableGutters && 'gutters', !disablePadding && 'padding', divider && 'divider', disabled && 'disabled', button && 'button', alignItems === 'flex-start' && 'alignItemsFlexStart', hasSecondaryAction && 'secondaryAction', selected && 'selected'],
        container: ['container']
      };
      return composeClasses(slots, getListItemUtilityClass, classes);
    };
    const ListItemRoot = styled$1('div', {
      name: 'MuiListItem',
      slot: 'Root',
      overridesResolver
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'center',
      position: 'relative',
      textDecoration: 'none',
      width: '100%',
      boxSizing: 'border-box',
      textAlign: 'left'
    }, !ownerState.disablePadding && _extends({
      paddingTop: 8,
      paddingBottom: 8
    }, ownerState.dense && {
      paddingTop: 4,
      paddingBottom: 4
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, !!ownerState.secondaryAction && {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }), !!ownerState.secondaryAction && {
      [`& > .${listItemButtonClasses$1.root}`]: {
        paddingRight: 48
      }
    }, {
      [`&.${listItemClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${listItemClasses$1.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${listItemClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      },
      [`&.${listItemClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      }
    }, ownerState.alignItems === 'flex-start' && {
      alignItems: 'flex-start'
    }, ownerState.divider && {
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
      backgroundClip: 'padding-box'
    }, ownerState.button && {
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shortest
      }),
      '&:hover': {
        textDecoration: 'none',
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      [`&.${listItemClasses$1.selected}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      }
    }, ownerState.hasSecondaryAction && {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }));
    const ListItemContainer = styled$1('li', {
      name: 'MuiListItem',
      slot: 'Container',
      overridesResolver: (props, styles) => styles.container
    })({
      position: 'relative'
    });

    /**
     * Uses an additional container component if `ListItemSecondaryAction` is the last child.
     */
    const ListItem = /*#__PURE__*/React__namespace.forwardRef(function ListItem(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiListItem'
      });
      const {
          alignItems = 'center',
          autoFocus = false,
          button = false,
          children: childrenProp,
          className,
          component: componentProp,
          components = {},
          componentsProps = {},
          ContainerComponent = 'li',
          ContainerProps: {
            className: ContainerClassName
          } = {},
          dense = false,
          disabled = false,
          disableGutters = false,
          disablePadding = false,
          divider = false,
          focusVisibleClassName,
          secondaryAction,
          selected = false,
          slotProps = {},
          slots = {}
        } = props,
        ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded$7),
        other = _objectWithoutPropertiesLoose(props, _excluded2$3);
      const context = React__namespace.useContext(ListContext$1);
      const childContext = React__namespace.useMemo(() => ({
        dense: dense || context.dense || false,
        alignItems,
        disableGutters
      }), [alignItems, context.dense, dense, disableGutters]);
      const listItemRef = React__namespace.useRef(null);
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          if (listItemRef.current) {
            listItemRef.current.focus();
          }
        }
      }, [autoFocus]);
      const children = React__namespace.Children.toArray(childrenProp);

      // v4 implementation, deprecated in v5, will be removed in v6
      const hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);
      const ownerState = _extends({}, props, {
        alignItems,
        autoFocus,
        button,
        dense: childContext.dense,
        disabled,
        disableGutters,
        disablePadding,
        divider,
        hasSecondaryAction,
        selected
      });
      const classes = useUtilityClasses$4(ownerState);
      const handleRef = useForkRef(listItemRef, ref);
      const Root = slots.root || components.Root || ListItemRoot;
      const rootProps = slotProps.root || componentsProps.root || {};
      const componentProps = _extends({
        className: clsx(classes.root, rootProps.className, className),
        disabled
      }, other);
      let Component = componentProp || 'li';
      if (button) {
        componentProps.component = componentProp || 'div';
        componentProps.focusVisibleClassName = clsx(listItemClasses$1.focusVisible, focusVisibleClassName);
        Component = ButtonBase$1;
      }

      // v4 implementation, deprecated in v5, will be removed in v6
      if (hasSecondaryAction) {
        // Use div by default.
        Component = !componentProps.component && !componentProp ? 'div' : Component;

        // Avoid nesting of li > li.
        if (ContainerComponent === 'li') {
          if (Component === 'li') {
            Component = 'div';
          } else if (componentProps.component === 'li') {
            componentProps.component = 'div';
          }
        }
        return /*#__PURE__*/jsxRuntime_1(ListContext$1.Provider, {
          value: childContext,
          children: /*#__PURE__*/jsxRuntime_2(ListItemContainer, _extends({
            as: ContainerComponent,
            className: clsx(classes.container, ContainerClassName),
            ref: handleRef,
            ownerState: ownerState
          }, ContainerProps, {
            children: [/*#__PURE__*/jsxRuntime_1(Root, _extends({}, rootProps, !isHostComponent(Root) && {
              as: Component,
              ownerState: _extends({}, ownerState, rootProps.ownerState)
            }, componentProps, {
              children: children
            })), children.pop()]
          }))
        });
      }
      return /*#__PURE__*/jsxRuntime_1(ListContext$1.Provider, {
        value: childContext,
        children: /*#__PURE__*/jsxRuntime_2(Root, _extends({}, rootProps, {
          as: Component,
          ref: handleRef
        }, !isHostComponent(Root) && {
          ownerState: _extends({}, ownerState, rootProps.ownerState)
        }, componentProps, {
          children: [children, secondaryAction && /*#__PURE__*/jsxRuntime_1(ListItemSecondaryAction$1, {
            children: secondaryAction
          })]
        }))
      });
    });
    var ListItem$1 = ListItem;

    var CancelIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), 'Cancel');

    function getChipUtilityClass(slot) {
      return generateUtilityClass('MuiChip', slot);
    }
    const chipClasses = generateUtilityClasses('MuiChip', ['root', 'sizeSmall', 'sizeMedium', 'colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'disabled', 'clickable', 'clickableColorPrimary', 'clickableColorSecondary', 'deletable', 'deletableColorPrimary', 'deletableColorSecondary', 'outlined', 'filled', 'outlinedPrimary', 'outlinedSecondary', 'filledPrimary', 'filledSecondary', 'avatar', 'avatarSmall', 'avatarMedium', 'avatarColorPrimary', 'avatarColorSecondary', 'icon', 'iconSmall', 'iconMedium', 'iconColorPrimary', 'iconColorSecondary', 'label', 'labelSmall', 'labelMedium', 'deleteIcon', 'deleteIconSmall', 'deleteIconMedium', 'deleteIconColorPrimary', 'deleteIconColorSecondary', 'deleteIconOutlinedColorPrimary', 'deleteIconOutlinedColorSecondary', 'deleteIconFilledColorPrimary', 'deleteIconFilledColorSecondary', 'focusVisible']);
    var chipClasses$1 = chipClasses;

    const _excluded$6 = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
    const useUtilityClasses$3 = ownerState => {
      const {
        classes,
        disabled,
        size,
        color,
        iconColor,
        onDelete,
        clickable,
        variant
      } = ownerState;
      const slots = {
        root: ['root', variant, disabled && 'disabled', `size${capitalize(size)}`, `color${capitalize(color)}`, clickable && 'clickable', clickable && `clickableColor${capitalize(color)}`, onDelete && 'deletable', onDelete && `deletableColor${capitalize(color)}`, `${variant}${capitalize(color)}`],
        label: ['label', `label${capitalize(size)}`],
        avatar: ['avatar', `avatar${capitalize(size)}`, `avatarColor${capitalize(color)}`],
        icon: ['icon', `icon${capitalize(size)}`, `iconColor${capitalize(iconColor)}`],
        deleteIcon: ['deleteIcon', `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color)}`, `deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
      };
      return composeClasses(slots, getChipUtilityClass, classes);
    };
    const ChipRoot = styled$1('div', {
      name: 'MuiChip',
      slot: 'Root',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          color,
          iconColor,
          clickable,
          onDelete,
          size,
          variant
        } = ownerState;
        return [{
          [`& .${chipClasses$1.avatar}`]: styles.avatar
        }, {
          [`& .${chipClasses$1.avatar}`]: styles[`avatar${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.avatar}`]: styles[`avatarColor${capitalize(color)}`]
        }, {
          [`& .${chipClasses$1.icon}`]: styles.icon
        }, {
          [`& .${chipClasses$1.icon}`]: styles[`icon${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.icon}`]: styles[`iconColor${capitalize(iconColor)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles.deleteIcon
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIcon${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIconColor${capitalize(color)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
        }, styles.root, styles[`size${capitalize(size)}`], styles[`color${capitalize(color)}`], clickable && styles.clickable, clickable && color !== 'default' && styles[`clickableColor${capitalize(color)})`], onDelete && styles.deletable, onDelete && color !== 'default' && styles[`deletableColor${capitalize(color)}`], styles[variant], styles[`${variant}${capitalize(color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      const textColor = theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300];
      return _extends({
        maxWidth: '100%',
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(13),
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: 32,
        color: (theme.vars || theme).palette.text.primary,
        backgroundColor: (theme.vars || theme).palette.action.selected,
        borderRadius: 32 / 2,
        whiteSpace: 'nowrap',
        transition: theme.transitions.create(['background-color', 'box-shadow']),
        // reset cursor explicitly in case ButtonBase is used
        cursor: 'unset',
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        textDecoration: 'none',
        border: 0,
        // Remove `button` border
        padding: 0,
        // Remove `button` padding
        verticalAlign: 'middle',
        boxSizing: 'border-box',
        [`&.${chipClasses$1.disabled}`]: {
          opacity: (theme.vars || theme).palette.action.disabledOpacity,
          pointerEvents: 'none'
        },
        [`& .${chipClasses$1.avatar}`]: {
          marginLeft: 5,
          marginRight: -6,
          width: 24,
          height: 24,
          color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
          fontSize: theme.typography.pxToRem(12)
        },
        [`& .${chipClasses$1.avatarColorPrimary}`]: {
          color: (theme.vars || theme).palette.primary.contrastText,
          backgroundColor: (theme.vars || theme).palette.primary.dark
        },
        [`& .${chipClasses$1.avatarColorSecondary}`]: {
          color: (theme.vars || theme).palette.secondary.contrastText,
          backgroundColor: (theme.vars || theme).palette.secondary.dark
        },
        [`& .${chipClasses$1.avatarSmall}`]: {
          marginLeft: 4,
          marginRight: -4,
          width: 18,
          height: 18,
          fontSize: theme.typography.pxToRem(10)
        },
        [`& .${chipClasses$1.icon}`]: _extends({
          marginLeft: 5,
          marginRight: -6
        }, ownerState.size === 'small' && {
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        }, ownerState.iconColor === ownerState.color && _extends({
          color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
        }, ownerState.color !== 'default' && {
          color: 'inherit'
        })),
        [`& .${chipClasses$1.deleteIcon}`]: _extends({
          WebkitTapHighlightColor: 'transparent',
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : alpha(theme.palette.text.primary, 0.26),
          fontSize: 22,
          cursor: 'pointer',
          margin: '0 5px 0 -6px',
          '&:hover': {
            color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme.palette.text.primary, 0.4)
          }
        }, ownerState.size === 'small' && {
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }, ownerState.color !== 'default' && {
          color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
          '&:hover, &:active': {
            color: (theme.vars || theme).palette[ownerState.color].contrastText
          }
        })
      }, ownerState.size === 'small' && {
        height: 24
      }, ownerState.color !== 'default' && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
        color: (theme.vars || theme).palette[ownerState.color].contrastText
      }, ownerState.onDelete && {
        [`&.${chipClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }, ownerState.onDelete && ownerState.color !== 'default' && {
        [`&.${chipClasses$1.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
        }
      });
    }, ({
      theme,
      ownerState
    }) => _extends({}, ownerState.clickable && {
      userSelect: 'none',
      WebkitTapHighlightColor: 'transparent',
      cursor: 'pointer',
      '&:hover': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      },
      '&:active': {
        boxShadow: (theme.vars || theme).shadows[1]
      }
    }, ownerState.clickable && ownerState.color !== 'default' && {
      [`&:hover, &.${chipClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    }), ({
      theme,
      ownerState
    }) => _extends({}, ownerState.variant === 'outlined' && {
      backgroundColor: 'transparent',
      border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[700]}`,
      [`&.${chipClasses$1.clickable}:hover`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`& .${chipClasses$1.avatar}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses$1.avatarSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses$1.icon}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses$1.iconSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses$1.deleteIcon}`]: {
        marginRight: 5
      },
      [`& .${chipClasses$1.deleteIconSmall}`]: {
        marginRight: 3
      }
    }, ownerState.variant === 'outlined' && ownerState.color !== 'default' && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
      [`&.${chipClasses$1.clickable}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
      },
      [`& .${chipClasses$1.deleteIcon}`]: {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
        '&:hover, &:active': {
          color: (theme.vars || theme).palette[ownerState.color].main
        }
      }
    }));
    const ChipLabel = styled$1('span', {
      name: 'MuiChip',
      slot: 'Label',
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          size
        } = ownerState;
        return [styles.label, styles[`label${capitalize(size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      paddingLeft: 12,
      paddingRight: 12,
      whiteSpace: 'nowrap'
    }, ownerState.variant === 'outlined' && {
      paddingLeft: 11,
      paddingRight: 11
    }, ownerState.size === 'small' && {
      paddingLeft: 8,
      paddingRight: 8
    }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
      paddingLeft: 7,
      paddingRight: 7
    }));
    function isDeleteKeyboardEvent(keyboardEvent) {
      return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';
    }

    /**
     * Chips represent complex entities in small blocks, such as a contact.
     */
    const Chip = /*#__PURE__*/React__namespace.forwardRef(function Chip(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiChip'
      });
      const {
          avatar: avatarProp,
          className,
          clickable: clickableProp,
          color = 'default',
          component: ComponentProp,
          deleteIcon: deleteIconProp,
          disabled = false,
          icon: iconProp,
          label,
          onClick,
          onDelete,
          onKeyDown,
          onKeyUp,
          size = 'medium',
          variant = 'filled',
          tabIndex,
          skipFocusWhenDisabled = false // TODO v6: Rename to `focusableWhenDisabled`.
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$6);
      const chipRef = React__namespace.useRef(null);
      const handleRef = useForkRef(chipRef, ref);
      const handleDeleteIconClick = event => {
        // Stop the event from bubbling up to the `Chip`
        event.stopPropagation();
        if (onDelete) {
          onDelete(event);
        }
      };
      const handleKeyDown = event => {
        // Ignore events from children of `Chip`.
        if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
          // Will be handled in keyUp, otherwise some browsers
          // might init navigation
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleKeyUp = event => {
        // Ignore events from children of `Chip`.
        if (event.currentTarget === event.target) {
          if (onDelete && isDeleteKeyboardEvent(event)) {
            onDelete(event);
          } else if (event.key === 'Escape' && chipRef.current) {
            chipRef.current.blur();
          }
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
      };
      const clickable = clickableProp !== false && onClick ? true : clickableProp;
      const component = clickable || onDelete ? ButtonBase$1 : ComponentProp || 'div';
      const ownerState = _extends({}, props, {
        component,
        disabled,
        size,
        color,
        iconColor: /*#__PURE__*/React__namespace.isValidElement(iconProp) ? iconProp.props.color || color : color,
        onDelete: !!onDelete,
        clickable,
        variant
      });
      const classes = useUtilityClasses$3(ownerState);
      const moreProps = component === ButtonBase$1 ? _extends({
        component: ComponentProp || 'div',
        focusVisibleClassName: classes.focusVisible
      }, onDelete && {
        disableRipple: true
      }) : {};
      let deleteIcon = null;
      if (onDelete) {
        deleteIcon = deleteIconProp && /*#__PURE__*/React__namespace.isValidElement(deleteIconProp) ? /*#__PURE__*/React__namespace.cloneElement(deleteIconProp, {
          className: clsx(deleteIconProp.props.className, classes.deleteIcon),
          onClick: handleDeleteIconClick
        }) : /*#__PURE__*/jsxRuntime_1(CancelIcon, {
          className: clsx(classes.deleteIcon),
          onClick: handleDeleteIconClick
        });
      }
      let avatar = null;
      if (avatarProp && /*#__PURE__*/React__namespace.isValidElement(avatarProp)) {
        avatar = /*#__PURE__*/React__namespace.cloneElement(avatarProp, {
          className: clsx(classes.avatar, avatarProp.props.className)
        });
      }
      let icon = null;
      if (iconProp && /*#__PURE__*/React__namespace.isValidElement(iconProp)) {
        icon = /*#__PURE__*/React__namespace.cloneElement(iconProp, {
          className: clsx(classes.icon, iconProp.props.className)
        });
      }
      return /*#__PURE__*/jsxRuntime_2(ChipRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        disabled: clickable && disabled ? true : undefined,
        onClick: onClick,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        ref: handleRef,
        tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
        ownerState: ownerState
      }, moreProps, other, {
        children: [avatar || icon, /*#__PURE__*/jsxRuntime_1(ChipLabel, {
          className: clsx(classes.label),
          ownerState: ownerState,
          children: label
        }), deleteIcon]
      }));
    });
    var Chip$1 = Chip;

    const _excluded$5 = ["items", "changeImportance", "isLandscape", "onChange", "isValid"],
      _excluded2$2 = ["getValue"];
    function PickersShortcuts(props) {
      const {
          items,
          changeImportance,
          onChange,
          isValid
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded$5);
      if (items == null || items.length === 0) {
        return null;
      }
      const resolvedItems = items.map(_ref => {
        let {
            getValue
          } = _ref,
          item = _objectWithoutPropertiesLoose(_ref, _excluded2$2);
        const newValue = getValue({
          isValid
        });
        return {
          label: item.label,
          onClick: () => {
            onChange(newValue, changeImportance, item);
          },
          disabled: !isValid(newValue)
        };
      });
      return /*#__PURE__*/jsxRuntime_1(List$1, _extends({
        dense: true,
        sx: [{
          maxHeight: VIEW_HEIGHT,
          maxWidth: 200,
          overflow: 'auto'
        }, ...(Array.isArray(other.sx) ? other.sx : [other.sx])]
      }, other, {
        children: resolvedItems.map(item => {
          return /*#__PURE__*/jsxRuntime_1(ListItem$1, {
            children: /*#__PURE__*/jsxRuntime_1(Chip$1, _extends({}, item))
          }, item.label);
        })
      }));
    }

    function toolbarHasView(toolbarProps) {
      return toolbarProps.view !== null;
    }
    const useUtilityClasses$2 = ownerState => {
      const {
        classes,
        isLandscape
      } = ownerState;
      const slots = {
        root: ['root', isLandscape && 'landscape'],
        contentWrapper: ['contentWrapper'],
        toolbar: ['toolbar'],
        actionBar: ['actionBar'],
        tabs: ['tabs'],
        landscape: ['landscape'],
        shortcuts: ['shortcuts']
      };
      return composeClasses(slots, getPickersLayoutUtilityClass, classes);
    };
    const usePickerLayout = props => {
      var _slots$actionBar, _slots$shortcuts;
      const {
        wrapperVariant,
        onAccept,
        onClear,
        onCancel,
        onSetToday,
        view,
        views,
        onViewChange,
        value,
        onChange,
        onSelectShortcut,
        isValid,
        isLandscape,
        disabled,
        readOnly,
        children,
        components,
        componentsProps,
        slots: innerSlots,
        slotProps: innerSlotProps
        // TODO: Remove this "as" hack. It get introduced to mark `value` prop in PickersLayoutProps as not required.
        // The true type should be
        // - For pickers value: TDate | null
        // - For range pickers value: [TDate | null, TDate | null]
      } = props;
      const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
      const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
      const classes = useUtilityClasses$2(props);

      // Action bar

      const ActionBar = (_slots$actionBar = slots == null ? void 0 : slots.actionBar) != null ? _slots$actionBar : PickersActionBar;
      const actionBarProps = useSlotProps({
        elementType: ActionBar,
        externalSlotProps: slotProps == null ? void 0 : slotProps.actionBar,
        additionalProps: {
          onAccept,
          onClear,
          onCancel,
          onSetToday,
          actions: wrapperVariant === 'desktop' ? [] : ['cancel', 'accept'],
          className: classes.actionBar
        },
        ownerState: _extends({}, props, {
          wrapperVariant
        })
      });
      const actionBar = /*#__PURE__*/jsxRuntime_1(ActionBar, _extends({}, actionBarProps));

      // Toolbar

      const Toolbar = slots == null ? void 0 : slots.toolbar;
      const toolbarProps = useSlotProps({
        elementType: Toolbar,
        externalSlotProps: slotProps == null ? void 0 : slotProps.toolbar,
        additionalProps: {
          isLandscape,
          onChange,
          value,
          view,
          onViewChange,
          views,
          disabled,
          readOnly,
          className: classes.toolbar
        },
        ownerState: _extends({}, props, {
          wrapperVariant
        })
      });
      const toolbar = toolbarHasView(toolbarProps) && !!Toolbar ? /*#__PURE__*/jsxRuntime_1(Toolbar, _extends({}, toolbarProps)) : null;

      // Content

      const content = children;

      // Tabs

      const Tabs = slots == null ? void 0 : slots.tabs;
      const tabs = view && Tabs ? /*#__PURE__*/jsxRuntime_1(Tabs, _extends({
        view: view,
        onViewChange: onViewChange
      }, slotProps == null ? void 0 : slotProps.tabs)) : null;

      // Shortcuts

      const Shortcuts = (_slots$shortcuts = slots == null ? void 0 : slots.shortcuts) != null ? _slots$shortcuts : PickersShortcuts;
      const shortcutsProps = useSlotProps({
        elementType: Shortcuts,
        externalSlotProps: slotProps == null ? void 0 : slotProps.shortcuts,
        additionalProps: {
          isValid,
          isLandscape,
          onChange: onSelectShortcut,
          className: classes.shortcuts
        },
        ownerState: {
          isValid,
          isLandscape,
          onChange: onSelectShortcut,
          className: classes.shortcuts,
          wrapperVariant
        }
      });
      const shortcuts = view && !!Shortcuts ? /*#__PURE__*/jsxRuntime_1(Shortcuts, _extends({}, shortcutsProps)) : null;
      return {
        toolbar,
        content,
        tabs,
        actionBar,
        shortcuts
      };
    };
    var usePickerLayout$1 = usePickerLayout;

    const useUtilityClasses$1 = ownerState => {
      const {
        isLandscape,
        classes
      } = ownerState;
      const slots = {
        root: ['root', isLandscape && 'landscape'],
        contentWrapper: ['contentWrapper']
      };
      return composeClasses(slots, getPickersLayoutUtilityClass, classes);
    };
    const PickersLayoutRoot = styled$1('div', {
      name: 'MuiPickersLayout',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })(({
      theme,
      ownerState
    }) => ({
      display: 'grid',
      gridAutoColumns: 'max-content auto max-content',
      gridAutoRows: 'max-content auto max-content',
      [`& .${pickersLayoutClasses.toolbar}`]: ownerState.isLandscape ? {
        gridColumn: theme.direction === 'rtl' ? 3 : 1,
        gridRow: '2 / 3'
      } : {
        gridColumn: '2 / 4',
        gridRow: 1
      },
      [`.${pickersLayoutClasses.shortcuts}`]: ownerState.isLandscape ? {
        gridColumn: '2 / 4',
        gridRow: 1
      } : {
        gridColumn: theme.direction === 'rtl' ? 3 : 1,
        gridRow: '2 / 3'
      },
      [`& .${pickersLayoutClasses.actionBar}`]: {
        gridColumn: '1 / 4',
        gridRow: 3
      }
    }));
    PickersLayoutRoot.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      as: PropTypes.elementType,
      ownerState: PropTypes.shape({
        isLandscape: PropTypes.bool.isRequired
      }).isRequired,
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    };
    const PickersLayoutContentWrapper = styled$1('div', {
      name: 'MuiPickersLayout',
      slot: 'ContentWrapper',
      overridesResolver: (props, styles) => styles.contentWrapper
    })({
      gridColumn: 2,
      gridRow: 2,
      display: 'flex',
      flexDirection: 'column'
    });
    const PickersLayout = function PickersLayout(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiPickersLayout'
      });
      const {
        toolbar,
        content,
        tabs,
        actionBar,
        shortcuts
      } = usePickerLayout$1(props);
      const {
        sx,
        className,
        isLandscape,
        ref,
        wrapperVariant
      } = props;
      const ownerState = props;
      const classes = useUtilityClasses$1(ownerState);
      return /*#__PURE__*/jsxRuntime_2(PickersLayoutRoot, {
        ref: ref,
        sx: sx,
        className: clsx(className, classes.root),
        ownerState: ownerState,
        children: [isLandscape ? shortcuts : toolbar, isLandscape ? toolbar : shortcuts, /*#__PURE__*/jsxRuntime_1(PickersLayoutContentWrapper, {
          className: classes.contentWrapper,
          children: wrapperVariant === 'desktop' ? /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
            children: [content, tabs]
          }) : /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
            children: [tabs, content]
          })
        }), actionBar]
      });
    };

    const validateTime$1 = ({
      adapter,
      value,
      props
    }) => {
      if (value === null) {
        return null;
      }
      const {
        minTime,
        maxTime,
        minutesStep,
        shouldDisableClock,
        shouldDisableTime,
        disableIgnoringDatePartForTimeValidation = false,
        disablePast,
        disableFuture,
        timezone
      } = props;
      const now = adapter.utils.dateWithTimezone(undefined, timezone);
      const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter.utils);
      switch (true) {
        case !adapter.utils.isValid(value):
          return 'invalidDate';
        case Boolean(minTime && isAfter(minTime, value)):
          return 'minTime';
        case Boolean(maxTime && isAfter(value, maxTime)):
          return 'maxTime';
        case Boolean(disableFuture && adapter.utils.isAfter(value, now)):
          return 'disableFuture';
        case Boolean(disablePast && adapter.utils.isBefore(value, now)):
          return 'disablePast';
        case Boolean(shouldDisableTime && shouldDisableTime(value, 'hours')):
          return 'shouldDisableTime-hours';
        case Boolean(shouldDisableTime && shouldDisableTime(value, 'minutes')):
          return 'shouldDisableTime-minutes';
        case Boolean(shouldDisableTime && shouldDisableTime(value, 'seconds')):
          return 'shouldDisableTime-seconds';
        case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getHours(value), 'hours')):
          return 'shouldDisableClock-hours';
        case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getMinutes(value), 'minutes')):
          return 'shouldDisableClock-minutes';
        case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getSeconds(value), 'seconds')):
          return 'shouldDisableClock-seconds';
        case Boolean(minutesStep && adapter.utils.getMinutes(value) % minutesStep !== 0):
          return 'minutesStep';
        default:
          return null;
      }
    };

    const _excluded$4 = ["ownerState"];
    const useClearableField = ({
      clearable,
      fieldProps: forwardedFieldProps,
      InputProps: ForwardedInputProps,
      onClear,
      slots,
      slotProps,
      components,
      componentsProps
    }) => {
      var _ref, _slots$clearButton, _slotProps$clearButto, _ref2, _slots$clearIcon, _slotProps$clearIcon;
      const localeText = useLocaleText();
      const IconButton = (_ref = (_slots$clearButton = slots == null ? void 0 : slots.clearButton) != null ? _slots$clearButton : components == null ? void 0 : components.ClearButton) != null ? _ref : IconButton$1;
      // The spread is here to avoid this bug mui/material-ui#34056
      const _useSlotProps = useSlotProps({
          elementType: IconButton,
          externalSlotProps: (_slotProps$clearButto = slotProps == null ? void 0 : slotProps.clearButton) != null ? _slotProps$clearButto : componentsProps == null ? void 0 : componentsProps.clearButton,
          ownerState: {},
          className: 'clearButton',
          additionalProps: {
            title: localeText.fieldClearLabel
          }
        }),
        iconButtonProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded$4);
      const EndClearIcon = (_ref2 = (_slots$clearIcon = slots == null ? void 0 : slots.clearIcon) != null ? _slots$clearIcon : components == null ? void 0 : components.ClearIcon) != null ? _ref2 : ClearIcon;
      const endClearIconProps = useSlotProps({
        elementType: EndClearIcon,
        externalSlotProps: (_slotProps$clearIcon = slotProps == null ? void 0 : slotProps.clearIcon) != null ? _slotProps$clearIcon : componentsProps == null ? void 0 : componentsProps.clearIcon,
        ownerState: {}
      });
      const InputProps = _extends({}, ForwardedInputProps, {
        endAdornment: clearable ? /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
          children: [/*#__PURE__*/jsxRuntime_1(MuiInputAdornment, {
            position: "end",
            sx: {
              marginRight: ForwardedInputProps != null && ForwardedInputProps.endAdornment ? -1 : -1.5
            },
            children: /*#__PURE__*/jsxRuntime_1(IconButton, _extends({}, iconButtonProps, {
              onClick: onClear,
              children: /*#__PURE__*/jsxRuntime_1(EndClearIcon, _extends({
                fontSize: "small"
              }, endClearIconProps))
            }))
          }), ForwardedInputProps == null ? void 0 : ForwardedInputProps.endAdornment]
        }) : ForwardedInputProps == null ? void 0 : ForwardedInputProps.endAdornment
      });
      const fieldProps = _extends({}, forwardedFieldProps, {
        sx: [{
          '& .clearButton': {
            opacity: 1
          },
          '@media (pointer: fine)': {
            '& .clearButton': {
              opacity: 0
            },
            '&:hover, &:focus-within': {
              '.clearButton': {
                opacity: 1
              }
            }
          }
        }, ...(Array.isArray(forwardedFieldProps.sx) ? forwardedFieldProps.sx : [forwardedFieldProps.sx])]
      });
      return {
        InputProps,
        fieldProps
      };
    };

    const useDefaultizedTimeField = props => {
      var _props$ampm, _props$disablePast, _props$disableFuture, _props$format;
      const utils = useUtils();
      const ampm = (_props$ampm = props.ampm) != null ? _props$ampm : utils.is12HourCycleInCurrentLocale();
      const defaultFormat = ampm ? utils.formats.fullTime12h : utils.formats.fullTime24h;
      return _extends({}, props, {
        disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
        disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
        format: (_props$format = props.format) != null ? _props$format : defaultFormat
      });
    };
    const useTimeField = ({
      props: inProps,
      inputRef
    }) => {
      const props = useDefaultizedTimeField(inProps);
      const {
        forwardedProps,
        internalProps
      } = splitFieldInternalAndForwardedProps(props, 'time');
      return useField({
        inputRef,
        forwardedProps,
        internalProps,
        valueManager: singleItemValueManager,
        fieldValueManager: singleItemFieldValueManager,
        validator: validateTime$1,
        valueType: 'time'
      });
    };

    const _excluded$3 = ["slots", "slotProps", "components", "componentsProps", "InputProps", "inputProps"],
      _excluded2$1 = ["inputRef"],
      _excluded3$1 = ["ref", "onPaste", "onKeyDown", "inputMode", "readOnly", "clearable", "onClear"];
    /**
     * Demos:
     *
     * - [TimeField](http://mui.com/x/react-date-pickers/time-field/)
     * - [Fields](https://mui.com/x/react-date-pickers/fields/)
     *
     * API:
     *
     * - [TimeField API](https://mui.com/x/api/date-pickers/time-field/)
     */
    const TimeField = /*#__PURE__*/React__namespace.forwardRef(function TimeField(inProps, ref) {
      var _ref, _slots$textField, _slotProps$textField;
      const themeProps = useThemeProps({
        props: inProps,
        name: 'MuiTimeField'
      });
      const {
          slots,
          slotProps,
          components,
          componentsProps,
          InputProps,
          inputProps
        } = themeProps,
        other = _objectWithoutPropertiesLoose(themeProps, _excluded$3);
      const ownerState = themeProps;
      const TextField = (_ref = (_slots$textField = slots == null ? void 0 : slots.textField) != null ? _slots$textField : components == null ? void 0 : components.TextField) != null ? _ref : MuiTextField;
      const _useSlotProps = useSlotProps({
          elementType: TextField,
          externalSlotProps: (_slotProps$textField = slotProps == null ? void 0 : slotProps.textField) != null ? _slotProps$textField : componentsProps == null ? void 0 : componentsProps.textField,
          externalForwardedProps: other,
          ownerState
        }),
        {
          inputRef: externalInputRef
        } = _useSlotProps,
        textFieldProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$1);

      // TODO: Remove when mui/material-ui#35088 will be merged
      textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);
      textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);
      const _useTimeField = useTimeField({
          props: textFieldProps,
          inputRef: externalInputRef
        }),
        {
          ref: inputRef,
          onPaste,
          onKeyDown,
          inputMode,
          readOnly,
          clearable,
          onClear
        } = _useTimeField,
        fieldProps = _objectWithoutPropertiesLoose(_useTimeField, _excluded3$1);
      const {
        InputProps: ProcessedInputProps,
        fieldProps: processedFieldProps
      } = useClearableField({
        onClear,
        clearable,
        fieldProps,
        InputProps: fieldProps.InputProps,
        slots,
        slotProps,
        components,
        componentsProps
      });
      return /*#__PURE__*/jsxRuntime_1(TextField, _extends({
        ref: ref
      }, processedFieldProps, {
        InputProps: _extends({}, ProcessedInputProps, {
          readOnly
        }),
        inputProps: _extends({}, fieldProps.inputProps, {
          inputMode,
          onPaste,
          onKeyDown,
          ref: inputRef
        })
      }));
    });

    const _excluded$2 = ["props", "getOpenDialogAriaText"],
      _excluded2 = ["ownerState"],
      _excluded3 = ["ownerState"];
    /**
     * Hook managing all the single-date desktop pickers:
     * - DesktopDatePicker
     * - DesktopDateTimePicker
     * - DesktopTimePicker
     */
    const useDesktopPicker = _ref => {
      var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$inputAdornment, _slots$openPickerButt, _slots$layout;
      let {
          props,
          getOpenDialogAriaText
        } = _ref,
        pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded$2);
      const {
        slots,
        slotProps: innerSlotProps,
        className,
        sx,
        format,
        formatDensity,
        timezone,
        label,
        inputRef,
        readOnly,
        disabled,
        autoFocus,
        localeText,
        reduceAnimations
      } = props;
      const utils = useUtils();
      const internalInputRef = React__namespace.useRef(null);
      const containerRef = React__namespace.useRef(null);
      const labelId = useId();
      const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null || (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
      const {
        open,
        actions,
        hasUIView,
        layoutProps,
        renderCurrentView,
        shouldRestoreFocus,
        fieldProps: pickerFieldProps
      } = usePicker(_extends({}, pickerParams, {
        props,
        inputRef: internalInputRef,
        autoFocusView: true,
        additionalViewProps: {},
        wrapperVariant: 'desktop'
      }));
      const InputAdornment = (_slots$inputAdornment = slots.inputAdornment) != null ? _slots$inputAdornment : MuiInputAdornment;
      const _useSlotProps = useSlotProps({
          elementType: InputAdornment,
          externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.inputAdornment,
          additionalProps: {
            position: 'end'
          },
          ownerState: props
        }),
        inputAdornmentProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2);
      const OpenPickerButton = (_slots$openPickerButt = slots.openPickerButton) != null ? _slots$openPickerButt : IconButton$1;
      const _useSlotProps2 = useSlotProps({
          elementType: OpenPickerButton,
          externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.openPickerButton,
          additionalProps: {
            disabled: disabled || readOnly,
            onClick: open ? actions.onClose : actions.onOpen,
            'aria-label': getOpenDialogAriaText(pickerFieldProps.value, utils),
            edge: inputAdornmentProps.position
          },
          ownerState: props
        }),
        openPickerButtonProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded3);
      const OpenPickerIcon = slots.openPickerIcon;
      const Field = slots.field;
      const fieldProps = useSlotProps({
        elementType: Field,
        externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
        additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
          id: labelId
        }, {
          readOnly,
          disabled,
          className,
          sx,
          format,
          formatDensity,
          timezone,
          label,
          autoFocus: autoFocus && !props.open,
          focused: open ? true : undefined
        }),
        ownerState: props
      });

      // TODO: Move to `useSlotProps` when https://github.com/mui/material-ui/pull/35088 will be merged
      if (hasUIView) {
        fieldProps.InputProps = _extends({}, fieldProps.InputProps, {
          ref: containerRef,
          [`${inputAdornmentProps.position}Adornment`]: /*#__PURE__*/jsxRuntime_1(InputAdornment, _extends({}, inputAdornmentProps, {
            children: /*#__PURE__*/jsxRuntime_1(OpenPickerButton, _extends({}, openPickerButtonProps, {
              children: /*#__PURE__*/jsxRuntime_1(OpenPickerIcon, _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.openPickerIcon))
            }))
          }))
        });
      }
      const slotsForField = _extends({
        textField: slots.textField,
        clearIcon: slots.clearIcon,
        clearButton: slots.clearButton
      }, fieldProps.slots);
      const Layout = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
      const handleInputRef = useForkRef(internalInputRef, fieldProps.inputRef, inputRef);
      let labelledById = labelId;
      if (isToolbarHidden) {
        if (label) {
          labelledById = `${labelId}-label`;
        } else {
          labelledById = undefined;
        }
      }
      const slotProps = _extends({}, innerSlotProps, {
        toolbar: _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
          titleId: labelId
        }),
        popper: _extends({
          'aria-labelledby': labelledById
        }, innerSlotProps == null ? void 0 : innerSlotProps.popper)
      });
      const renderPicker = () => /*#__PURE__*/jsxRuntime_2(LocalizationProvider, {
        localeText: localeText,
        children: [/*#__PURE__*/jsxRuntime_1(Field, _extends({}, fieldProps, {
          slots: slotsForField,
          slotProps: slotProps,
          inputRef: handleInputRef
        })), /*#__PURE__*/jsxRuntime_1(PickersPopper, _extends({
          role: "dialog",
          placement: "bottom-start",
          anchorEl: containerRef.current
        }, actions, {
          open: open,
          slots: slots,
          slotProps: slotProps,
          shouldRestoreFocus: shouldRestoreFocus,
          reduceAnimations: reduceAnimations,
          children: /*#__PURE__*/jsxRuntime_1(Layout, _extends({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
            slots: slots,
            slotProps: slotProps,
            children: renderCurrentView()
          }))
        }))]
      });
      return {
        renderPicker
      };
    };

    const _excluded$1 = ["props", "getOpenDialogAriaText"];
    /**
     * Hook managing all the single-date mobile pickers:
     * - MobileDatePicker
     * - MobileDateTimePicker
     * - MobileTimePicker
     */
    const useMobilePicker = _ref => {
      var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$layout;
      let {
          props,
          getOpenDialogAriaText
        } = _ref,
        pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded$1);
      const {
        slots,
        slotProps: innerSlotProps,
        className,
        sx,
        format,
        formatDensity,
        timezone,
        label,
        inputRef,
        readOnly,
        disabled,
        localeText
      } = props;
      const utils = useUtils();
      const internalInputRef = React__namespace.useRef(null);
      const labelId = useId();
      const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null || (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
      const {
        open,
        actions,
        layoutProps,
        renderCurrentView,
        fieldProps: pickerFieldProps
      } = usePicker(_extends({}, pickerParams, {
        props,
        inputRef: internalInputRef,
        autoFocusView: true,
        additionalViewProps: {},
        wrapperVariant: 'mobile'
      }));
      const Field = slots.field;
      const fieldProps = useSlotProps({
        elementType: Field,
        externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
        additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
          id: labelId
        }, !(disabled || readOnly) && {
          onClick: actions.onOpen,
          onKeyDown: onSpaceOrEnter(actions.onOpen)
        }, {
          readOnly: readOnly != null ? readOnly : true,
          disabled,
          className,
          sx,
          format,
          formatDensity,
          timezone,
          label
        }),
        ownerState: props
      });

      // TODO: Move to `useSlotProps` when https://github.com/mui/material-ui/pull/35088 will be merged
      fieldProps.inputProps = _extends({}, fieldProps.inputProps, {
        'aria-label': getOpenDialogAriaText(pickerFieldProps.value, utils)
      });
      const slotsForField = _extends({
        textField: slots.textField
      }, fieldProps.slots);
      const Layout = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
      const handleInputRef = useForkRef(internalInputRef, fieldProps.inputRef, inputRef);
      let labelledById = labelId;
      if (isToolbarHidden) {
        if (label) {
          labelledById = `${labelId}-label`;
        } else {
          labelledById = undefined;
        }
      }
      const slotProps = _extends({}, innerSlotProps, {
        toolbar: _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
          titleId: labelId
        }),
        mobilePaper: _extends({
          'aria-labelledby': labelledById
        }, innerSlotProps == null ? void 0 : innerSlotProps.mobilePaper)
      });
      const renderPicker = () => /*#__PURE__*/jsxRuntime_2(LocalizationProvider, {
        localeText: localeText,
        children: [/*#__PURE__*/jsxRuntime_1(Field, _extends({}, fieldProps, {
          slots: slotsForField,
          slotProps: slotProps,
          inputRef: handleInputRef
        })), /*#__PURE__*/jsxRuntime_1(PickersModalDialog, _extends({}, actions, {
          open: open,
          slots: slots,
          slotProps: slotProps,
          children: /*#__PURE__*/jsxRuntime_1(Layout, _extends({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
            slots: slots,
            slotProps: slotProps,
            children: renderCurrentView()
          }))
        }))]
      });
      return {
        renderPicker
      };
    };

    function getTimePickerToolbarUtilityClass(slot) {
      return generateUtilityClass('MuiTimePickerToolbar', slot);
    }
    const timePickerToolbarClasses = generateUtilityClasses('MuiTimePickerToolbar', ['root', 'separator', 'hourMinuteLabel', 'hourMinuteLabelLandscape', 'hourMinuteLabelReverse', 'ampmSelection', 'ampmLandscape', 'ampmLabel']);

    const _excluded = ["ampm", "ampmInClock", "value", "isLandscape", "onChange", "view", "onViewChange", "views", "disabled", "readOnly"];
    const useUtilityClasses = ownerState => {
      const {
        theme,
        isLandscape,
        classes
      } = ownerState;
      const slots = {
        root: ['root'],
        separator: ['separator'],
        hourMinuteLabel: ['hourMinuteLabel', isLandscape && 'hourMinuteLabelLandscape', theme.direction === 'rtl' && 'hourMinuteLabelReverse'],
        ampmSelection: ['ampmSelection', isLandscape && 'ampmLandscape'],
        ampmLabel: ['ampmLabel']
      };
      return composeClasses(slots, getTimePickerToolbarUtilityClass, classes);
    };
    const TimePickerToolbarRoot = styled$1(PickersToolbar, {
      name: 'MuiTimePickerToolbar',
      slot: 'Root',
      overridesResolver: (props, styles) => styles.root
    })({});
    const TimePickerToolbarSeparator = styled$1(PickersToolbarText, {
      name: 'MuiTimePickerToolbar',
      slot: 'Separator',
      overridesResolver: (props, styles) => styles.separator
    })({
      outline: 0,
      margin: '0 4px 0 2px',
      cursor: 'default'
    });
    const TimePickerToolbarHourMinuteLabel = styled$1('div', {
      name: 'MuiTimePickerToolbar',
      slot: 'HourMinuteLabel',
      overridesResolver: (props, styles) => [{
        [`&.${timePickerToolbarClasses.hourMinuteLabelLandscape}`]: styles.hourMinuteLabelLandscape,
        [`&.${timePickerToolbarClasses.hourMinuteLabelReverse}`]: styles.hourMinuteLabelReverse
      }, styles.hourMinuteLabel]
    })(({
      theme,
      ownerState
    }) => _extends({
      display: 'flex',
      justifyContent: 'flex-end',
      alignItems: 'flex-end'
    }, ownerState.isLandscape && {
      marginTop: 'auto'
    }, theme.direction === 'rtl' && {
      flexDirection: 'row-reverse'
    }));
    TimePickerToolbarHourMinuteLabel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      as: PropTypes.elementType,
      ownerState: PropTypes.object.isRequired,
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    };
    const TimePickerToolbarAmPmSelection = styled$1('div', {
      name: 'MuiTimePickerToolbar',
      slot: 'AmPmSelection',
      overridesResolver: (props, styles) => [{
        [`.${timePickerToolbarClasses.ampmLabel}`]: styles.ampmLabel
      }, {
        [`&.${timePickerToolbarClasses.ampmLandscape}`]: styles.ampmLandscape
      }, styles.ampmSelection]
    })(({
      ownerState
    }) => _extends({
      display: 'flex',
      flexDirection: 'column',
      marginRight: 'auto',
      marginLeft: 12
    }, ownerState.isLandscape && {
      margin: '4px 0 auto',
      flexDirection: 'row',
      justifyContent: 'space-around',
      flexBasis: '100%'
    }, {
      [`& .${timePickerToolbarClasses.ampmLabel}`]: {
        fontSize: 17
      }
    }));
    TimePickerToolbarAmPmSelection.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      as: PropTypes.elementType,
      ownerState: PropTypes.object.isRequired,
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    };
    function TimePickerToolbar(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: 'MuiTimePickerToolbar'
      });
      const {
          ampm,
          ampmInClock,
          value,
          isLandscape,
          onChange,
          view,
          onViewChange,
          views,
          disabled,
          readOnly
        } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded);
      const utils = useUtils();
      const localeText = useLocaleText();
      const theme = useTheme();
      const showAmPmControl = Boolean(ampm && !ampmInClock && views.includes('hours'));
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(value, ampm, onChange);
      const formatHours = time => ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');
      const ownerState = props;
      const classes = useUtilityClasses(_extends({}, ownerState, {
        theme
      }));
      const separator = /*#__PURE__*/jsxRuntime_1(TimePickerToolbarSeparator, {
        tabIndex: -1,
        value: ":",
        variant: "h3",
        selected: false,
        className: classes.separator
      });
      return /*#__PURE__*/jsxRuntime_2(TimePickerToolbarRoot, _extends({
        landscapeDirection: "row",
        toolbarTitle: localeText.timePickerToolbarTitle,
        isLandscape: isLandscape,
        ownerState: ownerState,
        className: classes.root
      }, other, {
        children: [/*#__PURE__*/jsxRuntime_2(TimePickerToolbarHourMinuteLabel, {
          className: classes.hourMinuteLabel,
          ownerState: ownerState,
          children: [arrayIncludes(views, 'hours') && /*#__PURE__*/jsxRuntime_1(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h3",
            onClick: () => onViewChange('hours'),
            selected: view === 'hours',
            value: value ? formatHours(value) : '--'
          }), arrayIncludes(views, ['hours', 'minutes']) && separator, arrayIncludes(views, 'minutes') && /*#__PURE__*/jsxRuntime_1(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h3",
            onClick: () => onViewChange('minutes'),
            selected: view === 'minutes',
            value: value ? utils.format(value, 'minutes') : '--'
          }), arrayIncludes(views, ['minutes', 'seconds']) && separator, arrayIncludes(views, 'seconds') && /*#__PURE__*/jsxRuntime_1(PickersToolbarButton, {
            variant: "h3",
            onClick: () => onViewChange('seconds'),
            selected: view === 'seconds',
            value: value ? utils.format(value, 'seconds') : '--'
          })]
        }), showAmPmControl && /*#__PURE__*/jsxRuntime_2(TimePickerToolbarAmPmSelection, {
          className: classes.ampmSelection,
          ownerState: ownerState,
          children: [/*#__PURE__*/jsxRuntime_1(PickersToolbarButton, {
            disableRipple: true,
            variant: "subtitle2",
            selected: meridiemMode === 'am',
            typographyClassName: classes.ampmLabel,
            value: formatMeridiem(utils, 'am'),
            onClick: readOnly ? undefined : () => handleMeridiemChange('am'),
            disabled: disabled
          }), /*#__PURE__*/jsxRuntime_1(PickersToolbarButton, {
            disableRipple: true,
            variant: "subtitle2",
            selected: meridiemMode === 'pm',
            typographyClassName: classes.ampmLabel,
            value: formatMeridiem(utils, 'pm'),
            onClick: readOnly ? undefined : () => handleMeridiemChange('pm'),
            disabled: disabled
          })]
        })]
      }));
    }

    function useTimePickerDefaultizedProps(props, name) {
      var _themeProps$ampm, _themeProps$slots, _themeProps$slotProps, _themeProps$disableFu, _themeProps$disablePa;
      const utils = useUtils();
      const themeProps = useThemeProps({
        props,
        name
      });
      const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();
      const localeText = React__namespace.useMemo(() => {
        var _themeProps$localeTex;
        if (((_themeProps$localeTex = themeProps.localeText) == null ? void 0 : _themeProps$localeTex.toolbarTitle) == null) {
          return themeProps.localeText;
        }
        return _extends({}, themeProps.localeText, {
          timePickerToolbarTitle: themeProps.localeText.toolbarTitle
        });
      }, [themeProps.localeText]);
      const slots = (_themeProps$slots = themeProps.slots) != null ? _themeProps$slots : uncapitalizeObjectKeys(themeProps.components);
      const slotProps = (_themeProps$slotProps = themeProps.slotProps) != null ? _themeProps$slotProps : themeProps.componentsProps;
      return _extends({}, themeProps, {
        ampm,
        localeText
      }, applyDefaultViewProps({
        views: themeProps.views,
        openTo: themeProps.openTo,
        defaultViews: ['hours', 'minutes'],
        defaultOpenTo: 'hours'
      }), {
        disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
        disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
        slots: _extends({
          toolbar: TimePickerToolbar
        }, slots),
        slotProps: _extends({}, slotProps, {
          toolbar: _extends({
            ampm,
            ampmInClock: themeProps.ampmInClock
          }, slotProps == null ? void 0 : slotProps.toolbar)
        })
      });
    }

    const renderTimeViewClock = ({
      view,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      views,
      value,
      defaultValue,
      referenceDate,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minTime,
      maxTime,
      shouldDisableTime,
      shouldDisableClock,
      minutesStep,
      ampm,
      ampmInClock,
      components,
      componentsProps,
      slots,
      slotProps,
      readOnly,
      disabled,
      sx,
      autoFocus,
      showViewSwitcher,
      disableIgnoringDatePartForTimeValidation,
      timezone
    }) => /*#__PURE__*/jsxRuntime_1(TimeClock, {
      view: view,
      onViewChange: onViewChange,
      focusedView: focusedView && isTimeView(focusedView) ? focusedView : null,
      onFocusedViewChange: onFocusedViewChange,
      views: views.filter(isTimeView),
      value: value,
      defaultValue: defaultValue,
      referenceDate: referenceDate,
      onChange: onChange,
      className: className,
      classes: classes,
      disableFuture: disableFuture,
      disablePast: disablePast,
      minTime: minTime,
      maxTime: maxTime,
      shouldDisableTime: shouldDisableTime,
      shouldDisableClock: shouldDisableClock,
      minutesStep: minutesStep,
      ampm: ampm,
      ampmInClock: ampmInClock,
      components: components,
      componentsProps: componentsProps,
      slots: slots,
      slotProps: slotProps,
      readOnly: readOnly,
      disabled: disabled,
      sx: sx,
      autoFocus: autoFocus,
      showViewSwitcher: showViewSwitcher,
      disableIgnoringDatePartForTimeValidation: disableIgnoringDatePartForTimeValidation,
      timezone: timezone
    });
    const renderDigitalClockTimeView = ({
      view,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      views,
      value,
      defaultValue,
      referenceDate,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minTime,
      maxTime,
      shouldDisableTime,
      shouldDisableClock,
      minutesStep,
      ampm,
      components,
      componentsProps,
      slots,
      slotProps,
      readOnly,
      disabled,
      sx,
      autoFocus,
      disableIgnoringDatePartForTimeValidation,
      timeSteps,
      skipDisabled,
      timezone
    }) => /*#__PURE__*/jsxRuntime_1(DigitalClock, {
      view: view,
      onViewChange: onViewChange,
      focusedView: focusedView,
      onFocusedViewChange: onFocusedViewChange,
      views: views.filter(isTimeView),
      value: value,
      defaultValue: defaultValue,
      referenceDate: referenceDate,
      onChange: onChange,
      className: className,
      classes: classes,
      disableFuture: disableFuture,
      disablePast: disablePast,
      minTime: minTime,
      maxTime: maxTime,
      shouldDisableTime: shouldDisableTime,
      shouldDisableClock: shouldDisableClock,
      minutesStep: minutesStep,
      ampm: ampm,
      components: components,
      componentsProps: componentsProps,
      slots: slots,
      slotProps: slotProps,
      readOnly: readOnly,
      disabled: disabled,
      sx: sx,
      autoFocus: autoFocus,
      disableIgnoringDatePartForTimeValidation: disableIgnoringDatePartForTimeValidation,
      timeStep: timeSteps == null ? void 0 : timeSteps.minutes,
      skipDisabled: skipDisabled,
      timezone: timezone
    });
    const renderMultiSectionDigitalClockTimeView = ({
      view,
      onViewChange,
      focusedView,
      onFocusedViewChange,
      views,
      value,
      defaultValue,
      referenceDate,
      onChange,
      className,
      classes,
      disableFuture,
      disablePast,
      minTime,
      maxTime,
      shouldDisableTime,
      shouldDisableClock,
      minutesStep,
      ampm,
      components,
      componentsProps,
      slots,
      slotProps,
      readOnly,
      disabled,
      sx,
      autoFocus,
      disableIgnoringDatePartForTimeValidation,
      timeSteps,
      skipDisabled,
      timezone
    }) => /*#__PURE__*/jsxRuntime_1(MultiSectionDigitalClock, {
      view: view,
      onViewChange: onViewChange,
      focusedView: focusedView,
      onFocusedViewChange: onFocusedViewChange,
      views: views.filter(isTimeView),
      value: value,
      defaultValue: defaultValue,
      referenceDate: referenceDate,
      onChange: onChange,
      className: className,
      classes: classes,
      disableFuture: disableFuture,
      disablePast: disablePast,
      minTime: minTime,
      maxTime: maxTime,
      shouldDisableTime: shouldDisableTime,
      shouldDisableClock: shouldDisableClock,
      minutesStep: minutesStep,
      ampm: ampm,
      components: components,
      componentsProps: componentsProps,
      slots: slots,
      slotProps: slotProps,
      readOnly: readOnly,
      disabled: disabled,
      sx: sx,
      autoFocus: autoFocus,
      disableIgnoringDatePartForTimeValidation: disableIgnoringDatePartForTimeValidation,
      timeSteps: timeSteps,
      skipDisabled: skipDisabled,
      timezone: timezone
    });

    const resolveViews = (ampm, views, shouldUseSingleColumn) => {
      if (shouldUseSingleColumn) {
        return views.filter(view => !isInternalTimeView(view) || view === 'hours');
      }
      return ampm ? [...views, 'meridiem'] : views;
    };
    const resolveShouldRenderTimeInASingleColumn = (timeSteps, threshold) => {
      var _timeSteps$hours, _timeSteps$minutes;
      return 24 * 60 / (((_timeSteps$hours = timeSteps.hours) != null ? _timeSteps$hours : 1) * ((_timeSteps$minutes = timeSteps.minutes) != null ? _timeSteps$minutes : 5)) <= threshold;
    };
    function resolveTimeViewsResponse({
      thresholdToRenderTimeInASingleColumn: inThreshold,
      ampm,
      timeSteps: inTimeSteps,
      views
    }) {
      const thresholdToRenderTimeInASingleColumn = inThreshold != null ? inThreshold : 24;
      const timeSteps = _extends({
        hours: 1,
        minutes: 5,
        seconds: 5
      }, inTimeSteps);
      const shouldRenderTimeInASingleColumn = resolveShouldRenderTimeInASingleColumn(timeSteps, thresholdToRenderTimeInASingleColumn);
      return {
        thresholdToRenderTimeInASingleColumn,
        timeSteps,
        shouldRenderTimeInASingleColumn,
        views: resolveViews(ampm, views, shouldRenderTimeInASingleColumn)
      };
    }

    /**
     * Demos:
     *
     * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)
     * - [Validation](https://mui.com/x/react-date-pickers/validation/)
     *
     * API:
     *
     * - [DesktopTimePicker API](https://mui.com/x/api/date-pickers/desktop-time-picker/)
     */
    const DesktopTimePicker = /*#__PURE__*/React__namespace.forwardRef(function DesktopTimePicker(inProps, ref) {
      var _defaultizedProps$amp, _viewRenderers$hours, _defaultizedProps$slo2, _defaultizedProps$slo3, _props$localeText$ope, _props$localeText;
      const localeText = useLocaleText();
      const utils = useUtils();

      // Props with the default values common to all time pickers
      const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');
      const {
        shouldRenderTimeInASingleColumn,
        views: resolvedViews,
        timeSteps
      } = resolveTimeViewsResponse(defaultizedProps);
      const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;
      const viewRenderers = _extends({
        hours: renderTimeView,
        minutes: renderTimeView,
        seconds: renderTimeView,
        meridiem: renderTimeView
      }, defaultizedProps.viewRenderers);
      const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;
      const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ['accept'];
      // Need to avoid adding the `meridiem` view when unexpected renderer is specified
      const shouldHoursRendererContainMeridiemView = ((_viewRenderers$hours = viewRenderers.hours) == null ? void 0 : _viewRenderers$hours.name) === renderMultiSectionDigitalClockTimeView.name;
      const views = !shouldHoursRendererContainMeridiemView ? resolvedViews.filter(view => view !== 'meridiem') : resolvedViews;

      // Props with the default values specific to the desktop variant
      const props = _extends({}, defaultizedProps, {
        ampmInClock,
        timeSteps,
        viewRenderers,
        format: resolveTimeFormat(utils, defaultizedProps),
        // Setting only `hours` time view in case of single column time picker
        // Allows for easy view lifecycle management
        views: shouldRenderTimeInASingleColumn ? ['hours'] : views,
        slots: _extends({
          field: TimeField,
          openPickerIcon: ClockIcon
        }, defaultizedProps.slots),
        slotProps: _extends({}, defaultizedProps.slotProps, {
          field: ownerState => {
            var _defaultizedProps$slo;
            return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
              ref
            });
          },
          toolbar: _extends({
            hidden: true,
            ampmInClock
          }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
          actionBar: _extends({
            actions: actionBarActions
          }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.actionBar)
        })
      });
      const {
        renderPicker
      } = useDesktopPicker({
        props,
        valueManager: singleItemValueManager,
        valueType: 'time',
        getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openTimePickerDialogue) != null ? _props$localeText$ope : localeText.openTimePickerDialogue,
        validator: validateTime$1
      });
      return renderPicker();
    });
    DesktopTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,
      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default true on desktop, false on mobile
       */
      ampmInClock: PropTypes.bool,
      /**
       * If `true`, the main element is focused during the first mount.
       * This main element is:
       * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
       * - the `input` element if there is a field rendered.
       */
      autoFocus: PropTypes.bool,
      /**
       * Class name applied to the root element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the popover or modal will close after submitting the full date.
       * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,
      /**
       * Overridable components.
       * @default {}
       * @deprecated Please use `slots`.
       */
      components: PropTypes.object,
      /**
       * The props used for each component slot.
       * @default {}
       * @deprecated Please use `slotProps`.
       */
      componentsProps: PropTypes.object,
      /**
       * The default value.
       * Used when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, disable values after the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disableFuture: PropTypes.bool,
      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,
      /**
       * If `true`, the open picker button will not be rendered (renders only the field).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,
      /**
       * If `true`, disable values before the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disablePast: PropTypes.bool,
      /**
       * Format of the date when rendered in the input(s).
       * Defaults to localized format based on the used `views`.
       */
      format: PropTypes.string,
      /**
       * Density of the format when rendered in the input.
       * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
       * @default "dense"
       */
      formatDensity: PropTypes.oneOf(['dense', 'spacious']),
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * The label content.
       */
      label: PropTypes.node,
      /**
       * Locale for components texts.
       * Allows overriding texts coming from `LocalizationProvider` and `theme`.
       */
      localeText: PropTypes.object,
      /**
       * Maximal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      maxTime: PropTypes.any,
      /**
       * Minimal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      minTime: PropTypes.any,
      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,
      /**
       * Callback fired when the value is accepted.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,
      /**
       * Callback fired when the value changes.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The new value.
       * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see `open`).
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the error associated to the current value changes.
       * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
       *
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TError} error The new error describing why the current value is not valid.
       * @param {TValue} value The value associated to the error.
       */
      onError: PropTypes.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see `open`).
       */
      onOpen: PropTypes.func,
      /**
       * Callback fired when the selected sections change.
       * @param {FieldSelectedSections} newValue The new selected sections.
       */
      onSelectedSectionsChange: PropTypes.func,
      /**
       * Callback fired on view change.
       * @template TView
       * @param {TView} view The new view.
       */
      onViewChange: PropTypes.func,
      /**
       * Control the popup or dialog open state.
       * @default false
       */
      open: PropTypes.bool,
      /**
       * The default visible view.
       * Used when the component view is not controlled.
       * Must be a valid option from `views` list.
       */
      openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),
      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),
      readOnly: PropTypes.bool,
      /**
       * If `true`, disable heavy animations.
       * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
       */
      reduceAnimations: PropTypes.bool,
      /**
       * The date used to generate the new value when both `value` and `defaultValue` are empty.
       * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
       */
      referenceDate: PropTypes.any,
      /**
       * The currently selected sections.
       * This prop accept four formats:
       * 1. If a number is provided, the section at this index will be selected.
       * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
       * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
       * 4. If `null` is provided, no section will be selected
       * If not provided, the selected sections will be handled internally.
       */
      selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({
        endIndex: PropTypes.number.isRequired,
        startIndex: PropTypes.number.isRequired
      })]),
      /**
       * Disable specific clock time.
       * @param {number} clockValue The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       * @deprecated Consider using `shouldDisableTime`.
       */
      shouldDisableClock: PropTypes.func,
      /**
       * Disable specific time.
       * @template TDate
       * @param {TDate} value The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       */
      shouldDisableTime: PropTypes.func,
      /**
       * If `true`, disabled digital clock items will not be rendered.
       * @default false
       */
      skipDisabled: PropTypes.bool,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: PropTypes.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Amount of time options below or at which the single column time renderer is used.
       * @default 24
       */
      thresholdToRenderTimeInASingleColumn: PropTypes.number,
      /**
       * The time steps between two time unit options.
       * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
       * When single column time renderer is used, only `timeStep.minutes` will be used.
       * @default{ hours: 1, minutes: 5, seconds: 5 }
       */
      timeSteps: PropTypes.shape({
        hours: PropTypes.number,
        minutes: PropTypes.number,
        seconds: PropTypes.number
      }),
      /**
       * Choose which timezone to use for the value.
       * Example: "default", "system", "UTC", "America/New_York".
       * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
       * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
       * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
       */
      timezone: PropTypes.string,
      /**
       * The selected value.
       * Used when the component is controlled.
       */
      value: PropTypes.any,
      /**
       * The visible view.
       * Used when the component view is controlled.
       * Must be a valid option from `views` list.
       */
      view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),
      /**
       * Define custom view renderers for each section.
       * If `null`, the section will only have field editing.
       * If `undefined`, internally defined view will be the used.
       */
      viewRenderers: PropTypes.shape({
        hours: PropTypes.func,
        meridiem: PropTypes.func,
        minutes: PropTypes.func,
        seconds: PropTypes.func
      }),
      /**
       * Available views.
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)
    };

    /**
     * Demos:
     *
     * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)
     * - [Validation](https://mui.com/x/react-date-pickers/validation/)
     *
     * API:
     *
     * - [MobileTimePicker API](https://mui.com/x/api/date-pickers/mobile-time-picker/)
     */
    const MobileTimePicker = /*#__PURE__*/React__namespace.forwardRef(function MobileTimePicker(inProps, ref) {
      var _defaultizedProps$amp, _defaultizedProps$slo2, _props$localeText$ope, _props$localeText;
      const localeText = useLocaleText();
      const utils = useUtils();

      // Props with the default values common to all time pickers
      const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiMobileTimePicker');
      const viewRenderers = _extends({
        hours: renderTimeViewClock,
        minutes: renderTimeViewClock,
        seconds: renderTimeViewClock
      }, defaultizedProps.viewRenderers);
      const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : false;

      // Props with the default values specific to the mobile variant
      const props = _extends({}, defaultizedProps, {
        ampmInClock,
        viewRenderers,
        format: resolveTimeFormat(utils, defaultizedProps),
        slots: _extends({
          field: TimeField
        }, defaultizedProps.slots),
        slotProps: _extends({}, defaultizedProps.slotProps, {
          field: ownerState => {
            var _defaultizedProps$slo;
            return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
              ref
            });
          },
          toolbar: _extends({
            hidden: false,
            ampmInClock
          }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)
        })
      });
      const {
        renderPicker
      } = useMobilePicker({
        props,
        valueManager: singleItemValueManager,
        valueType: 'time',
        getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openTimePickerDialogue) != null ? _props$localeText$ope : localeText.openTimePickerDialogue,
        validator: validateTime$1
      });
      return renderPicker();
    });
    MobileTimePicker.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // | To update them edit the TypeScript types and run "yarn proptypes"  |
      // ----------------------------------------------------------------------
      /**
       * 12h/24h view for hour selection clock.
       * @default `utils.is12HourCycleInCurrentLocale()`
       */
      ampm: PropTypes.bool,
      /**
       * Display ampm controls under the clock (instead of in the toolbar).
       * @default true on desktop, false on mobile
       */
      ampmInClock: PropTypes.bool,
      /**
       * If `true`, the main element is focused during the first mount.
       * This main element is:
       * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
       * - the `input` element if there is a field rendered.
       */
      autoFocus: PropTypes.bool,
      /**
       * Class name applied to the root element.
       */
      className: PropTypes.string,
      /**
       * If `true`, the popover or modal will close after submitting the full date.
       * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
       */
      closeOnSelect: PropTypes.bool,
      /**
       * Overridable components.
       * @default {}
       * @deprecated Please use `slots`.
       */
      components: PropTypes.object,
      /**
       * The props used for each component slot.
       * @default {}
       * @deprecated Please use `slotProps`.
       */
      componentsProps: PropTypes.object,
      /**
       * The default value.
       * Used when the component is not controlled.
       */
      defaultValue: PropTypes.any,
      /**
       * If `true`, the picker and text field are disabled.
       * @default false
       */
      disabled: PropTypes.bool,
      /**
       * If `true`, disable values after the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disableFuture: PropTypes.bool,
      /**
       * Do not ignore date part when validating min/max time.
       * @default false
       */
      disableIgnoringDatePartForTimeValidation: PropTypes.bool,
      /**
       * If `true`, the open picker button will not be rendered (renders only the field).
       * @default false
       */
      disableOpenPicker: PropTypes.bool,
      /**
       * If `true`, disable values before the current date for date components, time for time components and both for date time components.
       * @default false
       */
      disablePast: PropTypes.bool,
      /**
       * Format of the date when rendered in the input(s).
       * Defaults to localized format based on the used `views`.
       */
      format: PropTypes.string,
      /**
       * Density of the format when rendered in the input.
       * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
       * @default "dense"
       */
      formatDensity: PropTypes.oneOf(['dense', 'spacious']),
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,
      /**
       * The label content.
       */
      label: PropTypes.node,
      /**
       * Locale for components texts.
       * Allows overriding texts coming from `LocalizationProvider` and `theme`.
       */
      localeText: PropTypes.object,
      /**
       * Maximal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      maxTime: PropTypes.any,
      /**
       * Minimal selectable time.
       * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
       */
      minTime: PropTypes.any,
      /**
       * Step over minutes.
       * @default 1
       */
      minutesStep: PropTypes.number,
      /**
       * Callback fired when the value is accepted.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The value that was just accepted.
       */
      onAccept: PropTypes.func,
      /**
       * Callback fired when the value changes.
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TValue} value The new value.
       * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
       */
      onChange: PropTypes.func,
      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see `open`).
       */
      onClose: PropTypes.func,
      /**
       * Callback fired when the error associated to the current value changes.
       * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
       *
       * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
       * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
       * @param {TError} error The new error describing why the current value is not valid.
       * @param {TValue} value The value associated to the error.
       */
      onError: PropTypes.func,
      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see `open`).
       */
      onOpen: PropTypes.func,
      /**
       * Callback fired when the selected sections change.
       * @param {FieldSelectedSections} newValue The new selected sections.
       */
      onSelectedSectionsChange: PropTypes.func,
      /**
       * Callback fired on view change.
       * @template TView
       * @param {TView} view The new view.
       */
      onViewChange: PropTypes.func,
      /**
       * Control the popup or dialog open state.
       * @default false
       */
      open: PropTypes.bool,
      /**
       * The default visible view.
       * Used when the component view is not controlled.
       * Must be a valid option from `views` list.
       */
      openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),
      /**
       * Force rendering in particular orientation.
       */
      orientation: PropTypes.oneOf(['landscape', 'portrait']),
      readOnly: PropTypes.bool,
      /**
       * If `true`, disable heavy animations.
       * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
       */
      reduceAnimations: PropTypes.bool,
      /**
       * The date used to generate the new value when both `value` and `defaultValue` are empty.
       * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
       */
      referenceDate: PropTypes.any,
      /**
       * The currently selected sections.
       * This prop accept four formats:
       * 1. If a number is provided, the section at this index will be selected.
       * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
       * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
       * 4. If `null` is provided, no section will be selected
       * If not provided, the selected sections will be handled internally.
       */
      selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({
        endIndex: PropTypes.number.isRequired,
        startIndex: PropTypes.number.isRequired
      })]),
      /**
       * Disable specific clock time.
       * @param {number} clockValue The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       * @deprecated Consider using `shouldDisableTime`.
       */
      shouldDisableClock: PropTypes.func,
      /**
       * Disable specific time.
       * @template TDate
       * @param {TDate} value The value to check.
       * @param {TimeView} view The clock type of the timeValue.
       * @returns {boolean} If `true` the time will be disabled.
       */
      shouldDisableTime: PropTypes.func,
      /**
       * The props used for each component slot.
       * @default {}
       */
      slotProps: PropTypes.object,
      /**
       * Overridable component slots.
       * @default {}
       */
      slots: PropTypes.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      /**
       * Choose which timezone to use for the value.
       * Example: "default", "system", "UTC", "America/New_York".
       * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
       * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
       * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
       */
      timezone: PropTypes.string,
      /**
       * The selected value.
       * Used when the component is controlled.
       */
      value: PropTypes.any,
      /**
       * The visible view.
       * Used when the component view is controlled.
       * Must be a valid option from `views` list.
       */
      view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),
      /**
       * Define custom view renderers for each section.
       * If `null`, the section will only have field editing.
       * If `undefined`, internally defined view will be the used.
       */
      viewRenderers: PropTypes.shape({
        hours: PropTypes.func,
        minutes: PropTypes.func,
        seconds: PropTypes.func
      }),
      /**
       * Available views.
       */
      views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)
    };

    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }
      var number = Number(dirtyNumber);
      if (isNaN(number)) {
        return number;
      }
      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    function _typeof(o) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof(o);
    }

    function requiredArgs(required, args) {
      if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
      }
    }

    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */
    function toDate(argument) {
      requiredArgs(1, arguments);
      var argStr = Object.prototype.toString.call(argument);

      // Clone the date
      if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
      } else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
      } else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
          // eslint-disable-next-line no-console
          console.warn(new Error().stack);
        }
        return new Date(NaN);
      }
    }

    /**
     * @name addDays
     * @category Day Helpers
     * @summary Add the specified number of days to the given date.
     *
     * @description
     * Add the specified number of days to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} - the new date with the days added
     * @throws {TypeError} - 2 arguments required
     *
     * @example
     * // Add 10 days to 1 September 2014:
     * const result = addDays(new Date(2014, 8, 1), 10)
     * //=> Thu Sep 11 2014 00:00:00
     */
    function addDays(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var amount = toInteger(dirtyAmount);
      if (isNaN(amount)) {
        return new Date(NaN);
      }
      if (!amount) {
        // If 0 days, no-op to avoid changing times in the hour before end of DST
        return date;
      }
      date.setDate(date.getDate() + amount);
      return date;
    }

    /**
     * @name addMilliseconds
     * @category Millisecond Helpers
     * @summary Add the specified number of milliseconds to the given date.
     *
     * @description
     * Add the specified number of milliseconds to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
     * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:30.750
     */
    function addMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var timestamp = toDate(dirtyDate).getTime();
      var amount = toInteger(dirtyAmount);
      return new Date(timestamp + amount);
    }

    /**
     * @name addSeconds
     * @category Second Helpers
     * @summary Add the specified number of seconds to the given date.
     *
     * @description
     * Add the specified number of seconds to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the seconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 30 seconds to 10 July 2014 12:45:00:
     * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
     * //=> Thu Jul 10 2014 12:45:30
     */
    function addSeconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, amount * 1000);
    }

    var MILLISECONDS_IN_MINUTE = 60000;

    /**
     * @name addMinutes
     * @category Minute Helpers
     * @summary Add the specified number of minutes to the given date.
     *
     * @description
     * Add the specified number of minutes to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the minutes added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 30 minutes to 10 July 2014 12:00:00:
     * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
     * //=> Thu Jul 10 2014 12:30:00
     */
    function addMinutes(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
    }

    var MILLISECONDS_IN_HOUR = 3600000;

    /**
     * @name addHours
     * @category Hour Helpers
     * @summary Add the specified number of hours to the given date.
     *
     * @description
     * Add the specified number of hours to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the hours added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 2 hours to 10 July 2014 23:00:00:
     * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
     * //=> Fri Jul 11 2014 01:00:00
     */
    function addHours(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
    }

    /**
     * @name addWeeks
     * @category Week Helpers
     * @summary Add the specified number of weeks to the given date.
     *
     * @description
     * Add the specified number of week to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the weeks added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 4 weeks to 1 September 2014:
     * const result = addWeeks(new Date(2014, 8, 1), 4)
     * //=> Mon Sep 29 2014 00:00:00
     */
    function addWeeks(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      var days = amount * 7;
      return addDays(dirtyDate, days);
    }

    /**
     * @name addMonths
     * @category Month Helpers
     * @summary Add the specified number of months to the given date.
     *
     * @description
     * Add the specified number of months to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the months added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 5 months to 1 September 2014:
     * const result = addMonths(new Date(2014, 8, 1), 5)
     * //=> Sun Feb 01 2015 00:00:00
     */
    function addMonths(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var amount = toInteger(dirtyAmount);
      if (isNaN(amount)) {
        return new Date(NaN);
      }
      if (!amount) {
        // If 0 months, no-op to avoid changing times in the hour before end of DST
        return date;
      }
      var dayOfMonth = date.getDate();

      // The JS Date object supports date math by accepting out-of-bounds values for
      // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
      // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
      // want except that dates will wrap around the end of a month, meaning that
      // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
      // we'll default to the end of the desired month by adding 1 to the desired
      // month and using a date of 0 to back up one day to the end of the desired
      // month.
      var endOfDesiredMonth = new Date(date.getTime());
      endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
      var daysInMonth = endOfDesiredMonth.getDate();
      if (dayOfMonth >= daysInMonth) {
        // If we're already at the end of the month, then this is the correct date
        // and we're done.
        return endOfDesiredMonth;
      } else {
        // Otherwise, we now know that setting the original day-of-month value won't
        // cause an overflow, so set the desired day-of-month. Note that we can't
        // just set the date of `endOfDesiredMonth` because that object may have had
        // its time changed in the unusual case where where a DST transition was on
        // the last day of the month and its local time was in the hour skipped or
        // repeated next to a DST transition.  So we use `date` instead which is
        // guaranteed to still have the original time.
        date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
        return date;
      }
    }

    /**
     * @name addYears
     * @category Year Helpers
     * @summary Add the specified number of years to the given date.
     *
     * @description
     * Add the specified number of years to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the years added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 5 years to 1 September 2014:
     * const result = addYears(new Date(2014, 8, 1), 5)
     * //=> Sun Sep 01 2019 00:00:00
     */
    function addYears(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMonths(dirtyDate, amount * 12);
    }

    /**
     * @name differenceInCalendarYears
     * @category Year Helpers
     * @summary Get the number of calendar years between the given dates.
     *
     * @description
     * Get the number of calendar years between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of calendar years
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many calendar years are between 31 December 2013 and 11 February 2015?
     * const result = differenceInCalendarYears(
     *   new Date(2015, 1, 11),
     *   new Date(2013, 11, 31)
     * )
     * //=> 2
     */
    function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      return dateLeft.getFullYear() - dateRight.getFullYear();
    }

    /**
     * @name compareAsc
     * @category Common Helpers
     * @summary Compare the two dates and return -1, 0 or 1.
     *
     * @description
     * Compare the two dates and return 1 if the first date is after the second,
     * -1 if the first date is before the second or 0 if dates are equal.
     *
     * @param {Date|Number} dateLeft - the first date to compare
     * @param {Date|Number} dateRight - the second date to compare
     * @returns {Number} the result of the comparison
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Compare 11 February 1987 and 10 July 1989:
     * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
     * //=> -1
     *
     * @example
     * // Sort the array of dates:
     * const result = [
     *   new Date(1995, 6, 2),
     *   new Date(1987, 1, 11),
     *   new Date(1989, 6, 10)
     * ].sort(compareAsc)
     * //=> [
     * //   Wed Feb 11 1987 00:00:00,
     * //   Mon Jul 10 1989 00:00:00,
     * //   Sun Jul 02 1995 00:00:00
     * // ]
     */
    function compareAsc(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      var diff = dateLeft.getTime() - dateRight.getTime();
      if (diff < 0) {
        return -1;
      } else if (diff > 0) {
        return 1;
        // Return 0 if diff is 0; return NaN if diff is NaN
      } else {
        return diff;
      }
    }

    /**
     * @name differenceInYears
     * @category Year Helpers
     * @summary Get the number of full years between the given dates.
     *
     * @description
     * Get the number of full years between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of full years
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full years are between 31 December 2013 and 11 February 2015?
     * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))
     * //=> 1
     */
    function differenceInYears(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      var sign = compareAsc(dateLeft, dateRight);
      var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));

      // Set both dates to a valid leap year for accurate comparison when dealing
      // with leap days
      dateLeft.setFullYear(1584);
      dateRight.setFullYear(1584);

      // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full
      // If so, result must be decreased by 1 in absolute value
      var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;
      var result = sign * (difference - Number(isLastYearNotFull));
      // Prevent negative zero
      return result === 0 ? 0 : result;
    }

    /**
     * @name differenceInCalendarMonths
     * @category Month Helpers
     * @summary Get the number of calendar months between the given dates.
     *
     * @description
     * Get the number of calendar months between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of calendar months
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many calendar months are between 31 January 2014 and 1 September 2014?
     * const result = differenceInCalendarMonths(
     *   new Date(2014, 8, 1),
     *   new Date(2014, 0, 31)
     * )
     * //=> 8
     */
    function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
      var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
      return yearDiff * 12 + monthDiff;
    }

    /**
     * @name endOfDay
     * @category Day Helpers
     * @summary Return the end of a day for the given date.
     *
     * @description
     * Return the end of a day for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a day
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a day for 2 September 2014 11:55:00:
     * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 02 2014 23:59:59.999
     */
    function endOfDay(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      date.setHours(23, 59, 59, 999);
      return date;
    }

    /**
     * @name endOfMonth
     * @category Month Helpers
     * @summary Return the end of a month for the given date.
     *
     * @description
     * Return the end of a month for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a month for 2 September 2014 11:55:00:
     * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 30 2014 23:59:59.999
     */
    function endOfMonth(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var month = date.getMonth();
      date.setFullYear(date.getFullYear(), month + 1, 0);
      date.setHours(23, 59, 59, 999);
      return date;
    }

    /**
     * @name isLastDayOfMonth
     * @category Month Helpers
     * @summary Is the given date the last day of a month?
     *
     * @description
     * Is the given date the last day of a month?
     *
     * @param {Date|Number} date - the date to check
     * @returns {Boolean} the date is the last day of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Is 28 February 2014 the last day of a month?
     * const result = isLastDayOfMonth(new Date(2014, 1, 28))
     * //=> true
     */
    function isLastDayOfMonth(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      return endOfDay(date).getTime() === endOfMonth(date).getTime();
    }

    /**
     * @name differenceInMonths
     * @category Month Helpers
     * @summary Get the number of full months between the given dates.
     *
     * @description
     * Get the number of full months between the given dates using trunc as a default rounding method.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of full months
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full months are between 31 January 2014 and 1 September 2014?
     * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
     * //=> 7
     */
    function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      var sign = compareAsc(dateLeft, dateRight);
      var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
      var result;

      // Check for the difference of less than month
      if (difference < 1) {
        result = 0;
      } else {
        if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
          // This will check if the date is end of Feb and assign a higher end of month date
          // to compare it with Jan
          dateLeft.setDate(30);
        }
        dateLeft.setMonth(dateLeft.getMonth() - sign * difference);

        // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
        // If so, result must be decreased by 1 in absolute value
        var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;

        // Check for cases of one full calendar month
        if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
          isLastMonthNotFull = false;
        }
        result = sign * (difference - Number(isLastMonthNotFull));
      }

      // Prevent negative zero
      return result === 0 ? 0 : result;
    }

    var roundingMap = {
      ceil: Math.ceil,
      round: Math.round,
      floor: Math.floor,
      trunc: function trunc(value) {
        return value < 0 ? Math.ceil(value) : Math.floor(value);
      } // Math.trunc is not supported by IE
    };

    var defaultRoundingMethod = 'trunc';
    function getRoundingMethod(method) {
      return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
    }

    /**
     * @name differenceInQuarters
     * @category Quarter Helpers
     * @summary Get the number of quarters between the given dates.
     *
     * @description
     * Get the number of quarters between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of full quarters
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full quarters are between 31 December 2013 and 2 July 2014?
     * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))
     * //=> 2
     */
    function differenceInQuarters(dateLeft, dateRight, options) {
      requiredArgs(2, arguments);
      var diff = differenceInMonths(dateLeft, dateRight) / 3;
      return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
     * They usually appear for dates that denote time before the timezones were introduced
     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
     * and GMT+01:00:00 after that date)
     *
     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
     * which would lead to incorrect calculations.
     *
     * This function returns the timezone offset in milliseconds that takes seconds in account.
     */
    function getTimezoneOffsetInMilliseconds(date) {
      var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
      utcDate.setUTCFullYear(date.getFullYear());
      return date.getTime() - utcDate.getTime();
    }

    /**
     * @name startOfDay
     * @category Day Helpers
     * @summary Return the start of a day for the given date.
     *
     * @description
     * Return the start of a day for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a day
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a day for 2 September 2014 11:55:00:
     * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Tue Sep 02 2014 00:00:00
     */
    function startOfDay(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    var MILLISECONDS_IN_DAY$1 = 86400000;

    /**
     * @name differenceInCalendarDays
     * @category Day Helpers
     * @summary Get the number of calendar days between the given dates.
     *
     * @description
     * Get the number of calendar days between the given dates. This means that the times are removed
     * from the dates and then the difference in days is calculated.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of calendar days
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many calendar days are between
     * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
     * const result = differenceInCalendarDays(
     *   new Date(2012, 6, 2, 0, 0),
     *   new Date(2011, 6, 2, 23, 0)
     * )
     * //=> 366
     * // How many calendar days are between
     * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
     * const result = differenceInCalendarDays(
     *   new Date(2011, 6, 3, 0, 1),
     *   new Date(2011, 6, 2, 23, 59)
     * )
     * //=> 1
     */
    function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var startOfDayLeft = startOfDay(dirtyDateLeft);
      var startOfDayRight = startOfDay(dirtyDateRight);
      var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
      var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);

      // Round the number of days to the nearest integer
      // because the number of milliseconds in a day is not constant
      // (e.g. it's different in the day of the daylight saving time clock shift)
      return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY$1);
    }

    // for accurate equality comparisons of UTC timestamps that end up
    // having the same representation in local time, e.g. one hour before
    // DST ends vs. the instant that DST ends.
    function compareLocalAsc(dateLeft, dateRight) {
      var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
      if (diff < 0) {
        return -1;
      } else if (diff > 0) {
        return 1;
        // Return 0 if diff is 0; return NaN if diff is NaN
      } else {
        return diff;
      }
    }

    /**
     * @name differenceInDays
     * @category Day Helpers
     * @summary Get the number of full days between the given dates.
     *
     * @description
     * Get the number of full day periods between two dates. Fractional days are
     * truncated towards zero.
     *
     * One "full day" is the distance between a local time in one day to the same
     * local time on the next or previous day. A full day can sometimes be less than
     * or more than 24 hours if a daylight savings change happens between two dates.
     *
     * To ignore DST and only measure exact 24-hour periods, use this instead:
     * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.
     *
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of full days according to the local timezone
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full days are between
     * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
     * const result = differenceInDays(
     *   new Date(2012, 6, 2, 0, 0),
     *   new Date(2011, 6, 2, 23, 0)
     * )
     * //=> 365
     * // How many full days are between
     * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
     * const result = differenceInDays(
     *   new Date(2011, 6, 3, 0, 1),
     *   new Date(2011, 6, 2, 23, 59)
     * )
     * //=> 0
     * // How many full days are between
     * // 1 March 2020 0:00 and 1 June 2020 0:00 ?
     * // Note: because local time is used, the
     * // result will always be 92 days, even in
     * // time zones where DST starts and the
     * // period has only 92*24-1 hours.
     * const result = differenceInDays(
     *   new Date(2020, 5, 1),
     *   new Date(2020, 2, 1)
     * )
    //=> 92
     */
    function differenceInDays(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      var sign = compareLocalAsc(dateLeft, dateRight);
      var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
      dateLeft.setDate(dateLeft.getDate() - sign * difference);

      // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
      // If so, result must be decreased by 1 in absolute value
      var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);
      var result = sign * (difference - isLastDayNotFull);
      // Prevent negative zero
      return result === 0 ? 0 : result;
    }

    /**
     * @name differenceInWeeks
     * @category Week Helpers
     * @summary Get the number of full weeks between the given dates.
     *
     * @description
     * Get the number of full weeks between two dates. Fractional weeks are
     * truncated towards zero by default.
     *
     * One "full week" is the distance between a local time in one day to the same
     * local time 7 days earlier or later. A full week can sometimes be less than
     * or more than 7*24 hours if a daylight savings change happens between two dates.
     *
     * To ignore DST and only measure exact 7*24-hour periods, use this instead:
     * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.
     *
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of full weeks
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many full weeks are between 5 July 2014 and 20 July 2014?
     * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))
     * //=> 2
     *
     * // How many full weeks are between
     * // 1 March 2020 0:00 and 6 June 2020 0:00 ?
     * // Note: because local time is used, the
     * // result will always be 8 weeks (54 days),
     * // even if DST starts and the period has
     * // only 54*24-1 hours.
     * const result = differenceInWeeks(
     *   new Date(2020, 5, 1),
     *   new Date(2020, 2, 6)
     * )
     * //=> 8
     */
    function differenceInWeeks(dateLeft, dateRight, options) {
      requiredArgs(2, arguments);
      var diff = differenceInDays(dateLeft, dateRight) / 7;
      return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * Days in 1 week.
     *
     * @name daysInWeek
     * @constant
     * @type {number}
     * @default
     */

    /**
     * Milliseconds in 1 minute
     *
     * @name millisecondsInMinute
     * @constant
     * @type {number}
     * @default
     */
    var millisecondsInMinute = 60000;

    /**
     * Milliseconds in 1 hour
     *
     * @name millisecondsInHour
     * @constant
     * @type {number}
     * @default
     */
    var millisecondsInHour = 3600000;

    /**
     * Milliseconds in 1 second
     *
     * @name millisecondsInSecond
     * @constant
     * @type {number}
     * @default
     */
    var millisecondsInSecond = 1000;

    /**
     * @name differenceInMilliseconds
     * @category Millisecond Helpers
     * @summary Get the number of milliseconds between the given dates.
     *
     * @description
     * Get the number of milliseconds between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @returns {Number} the number of milliseconds
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many milliseconds are between
     * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
     * const result = differenceInMilliseconds(
     *   new Date(2014, 6, 2, 12, 30, 21, 700),
     *   new Date(2014, 6, 2, 12, 30, 20, 600)
     * )
     * //=> 1100
     */
    function differenceInMilliseconds(dateLeft, dateRight) {
      requiredArgs(2, arguments);
      return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
    }

    /**
     * @name differenceInHours
     * @category Hour Helpers
     * @summary Get the number of hours between the given dates.
     *
     * @description
     * Get the number of hours between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of hours
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
     * const result = differenceInHours(
     *   new Date(2014, 6, 2, 19, 0),
     *   new Date(2014, 6, 2, 6, 50)
     * )
     * //=> 12
     */
    function differenceInHours(dateLeft, dateRight, options) {
      requiredArgs(2, arguments);
      var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;
      return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * @name differenceInMinutes
     * @category Minute Helpers
     * @summary Get the number of minutes between the given dates.
     *
     * @description
     * Get the signed number of full (rounded towards 0) minutes between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of minutes
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
     * const result = differenceInMinutes(
     *   new Date(2014, 6, 2, 12, 20, 0),
     *   new Date(2014, 6, 2, 12, 7, 59)
     * )
     * //=> 12
     *
     * @example
     * // How many minutes are between 10:01:59 and 10:00:00
     * const result = differenceInMinutes(
     *   new Date(2000, 0, 1, 10, 0, 0),
     *   new Date(2000, 0, 1, 10, 1, 59)
     * )
     * //=> -1
     */
    function differenceInMinutes(dateLeft, dateRight, options) {
      requiredArgs(2, arguments);
      var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;
      return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * @name differenceInSeconds
     * @category Second Helpers
     * @summary Get the number of seconds between the given dates.
     *
     * @description
     * Get the number of seconds between the given dates.
     *
     * @param {Date|Number} dateLeft - the later date
     * @param {Date|Number} dateRight - the earlier date
     * @param {Object} [options] - an object with options.
     * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
     * @returns {Number} the number of seconds
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // How many seconds are between
     * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
     * const result = differenceInSeconds(
     *   new Date(2014, 6, 2, 12, 30, 20, 0),
     *   new Date(2014, 6, 2, 12, 30, 7, 999)
     * )
     * //=> 12
     */
    function differenceInSeconds(dateLeft, dateRight, options) {
      requiredArgs(2, arguments);
      var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;
      return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    /**
     * @name eachDayOfInterval
     * @category Interval Helpers
     * @summary Return the array of dates within the specified time interval.
     *
     * @description
     * Return the array of dates within the specified time interval.
     *
     * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}
     * @param {Object} [options] - an object with options.
     * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.
     * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.step` must be a number greater than 1
     * @throws {RangeError} The start of an interval cannot be after its end
     * @throws {RangeError} Date in interval cannot be `Invalid Date`
     *
     * @example
     * // Each day between 6 October 2014 and 10 October 2014:
     * const result = eachDayOfInterval({
     *   start: new Date(2014, 9, 6),
     *   end: new Date(2014, 9, 10)
     * })
     * //=> [
     * //   Mon Oct 06 2014 00:00:00,
     * //   Tue Oct 07 2014 00:00:00,
     * //   Wed Oct 08 2014 00:00:00,
     * //   Thu Oct 09 2014 00:00:00,
     * //   Fri Oct 10 2014 00:00:00
     * // ]
     */
    function eachDayOfInterval(dirtyInterval, options) {
      var _options$step;
      requiredArgs(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = toDate(interval.start);
      var endDate = toDate(interval.end);
      var endTime = endDate.getTime();

      // Throw an exception if start date is after end date or if any date is `Invalid Date`
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError('Invalid interval');
      }
      var dates = [];
      var currentDate = startDate;
      currentDate.setHours(0, 0, 0, 0);
      var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);
      if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');
      while (currentDate.getTime() <= endTime) {
        dates.push(toDate(currentDate));
        currentDate.setDate(currentDate.getDate() + step);
        currentDate.setHours(0, 0, 0, 0);
      }
      return dates;
    }

    var defaultOptions = {};
    function getDefaultOptions() {
      return defaultOptions;
    }

    /**
     * @name endOfWeek
     * @category Week Helpers
     * @summary Return the end of a week for the given date.
     *
     * @description
     * Return the end of a week for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @returns {Date} the end of a week
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     *
     * @example
     * // The end of a week for 2 September 2014 11:55:00:
     * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Sat Sep 06 2014 23:59:59.999
     *
     * @example
     * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
     * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
     * //=> Sun Sep 07 2014 23:59:59.999
     */
    function endOfWeek(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var defaultOptions = getDefaultOptions();
      var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      var date = toDate(dirtyDate);
      var day = date.getDay();
      var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
      date.setDate(date.getDate() + diff);
      date.setHours(23, 59, 59, 999);
      return date;
    }

    /**
     * @name endOfYear
     * @category Year Helpers
     * @summary Return the end of a year for the given date.
     *
     * @description
     * Return the end of a year for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the end of a year
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The end of a year for 2 September 2014 11:55:00:
     * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
     * //=> Wed Dec 31 2014 23:59:59.999
     */
    function endOfYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getFullYear();
      date.setFullYear(year + 1, 0, 0);
      date.setHours(23, 59, 59, 999);
      return date;
    }

    /**
     * @name isDate
     * @category Common Helpers
     * @summary Is the given value a date?
     *
     * @description
     * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
     *
     * @param {*} value - the value to check
     * @returns {boolean} true if the given value is a date
     * @throws {TypeError} 1 arguments required
     *
     * @example
     * // For a valid date:
     * const result = isDate(new Date())
     * //=> true
     *
     * @example
     * // For an invalid date:
     * const result = isDate(new Date(NaN))
     * //=> true
     *
     * @example
     * // For some value:
     * const result = isDate('2014-02-31')
     * //=> false
     *
     * @example
     * // For an object:
     * const result = isDate({})
     * //=> false
     */
    function isDate(value) {
      requiredArgs(1, arguments);
      return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
    }

    /**
     * @name isValid
     * @category Common Helpers
     * @summary Is the given date valid?
     *
     * @description
     * Returns false if argument is Invalid Date and true otherwise.
     * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
     * Invalid Date is a Date, whose time value is NaN.
     *
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * @param {*} date - the date to check
     * @returns {Boolean} the date is valid
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // For the valid date:
     * const result = isValid(new Date(2014, 1, 31))
     * //=> true
     *
     * @example
     * // For the value, convertable into a date:
     * const result = isValid(1393804800000)
     * //=> true
     *
     * @example
     * // For the invalid date:
     * const result = isValid(new Date(''))
     * //=> false
     */
    function isValid(dirtyDate) {
      requiredArgs(1, arguments);
      if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
        return false;
      }
      var date = toDate(dirtyDate);
      return !isNaN(Number(date));
    }

    /**
     * @name subMilliseconds
     * @category Millisecond Helpers
     * @summary Subtract the specified number of milliseconds from the given date.
     *
     * @description
     * Subtract the specified number of milliseconds from the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
     * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:29.250
     */
    function subMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, -amount);
    }

    var MILLISECONDS_IN_DAY = 86400000;
    function getUTCDayOfYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var timestamp = date.getTime();
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
      var startOfYearTimestamp = date.getTime();
      var difference = timestamp - startOfYearTimestamp;
      return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }

    function startOfUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var weekStartsOn = 1;
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    function getUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getUTCFullYear();
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = new Date(0);
      fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    function startOfUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var year = getUTCISOWeekYear(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setUTCFullYear(year, 0, 4);
      fourthOfJanuary.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCISOWeek(fourthOfJanuary);
      return date;
    }

    var MILLISECONDS_IN_WEEK$2 = 604800000;
    function getUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

      // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)
      return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1;
    }

    function startOfUTCWeek(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var defaultOptions = getDefaultOptions();
      var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    function getUTCWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getUTCFullYear();
      var defaultOptions = getDefaultOptions();
      var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

      // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }
      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    function startOfUTCWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var defaultOptions = getDefaultOptions();
      var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
      var year = getUTCWeekYear(dirtyDate, options);
      var firstWeek = new Date(0);
      firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCWeek(firstWeek, options);
      return date;
    }

    var MILLISECONDS_IN_WEEK$1 = 604800000;
    function getUTCWeek(dirtyDate, options) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

      // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)
      return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
    }

    function addLeadingZeros(number, targetLength) {
      var sign = number < 0 ? '-' : '';
      var output = Math.abs(number).toString();
      while (output.length < targetLength) {
        output = '0' + output;
      }
      return sign + output;
    }

    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* |                                |
     * |  d  | Day of month                   |  D  |                                |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  m  | Minute                         |  M  | Month                          |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  y  | Year (abs)                     |  Y  |                                |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     */
    var formatters$2 = {
      // Year
      y: function y(date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

        var signedYear = date.getUTCFullYear();
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
      },
      // Month
      M: function M(date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
      },
      // Day of the month
      d: function d(date, token) {
        return addLeadingZeros(date.getUTCDate(), token.length);
      },
      // AM or PM
      a: function a(date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
          case 'a':
          case 'aa':
            return dayPeriodEnumValue.toUpperCase();
          case 'aaa':
            return dayPeriodEnumValue;
          case 'aaaaa':
            return dayPeriodEnumValue[0];
          case 'aaaa':
          default:
            return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
      },
      // Hour [1-12]
      h: function h(date, token) {
        return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
      },
      // Hour [0-23]
      H: function H(date, token) {
        return addLeadingZeros(date.getUTCHours(), token.length);
      },
      // Minute
      m: function m(date, token) {
        return addLeadingZeros(date.getUTCMinutes(), token.length);
      },
      // Second
      s: function s(date, token) {
        return addLeadingZeros(date.getUTCSeconds(), token.length);
      },
      // Fraction of second
      S: function S(date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros(fractionalSeconds, token.length);
      }
    };
    var formatters$3 = formatters$2;

    var dayPeriodEnum = {
      am: 'am',
      pm: 'pm',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    };
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
     * |  p! | Long localized time            |  P! | Long localized date            |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     * - `P` is long localized date format
     * - `p` is long localized time format
     */

    var formatters = {
      // Era
      G: function G(date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;
        switch (token) {
          // AD, BC
          case 'G':
          case 'GG':
          case 'GGG':
            return localize.era(era, {
              width: 'abbreviated'
            });
          // A, B
          case 'GGGGG':
            return localize.era(era, {
              width: 'narrow'
            });
          // Anno Domini, Before Christ
          case 'GGGG':
          default:
            return localize.era(era, {
              width: 'wide'
            });
        }
      },
      // Year
      y: function y(date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
          var signedYear = date.getUTCFullYear();
          // Returns 1 for 1 BC (which is year 0 in JavaScript)
          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, {
            unit: 'year'
          });
        }
        return formatters$3.y(date, token);
      },
      // Local week-numbering year
      Y: function Y(date, token, localize, options) {
        var signedWeekYear = getUTCWeekYear(date, options);
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

        // Two digit year
        if (token === 'YY') {
          var twoDigitYear = weekYear % 100;
          return addLeadingZeros(twoDigitYear, 2);
        }

        // Ordinal number
        if (token === 'Yo') {
          return localize.ordinalNumber(weekYear, {
            unit: 'year'
          });
        }

        // Padding
        return addLeadingZeros(weekYear, token.length);
      },
      // ISO week-numbering year
      R: function R(date, token) {
        var isoWeekYear = getUTCISOWeekYear(date);

        // Padding
        return addLeadingZeros(isoWeekYear, token.length);
      },
      // Extended year. This is a single number designating the year of this calendar system.
      // The main difference between `y` and `u` localizers are B.C. years:
      // | Year | `y` | `u` |
      // |------|-----|-----|
      // | AC 1 |   1 |   1 |
      // | BC 1 |   1 |   0 |
      // | BC 2 |   2 |  -1 |
      // Also `yy` always returns the last two digits of a year,
      // while `uu` pads single digit years to 2 characters and returns other years unchanged.
      u: function u(date, token) {
        var year = date.getUTCFullYear();
        return addLeadingZeros(year, token.length);
      },
      // Quarter
      Q: function Q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          // 1, 2, 3, 4
          case 'Q':
            return String(quarter);
          // 01, 02, 03, 04
          case 'QQ':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th
          case 'Qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4
          case 'QQQ':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case 'QQQQQ':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'formatting'
            });
          // 1st quarter, 2nd quarter, ...
          case 'QQQQ':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone quarter
      q: function q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          // 1, 2, 3, 4
          case 'q':
            return String(quarter);
          // 01, 02, 03, 04
          case 'qq':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th
          case 'qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4
          case 'qqq':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case 'qqqqq':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'standalone'
            });
          // 1st quarter, 2nd quarter, ...
          case 'qqqq':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Month
      M: function M(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          case 'M':
          case 'MM':
            return formatters$3.M(date, token);
          // 1st, 2nd, ..., 12th
          case 'Mo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec
          case 'MMM':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // J, F, ..., D
          case 'MMMMM':
            return localize.month(month, {
              width: 'narrow',
              context: 'formatting'
            });
          // January, February, ..., December
          case 'MMMM':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone month
      L: function L(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          // 1, 2, ..., 12
          case 'L':
            return String(month + 1);
          // 01, 02, ..., 12
          case 'LL':
            return addLeadingZeros(month + 1, 2);
          // 1st, 2nd, ..., 12th
          case 'Lo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec
          case 'LLL':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // J, F, ..., D
          case 'LLLLL':
            return localize.month(month, {
              width: 'narrow',
              context: 'standalone'
            });
          // January, February, ..., December
          case 'LLLL':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Local week of year
      w: function w(date, token, localize, options) {
        var week = getUTCWeek(date, options);
        if (token === 'wo') {
          return localize.ordinalNumber(week, {
            unit: 'week'
          });
        }
        return addLeadingZeros(week, token.length);
      },
      // ISO week of year
      I: function I(date, token, localize) {
        var isoWeek = getUTCISOWeek(date);
        if (token === 'Io') {
          return localize.ordinalNumber(isoWeek, {
            unit: 'week'
          });
        }
        return addLeadingZeros(isoWeek, token.length);
      },
      // Day of the month
      d: function d(date, token, localize) {
        if (token === 'do') {
          return localize.ordinalNumber(date.getUTCDate(), {
            unit: 'date'
          });
        }
        return formatters$3.d(date, token);
      },
      // Day of year
      D: function D(date, token, localize) {
        var dayOfYear = getUTCDayOfYear(date);
        if (token === 'Do') {
          return localize.ordinalNumber(dayOfYear, {
            unit: 'dayOfYear'
          });
        }
        return addLeadingZeros(dayOfYear, token.length);
      },
      // Day of week
      E: function E(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        switch (token) {
          // Tue
          case 'E':
          case 'EE':
          case 'EEE':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T
          case 'EEEEE':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu
          case 'EEEEEE':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday
          case 'EEEE':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Local day of week
      e: function e(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          // Numerical value (Nth day of week with current locale or weekStartsOn)
          case 'e':
            return String(localDayOfWeek);
          // Padded numerical value
          case 'ee':
            return addLeadingZeros(localDayOfWeek, 2);
          // 1st, 2nd, ..., 7th
          case 'eo':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });
          case 'eee':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T
          case 'eeeee':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu
          case 'eeeeee':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday
          case 'eeee':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone local day of week
      c: function c(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          // Numerical value (same as in `e`)
          case 'c':
            return String(localDayOfWeek);
          // Padded numerical value
          case 'cc':
            return addLeadingZeros(localDayOfWeek, token.length);
          // 1st, 2nd, ..., 7th
          case 'co':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });
          case 'ccc':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // T
          case 'ccccc':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'standalone'
            });
          // Tu
          case 'cccccc':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'standalone'
            });
          // Tuesday
          case 'cccc':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // ISO day of week
      i: function i(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch (token) {
          // 2
          case 'i':
            return String(isoDayOfWeek);
          // 02
          case 'ii':
            return addLeadingZeros(isoDayOfWeek, token.length);
          // 2nd
          case 'io':
            return localize.ordinalNumber(isoDayOfWeek, {
              unit: 'day'
            });
          // Tue
          case 'iii':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T
          case 'iiiii':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu
          case 'iiiiii':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday
          case 'iiii':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM or PM
      a: function a(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
          case 'a':
          case 'aa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'aaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();
          case 'aaaaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'aaaa':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM, PM, midnight, noon
      b: function b(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        }
        switch (token) {
          case 'b':
          case 'bb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'bbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();
          case 'bbbbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'bbbb':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // in the morning, in the afternoon, in the evening, at night
      B: function B(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }
        switch (token) {
          case 'B':
          case 'BB':
          case 'BBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'BBBBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'BBBB':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Hour [1-12]
      h: function h(date, token, localize) {
        if (token === 'ho') {
          var hours = date.getUTCHours() % 12;
          if (hours === 0) hours = 12;
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }
        return formatters$3.h(date, token);
      },
      // Hour [0-23]
      H: function H(date, token, localize) {
        if (token === 'Ho') {
          return localize.ordinalNumber(date.getUTCHours(), {
            unit: 'hour'
          });
        }
        return formatters$3.H(date, token);
      },
      // Hour [0-11]
      K: function K(date, token, localize) {
        var hours = date.getUTCHours() % 12;
        if (token === 'Ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }
        return addLeadingZeros(hours, token.length);
      },
      // Hour [1-24]
      k: function k(date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0) hours = 24;
        if (token === 'ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }
        return addLeadingZeros(hours, token.length);
      },
      // Minute
      m: function m(date, token, localize) {
        if (token === 'mo') {
          return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: 'minute'
          });
        }
        return formatters$3.m(date, token);
      },
      // Second
      s: function s(date, token, localize) {
        if (token === 'so') {
          return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: 'second'
          });
        }
        return formatters$3.s(date, token);
      },
      // Fraction of second
      S: function S(date, token) {
        return formatters$3.S(date, token);
      },
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function X(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        if (timezoneOffset === 0) {
          return 'Z';
        }
        switch (token) {
          // Hours and optional minutes
          case 'X':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);

          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XX`
          case 'XXXX':
          case 'XX':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);

          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XXX`
          case 'XXXXX':
          case 'XXX': // Hours and minutes with `:` delimiter
          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function x(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Hours and optional minutes
          case 'x':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);

          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xx`
          case 'xxxx':
          case 'xx':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);

          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xxx`
          case 'xxxxx':
          case 'xxx': // Hours and minutes with `:` delimiter
          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (GMT)
      O: function O(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Short
          case 'O':
          case 'OO':
          case 'OOO':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long
          case 'OOOO':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (specific non-location)
      z: function z(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Short
          case 'z':
          case 'zz':
          case 'zzz':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long
          case 'zzzz':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Seconds timestamp
      t: function t(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return addLeadingZeros(timestamp, token.length);
      },
      // Milliseconds timestamp
      T: function T(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return addLeadingZeros(timestamp, token.length);
      }
    };
    function formatTimezoneShort(offset, dirtyDelimiter) {
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;
      if (minutes === 0) {
        return sign + String(hours);
      }
      var delimiter = dirtyDelimiter || '';
      return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
    }
    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
      }
      return formatTimezone(offset, dirtyDelimiter);
    }
    function formatTimezone(offset, dirtyDelimiter) {
      var delimiter = dirtyDelimiter || '';
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
      var minutes = addLeadingZeros(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }
    var formatters$1 = formatters;

    var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'P':
          return formatLong.date({
            width: 'short'
          });
        case 'PP':
          return formatLong.date({
            width: 'medium'
          });
        case 'PPP':
          return formatLong.date({
            width: 'long'
          });
        case 'PPPP':
        default:
          return formatLong.date({
            width: 'full'
          });
      }
    };
    var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'p':
          return formatLong.time({
            width: 'short'
          });
        case 'pp':
          return formatLong.time({
            width: 'medium'
          });
        case 'ppp':
          return formatLong.time({
            width: 'long'
          });
        case 'pppp':
        default:
          return formatLong.time({
            width: 'full'
          });
      }
    };
    var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/) || [];
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];
      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }
      var dateTimeFormat;
      switch (datePattern) {
        case 'P':
          dateTimeFormat = formatLong.dateTime({
            width: 'short'
          });
          break;
        case 'PP':
          dateTimeFormat = formatLong.dateTime({
            width: 'medium'
          });
          break;
        case 'PPP':
          dateTimeFormat = formatLong.dateTime({
            width: 'long'
          });
          break;
        case 'PPPP':
        default:
          dateTimeFormat = formatLong.dateTime({
            width: 'full'
          });
          break;
      }
      return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    };
    var longFormatters$1 = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };
    var longFormatters$2 = longFormatters$1;

    var protectedDayOfYearTokens = ['D', 'DD'];
    var protectedWeekYearTokens = ['YY', 'YYYY'];
    function isProtectedDayOfYearToken(token) {
      return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
      return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format, input) {
      if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      }
    }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    };
    var formatDistance = function formatDistance(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === 'string') {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace('{{count}}', count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return 'in ' + result;
        } else {
          return result + ' ago';
        }
      }
      return result;
    };
    var formatDistance$1 = formatDistance;

    function buildFormatLongFn(args) {
      return function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // TODO: Remove String()
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
      };
    }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var formatLong$1 = formatLong;

    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: 'P'
    };
    var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    };
    var formatRelative$1 = formatRelative;

    function buildLocalizeFn(args) {
      return function (dirtyIndex, options) {
        var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
        var valuesArray;
        if (context === 'formatting' && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;
          var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }
        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
        return valuesArray[index];
      };
    }

    var eraValues = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
    };

    // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      }
    };
    var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
      var number = Number(dirtyNumber);

      // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`.
      //
      // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'.

      var rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'st';
          case 2:
            return number + 'nd';
          case 3:
            return number + 'rd';
        }
      }
      return number + 'th';
    };
    var localize = {
      ordinalNumber: ordinalNumber,
      era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function argumentCallback(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var localize$1 = localize;

    function buildMatchFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);
        if (!matchResult) {
          return null;
        }
        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        }) : findKey(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        });
        var value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }
    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }
      return undefined;
    }
    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }
      return undefined;
    }

    function buildMatchPatternFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult) return null;
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult) return null;
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function valueCallback(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function valueCallback(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var match$1 = match;

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */
    var locale = {
      code: 'en-US',
      formatDistance: formatDistance$1,
      formatLong: formatLong$1,
      formatRelative: formatRelative$1,
      localize: localize$1,
      match: match$1,
      options: {
        weekStartsOn: 0 /* Sunday */,
        firstWeekContainsDate: 1
      }
    };
    var defaultLocale = locale;

    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps
    var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

    // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
    var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp$1 = /^'([^]*?)'?$/;
    var doubleQuoteRegExp$1 = /''/g;
    var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;

    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | AM, PM                          | a..aa   | AM, PM                            |       |
     * |                                 | aaa     | am, pm                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
     * |                                 | bbb     | am, pm, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 001, ..., 999                |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
     * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 04/29/1453                        | 7     |
     * |                                 | PP      | Apr 29, 1453                      | 7     |
     * |                                 | PPP     | April 29th, 1453                  | 7     |
     * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
     * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are currently unavailable in `date-fns`,
     *    so right now these tokens fall back to GMT timezones.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * @param {Date|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/locale/eo'
     * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */

    function format(dirtyDate, dirtyFormatStr, options) {
      var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
      requiredArgs(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var defaultOptions = getDefaultOptions();
      var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
      var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

      // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }
      var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      if (!locale.localize) {
        throw new RangeError('locale must contain localize property');
      }
      if (!locale.formatLong) {
        throw new RangeError('locale must contain formatLong property');
      }
      var originalDate = toDate(dirtyDate);
      if (!isValid(originalDate)) {
        throw new RangeError('Invalid time value');
      }

      // Convert the date in system timezone to the same date in UTC+00:00 timezone.
      // This ensures that when UTC functions will be implemented, locales will be compatible with them.
      // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
      var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
      var utcDate = subMilliseconds(originalDate, timezoneOffset);
      var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale,
        _originalDate: originalDate
      };
      var result = formatStr.match(longFormattingTokensRegExp$1).map(function (substring) {
        var firstCharacter = substring[0];
        if (firstCharacter === 'p' || firstCharacter === 'P') {
          var longFormatter = longFormatters$2[firstCharacter];
          return longFormatter(substring, locale.formatLong);
        }
        return substring;
      }).join('').match(formattingTokensRegExp$1).map(function (substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
          return "'";
        }
        var firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return cleanEscapedString$1(substring);
        }
        var formatter = formatters$1[firstCharacter];
        if (formatter) {
          if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
          }
          if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
          }
          return formatter(utcDate, substring, locale.localize, formatterOptions);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }
        return substring;
      }).join('');
      return result;
    }
    function cleanEscapedString$1(input) {
      var matched = input.match(escapedStringRegExp$1);
      if (!matched) {
        return input;
      }
      return matched[1].replace(doubleQuoteRegExp$1, "'");
    }

    /**
     * @name getDate
     * @category Day Helpers
     * @summary Get the day of the month of the given date.
     *
     * @description
     * Get the day of the month of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the day of month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Which day of the month is 29 February 2012?
     * const result = getDate(new Date(2012, 1, 29))
     * //=> 29
     */
    function getDate(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var dayOfMonth = date.getDate();
      return dayOfMonth;
    }

    /**
     * @name getDaysInMonth
     * @category Month Helpers
     * @summary Get the number of days in a month of the given date.
     *
     * @description
     * Get the number of days in a month of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the number of days in a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // How many days are in February 2000?
     * const result = getDaysInMonth(new Date(2000, 1))
     * //=> 29
     */
    function getDaysInMonth(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getFullYear();
      var monthIndex = date.getMonth();
      var lastDayOfMonth = new Date(0);
      lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
      lastDayOfMonth.setHours(0, 0, 0, 0);
      return lastDayOfMonth.getDate();
    }

    /**
     * @name getHours
     * @category Hour Helpers
     * @summary Get the hours of the given date.
     *
     * @description
     * Get the hours of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the hours
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Get the hours of 29 February 2012 11:45:00:
     * const result = getHours(new Date(2012, 1, 29, 11, 45))
     * //=> 11
     */
    function getHours(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var hours = date.getHours();
      return hours;
    }

    /**
     * @name getMinutes
     * @category Minute Helpers
     * @summary Get the minutes of the given date.
     *
     * @description
     * Get the minutes of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the minutes
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Get the minutes of 29 February 2012 11:45:05:
     * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
     * //=> 45
     */
    function getMinutes(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var minutes = date.getMinutes();
      return minutes;
    }

    /**
     * @name getMonth
     * @category Month Helpers
     * @summary Get the month of the given date.
     *
     * @description
     * Get the month of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Which month is 29 February 2012?
     * const result = getMonth(new Date(2012, 1, 29))
     * //=> 1
     */
    function getMonth(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var month = date.getMonth();
      return month;
    }

    /**
     * @name getSeconds
     * @category Second Helpers
     * @summary Get the seconds of the given date.
     *
     * @description
     * Get the seconds of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the seconds
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Get the seconds of 29 February 2012 11:45:05.123:
     * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
     * //=> 5
     */
    function getSeconds(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var seconds = date.getSeconds();
      return seconds;
    }

    /**
     * @name getMilliseconds
     * @category Millisecond Helpers
     * @summary Get the milliseconds of the given date.
     *
     * @description
     * Get the milliseconds of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the milliseconds
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Get the milliseconds of 29 February 2012 11:45:05.123:
     * const result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))
     * //=> 123
     */
    function getMilliseconds(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var milliseconds = date.getMilliseconds();
      return milliseconds;
    }

    /**
     * @name startOfWeek
     * @category Week Helpers
     * @summary Return the start of a week for the given date.
     *
     * @description
     * Return the start of a week for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @returns {Date} the start of a week
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     *
     * @example
     * // The start of a week for 2 September 2014 11:55:00:
     * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Sun Aug 31 2014 00:00:00
     *
     * @example
     * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
     * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
     * //=> Mon Sep 01 2014 00:00:00
     */
    function startOfWeek(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var defaultOptions = getDefaultOptions();
      var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      var date = toDate(dirtyDate);
      var day = date.getDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setDate(date.getDate() - diff);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    /**
     * @name getWeekYear
     * @category Week-Numbering Year Helpers
     * @summary Get the local week-numbering year of the given date.
     *
     * @description
     * Get the local week-numbering year of the given date.
     * The exact calculation depends on the values of
     * `options.weekStartsOn` (which is the index of the first day of the week)
     * and `options.firstWeekContainsDate` (which is the day of January, which is always in
     * the first week of the week-numbering year)
     *
     * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
     *
     * @param {Date|Number} date - the given date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
     * @returns {Number} the local week-numbering year
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     *
     * @example
     * // Which week numbering year is 26 December 2004 with the default settings?
     * const result = getWeekYear(new Date(2004, 11, 26))
     * //=> 2005
     *
     * @example
     * // Which week numbering year is 26 December 2004 if week starts on Saturday?
     * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
     * //=> 2004
     *
     * @example
     * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
     * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
     * //=> 2004
     */
    function getWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getFullYear();
      var defaultOptions = getDefaultOptions();
      var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

      // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }
      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setHours(0, 0, 0, 0);
      var startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setHours(0, 0, 0, 0);
      var startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    /**
     * @name startOfWeekYear
     * @category Week-Numbering Year Helpers
     * @summary Return the start of a local week-numbering year for the given date.
     *
     * @description
     * Return the start of a local week-numbering year.
     * The exact calculation depends on the values of
     * `options.weekStartsOn` (which is the index of the first day of the week)
     * and `options.firstWeekContainsDate` (which is the day of January, which is always in
     * the first week of the week-numbering year)
     *
     * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
     *
     * @param {Date|Number} date - the original date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
     * @returns {Date} the start of a week-numbering year
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     *
     * @example
     * // The start of an a week-numbering year for 2 July 2005 with default settings:
     * const result = startOfWeekYear(new Date(2005, 6, 2))
     * //=> Sun Dec 26 2004 00:00:00
     *
     * @example
     * // The start of a week-numbering year for 2 July 2005
     * // if Monday is the first day of week
     * // and 4 January is always in the first week of the year:
     * const result = startOfWeekYear(new Date(2005, 6, 2), {
     *   weekStartsOn: 1,
     *   firstWeekContainsDate: 4
     * })
     * //=> Mon Jan 03 2005 00:00:00
     */
    function startOfWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var defaultOptions = getDefaultOptions();
      var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
      var year = getWeekYear(dirtyDate, options);
      var firstWeek = new Date(0);
      firstWeek.setFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setHours(0, 0, 0, 0);
      var date = startOfWeek(firstWeek, options);
      return date;
    }

    var MILLISECONDS_IN_WEEK = 604800000;

    /**
     * @name getWeek
     * @category Week Helpers
     * @summary Get the local week index of the given date.
     *
     * @description
     * Get the local week index of the given date.
     * The exact calculation depends on the values of
     * `options.weekStartsOn` (which is the index of the first day of the week)
     * and `options.firstWeekContainsDate` (which is the day of January, which is always in
     * the first week of the week-numbering year)
     *
     * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
     *
     * @param {Date|Number} date - the given date
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
     * @returns {Number} the week
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     *
     * @example
     * // Which week of the local week numbering year is 2 January 2005 with default options?
     * const result = getWeek(new Date(2005, 0, 2))
     * //=> 2
     *
     * // Which week of the local week numbering year is 2 January 2005,
     * // if Monday is the first day of the week,
     * // and the first week of the year always contains 4 January?
     * const result = getWeek(new Date(2005, 0, 2), {
     *   weekStartsOn: 1,
     *   firstWeekContainsDate: 4
     * })
     * //=> 53
     */

    function getWeek(dirtyDate, options) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime();

      // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }

    /**
     * @name getYear
     * @category Year Helpers
     * @summary Get the year of the given date.
     *
     * @description
     * Get the year of the given date.
     *
     * @param {Date|Number} date - the given date
     * @returns {Number} the year
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Which year is 2 July 2014?
     * const result = getYear(new Date(2014, 6, 2))
     * //=> 2014
     */
    function getYear(dirtyDate) {
      requiredArgs(1, arguments);
      return toDate(dirtyDate).getFullYear();
    }

    /**
     * @name isAfter
     * @category Common Helpers
     * @summary Is the first date after the second one?
     *
     * @description
     * Is the first date after the second one?
     *
     * @param {Date|Number} date - the date that should be after the other one to return true
     * @param {Date|Number} dateToCompare - the date to compare with
     * @returns {Boolean} the first date is after the second date
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Is 10 July 1989 after 11 February 1987?
     * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
     * //=> true
     */
    function isAfter(dirtyDate, dirtyDateToCompare) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var dateToCompare = toDate(dirtyDateToCompare);
      return date.getTime() > dateToCompare.getTime();
    }

    /**
     * @name isBefore
     * @category Common Helpers
     * @summary Is the first date before the second one?
     *
     * @description
     * Is the first date before the second one?
     *
     * @param {Date|Number} date - the date that should be before the other one to return true
     * @param {Date|Number} dateToCompare - the date to compare with
     * @returns {Boolean} the first date is before the second date
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Is 10 July 1989 before 11 February 1987?
     * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
     * //=> false
     */
    function isBefore(dirtyDate, dirtyDateToCompare) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var dateToCompare = toDate(dirtyDateToCompare);
      return date.getTime() < dateToCompare.getTime();
    }

    /**
     * @name isEqual
     * @category Common Helpers
     * @summary Are the given dates equal?
     *
     * @description
     * Are the given dates equal?
     *
     * @param {Date|Number} dateLeft - the first date to compare
     * @param {Date|Number} dateRight - the second date to compare
     * @returns {Boolean} the dates are equal
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
     * const result = isEqual(
     *   new Date(2014, 6, 2, 6, 30, 45, 0),
     *   new Date(2014, 6, 2, 6, 30, 45, 500)
     * )
     * //=> false
     */
    function isEqual(dirtyLeftDate, dirtyRightDate) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyLeftDate);
      var dateRight = toDate(dirtyRightDate);
      return dateLeft.getTime() === dateRight.getTime();
    }

    /**
     * @name isSameDay
     * @category Day Helpers
     * @summary Are the given dates in the same day (and year and month)?
     *
     * @description
     * Are the given dates in the same day (and year and month)?
     *
     * @param {Date|Number} dateLeft - the first date to check
     * @param {Date|Number} dateRight - the second date to check
     * @returns {Boolean} the dates are in the same day (and year and month)
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
     * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
     * //=> true
     *
     * @example
     * // Are 4 September and 4 October in the same day?
     * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
     * //=> false
     *
     * @example
     * // Are 4 September, 2014 and 4 September, 2015 in the same day?
     * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
     * //=> false
     */
    function isSameDay(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
      var dateRightStartOfDay = startOfDay(dirtyDateRight);
      return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
    }

    /**
     * @name isSameYear
     * @category Year Helpers
     * @summary Are the given dates in the same year?
     *
     * @description
     * Are the given dates in the same year?
     *
     * @param {Date|Number} dateLeft - the first date to check
     * @param {Date|Number} dateRight - the second date to check
     * @returns {Boolean} the dates are in the same year
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Are 2 September 2014 and 25 September 2014 in the same year?
     * const result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))
     * //=> true
     */
    function isSameYear(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      return dateLeft.getFullYear() === dateRight.getFullYear();
    }

    /**
     * @name isSameMonth
     * @category Month Helpers
     * @summary Are the given dates in the same month (and year)?
     *
     * @description
     * Are the given dates in the same month (and year)?
     *
     * @param {Date|Number} dateLeft - the first date to check
     * @param {Date|Number} dateRight - the second date to check
     * @returns {Boolean} the dates are in the same month (and year)
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Are 2 September 2014 and 25 September 2014 in the same month?
     * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
     * //=> true
     *
     * @example
     * // Are 2 September 2014 and 25 September 2015 in the same month?
     * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
     * //=> false
     */
    function isSameMonth(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeft = toDate(dirtyDateLeft);
      var dateRight = toDate(dirtyDateRight);
      return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
    }

    /**
     * @name startOfHour
     * @category Hour Helpers
     * @summary Return the start of an hour for the given date.
     *
     * @description
     * Return the start of an hour for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of an hour
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of an hour for 2 September 2014 11:55:00:
     * const result = startOfHour(new Date(2014, 8, 2, 11, 55))
     * //=> Tue Sep 02 2014 11:00:00
     */
    function startOfHour(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      date.setMinutes(0, 0, 0);
      return date;
    }

    /**
     * @name isSameHour
     * @category Hour Helpers
     * @summary Are the given dates in the same hour (and same day)?
     *
     * @description
     * Are the given dates in the same hour (and same day)?
     *
     * @param {Date|Number} dateLeft - the first date to check
     * @param {Date|Number} dateRight - the second date to check
     * @returns {Boolean} the dates are in the same hour (and same day)
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?
     * const result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 6, 30))
     * //=> true
     *
     * @example
     * // Are 4 September 2014 06:00:00 and 5 September 06:00:00 in the same hour?
     * const result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 5, 6, 0))
     * //=> false
     */
    function isSameHour(dirtyDateLeft, dirtyDateRight) {
      requiredArgs(2, arguments);
      var dateLeftStartOfHour = startOfHour(dirtyDateLeft);
      var dateRightStartOfHour = startOfHour(dirtyDateRight);
      return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F() {};
          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true,
        didErr = false,
        err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it["return"] != null) it["return"]();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function assign(target, object) {
      if (target == null) {
        throw new TypeError('assign requires that input parameter not be null or undefined');
      }
      for (var property in object) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
          target[property] = object[property];
        }
      }
      return target;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }

    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }

    var TIMEZONE_UNIT_PRIORITY = 10;
    var Setter = /*#__PURE__*/function () {
      function Setter() {
        _classCallCheck(this, Setter);
        _defineProperty(this, "priority", void 0);
        _defineProperty(this, "subPriority", 0);
      }
      _createClass(Setter, [{
        key: "validate",
        value: function validate(_utcDate, _options) {
          return true;
        }
      }]);
      return Setter;
    }();
    var ValueSetter = /*#__PURE__*/function (_Setter) {
      _inherits(ValueSetter, _Setter);
      var _super = _createSuper(ValueSetter);
      function ValueSetter(value, validateValue, setValue, priority, subPriority) {
        var _this;
        _classCallCheck(this, ValueSetter);
        _this = _super.call(this);
        _this.value = value;
        _this.validateValue = validateValue;
        _this.setValue = setValue;
        _this.priority = priority;
        if (subPriority) {
          _this.subPriority = subPriority;
        }
        return _this;
      }
      _createClass(ValueSetter, [{
        key: "validate",
        value: function validate(utcDate, options) {
          return this.validateValue(utcDate, this.value, options);
        }
      }, {
        key: "set",
        value: function set(utcDate, flags, options) {
          return this.setValue(utcDate, flags, this.value, options);
        }
      }]);
      return ValueSetter;
    }(Setter);
    var DateToSystemTimezoneSetter = /*#__PURE__*/function (_Setter2) {
      _inherits(DateToSystemTimezoneSetter, _Setter2);
      var _super2 = _createSuper(DateToSystemTimezoneSetter);
      function DateToSystemTimezoneSetter() {
        var _this2;
        _classCallCheck(this, DateToSystemTimezoneSetter);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2 = _super2.call.apply(_super2, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
        _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
        return _this2;
      }
      _createClass(DateToSystemTimezoneSetter, [{
        key: "set",
        value: function set(date, flags) {
          if (flags.timestampIsSet) {
            return date;
          }
          var convertedDate = new Date(0);
          convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
          convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
          return convertedDate;
        }
      }]);
      return DateToSystemTimezoneSetter;
    }(Setter);

    var Parser = /*#__PURE__*/function () {
      function Parser() {
        _classCallCheck(this, Parser);
        _defineProperty(this, "incompatibleTokens", void 0);
        _defineProperty(this, "priority", void 0);
        _defineProperty(this, "subPriority", void 0);
      }
      _createClass(Parser, [{
        key: "run",
        value: function run(dateString, token, match, options) {
          var result = this.parse(dateString, token, match, options);
          if (!result) {
            return null;
          }
          return {
            setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
            rest: result.rest
          };
        }
      }, {
        key: "validate",
        value: function validate(_utcDate, _value, _options) {
          return true;
        }
      }]);
      return Parser;
    }();

    var EraParser = /*#__PURE__*/function (_Parser) {
      _inherits(EraParser, _Parser);
      var _super = _createSuper(EraParser);
      function EraParser() {
        var _this;
        _classCallCheck(this, EraParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 140);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
        return _this;
      }
      _createClass(EraParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            // AD, BC
            case 'G':
            case 'GG':
            case 'GGG':
              return match.era(dateString, {
                width: 'abbreviated'
              }) || match.era(dateString, {
                width: 'narrow'
              });
            // A, B
            case 'GGGGG':
              return match.era(dateString, {
                width: 'narrow'
              });
            // Anno Domini, Before Christ
            case 'GGGG':
            default:
              return match.era(dateString, {
                width: 'wide'
              }) || match.era(dateString, {
                width: 'abbreviated'
              }) || match.era(dateString, {
                width: 'narrow'
              });
          }
        }
      }, {
        key: "set",
        value: function set(date, flags, value) {
          flags.era = value;
          date.setUTCFullYear(value, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return EraParser;
    }(Parser);

    var numericPatterns = {
      month: /^(1[0-2]|0?\d)/,
      // 0 to 12
      date: /^(3[0-1]|[0-2]?\d)/,
      // 0 to 31
      dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
      // 0 to 366
      week: /^(5[0-3]|[0-4]?\d)/,
      // 0 to 53
      hour23h: /^(2[0-3]|[0-1]?\d)/,
      // 0 to 23
      hour24h: /^(2[0-4]|[0-1]?\d)/,
      // 0 to 24
      hour11h: /^(1[0-1]|0?\d)/,
      // 0 to 11
      hour12h: /^(1[0-2]|0?\d)/,
      // 0 to 12
      minute: /^[0-5]?\d/,
      // 0 to 59
      second: /^[0-5]?\d/,
      // 0 to 59

      singleDigit: /^\d/,
      // 0 to 9
      twoDigits: /^\d{1,2}/,
      // 0 to 99
      threeDigits: /^\d{1,3}/,
      // 0 to 999
      fourDigits: /^\d{1,4}/,
      // 0 to 9999

      anyDigitsSigned: /^-?\d+/,
      singleDigitSigned: /^-?\d/,
      // 0 to 9, -0 to -9
      twoDigitsSigned: /^-?\d{1,2}/,
      // 0 to 99, -0 to -99
      threeDigitsSigned: /^-?\d{1,3}/,
      // 0 to 999, -0 to -999
      fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
    };

    var timezonePatterns = {
      basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
      basic: /^([+-])(\d{2})(\d{2})|Z/,
      basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
      extended: /^([+-])(\d{2}):(\d{2})|Z/,
      extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
    };

    function mapValue(parseFnResult, mapFn) {
      if (!parseFnResult) {
        return parseFnResult;
      }
      return {
        value: mapFn(parseFnResult.value),
        rest: parseFnResult.rest
      };
    }
    function parseNumericPattern(pattern, dateString) {
      var matchResult = dateString.match(pattern);
      if (!matchResult) {
        return null;
      }
      return {
        value: parseInt(matchResult[0], 10),
        rest: dateString.slice(matchResult[0].length)
      };
    }
    function parseTimezonePattern(pattern, dateString) {
      var matchResult = dateString.match(pattern);
      if (!matchResult) {
        return null;
      }

      // Input is 'Z'
      if (matchResult[0] === 'Z') {
        return {
          value: 0,
          rest: dateString.slice(1)
        };
      }
      var sign = matchResult[1] === '+' ? 1 : -1;
      var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
      var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
      var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
      return {
        value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
        rest: dateString.slice(matchResult[0].length)
      };
    }
    function parseAnyDigitsSigned(dateString) {
      return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
    }
    function parseNDigits(n, dateString) {
      switch (n) {
        case 1:
          return parseNumericPattern(numericPatterns.singleDigit, dateString);
        case 2:
          return parseNumericPattern(numericPatterns.twoDigits, dateString);
        case 3:
          return parseNumericPattern(numericPatterns.threeDigits, dateString);
        case 4:
          return parseNumericPattern(numericPatterns.fourDigits, dateString);
        default:
          return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
      }
    }
    function parseNDigitsSigned(n, dateString) {
      switch (n) {
        case 1:
          return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
        case 2:
          return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
        case 3:
          return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
        case 4:
          return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
        default:
          return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
      }
    }
    function dayPeriodEnumToHours(dayPeriod) {
      switch (dayPeriod) {
        case 'morning':
          return 4;
        case 'evening':
          return 17;
        case 'pm':
        case 'noon':
        case 'afternoon':
          return 12;
        case 'am':
        case 'midnight':
        case 'night':
        default:
          return 0;
      }
    }
    function normalizeTwoDigitYear(twoDigitYear, currentYear) {
      var isCommonEra = currentYear > 0;
      // Absolute number of the current year:
      // 1 -> 1 AC
      // 0 -> 1 BC
      // -1 -> 2 BC
      var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
      var result;
      if (absCurrentYear <= 50) {
        result = twoDigitYear || 100;
      } else {
        var rangeEnd = absCurrentYear + 50;
        var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
        var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
        result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
      }
      return isCommonEra ? result : 1 - result;
    }
    function isLeapYearIndex$1(year) {
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }

    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    var YearParser = /*#__PURE__*/function (_Parser) {
      _inherits(YearParser, _Parser);
      var _super = _createSuper(YearParser);
      function YearParser() {
        var _this;
        _classCallCheck(this, YearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 130);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(YearParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          var valueCallback = function valueCallback(year) {
            return {
              year: year,
              isTwoDigitYear: token === 'yy'
            };
          };
          switch (token) {
            case 'y':
              return mapValue(parseNDigits(4, dateString), valueCallback);
            case 'yo':
              return mapValue(match.ordinalNumber(dateString, {
                unit: 'year'
              }), valueCallback);
            default:
              return mapValue(parseNDigits(token.length, dateString), valueCallback);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value.isTwoDigitYear || value.year > 0;
        }
      }, {
        key: "set",
        value: function set(date, flags, value) {
          var currentYear = date.getUTCFullYear();
          if (value.isTwoDigitYear) {
            var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
            date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
          }
          var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
          date.setUTCFullYear(year, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return YearParser;
    }(Parser);

    // Local week-numbering year
    var LocalWeekYearParser = /*#__PURE__*/function (_Parser) {
      _inherits(LocalWeekYearParser, _Parser);
      var _super = _createSuper(LocalWeekYearParser);
      function LocalWeekYearParser() {
        var _this;
        _classCallCheck(this, LocalWeekYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 130);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
        return _this;
      }
      _createClass(LocalWeekYearParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          var valueCallback = function valueCallback(year) {
            return {
              year: year,
              isTwoDigitYear: token === 'YY'
            };
          };
          switch (token) {
            case 'Y':
              return mapValue(parseNDigits(4, dateString), valueCallback);
            case 'Yo':
              return mapValue(match.ordinalNumber(dateString, {
                unit: 'year'
              }), valueCallback);
            default:
              return mapValue(parseNDigits(token.length, dateString), valueCallback);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value.isTwoDigitYear || value.year > 0;
        }
      }, {
        key: "set",
        value: function set(date, flags, value, options) {
          var currentYear = getUTCWeekYear(date, options);
          if (value.isTwoDigitYear) {
            var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
            date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
            date.setUTCHours(0, 0, 0, 0);
            return startOfUTCWeek(date, options);
          }
          var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
          date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
          date.setUTCHours(0, 0, 0, 0);
          return startOfUTCWeek(date, options);
        }
      }]);
      return LocalWeekYearParser;
    }(Parser);

    var ISOWeekYearParser = /*#__PURE__*/function (_Parser) {
      _inherits(ISOWeekYearParser, _Parser);
      var _super = _createSuper(ISOWeekYearParser);
      function ISOWeekYearParser() {
        var _this;
        _classCallCheck(this, ISOWeekYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 130);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(ISOWeekYearParser, [{
        key: "parse",
        value: function parse(dateString, token) {
          if (token === 'R') {
            return parseNDigitsSigned(4, dateString);
          }
          return parseNDigitsSigned(token.length, dateString);
        }
      }, {
        key: "set",
        value: function set(_date, _flags, value) {
          var firstWeekOfYear = new Date(0);
          firstWeekOfYear.setUTCFullYear(value, 0, 4);
          firstWeekOfYear.setUTCHours(0, 0, 0, 0);
          return startOfUTCISOWeek(firstWeekOfYear);
        }
      }]);
      return ISOWeekYearParser;
    }(Parser);

    var ExtendedYearParser = /*#__PURE__*/function (_Parser) {
      _inherits(ExtendedYearParser, _Parser);
      var _super = _createSuper(ExtendedYearParser);
      function ExtendedYearParser() {
        var _this;
        _classCallCheck(this, ExtendedYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 130);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(ExtendedYearParser, [{
        key: "parse",
        value: function parse(dateString, token) {
          if (token === 'u') {
            return parseNDigitsSigned(4, dateString);
          }
          return parseNDigitsSigned(token.length, dateString);
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCFullYear(value, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return ExtendedYearParser;
    }(Parser);

    var QuarterParser = /*#__PURE__*/function (_Parser) {
      _inherits(QuarterParser, _Parser);
      var _super = _createSuper(QuarterParser);
      function QuarterParser() {
        var _this;
        _classCallCheck(this, QuarterParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 120);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(QuarterParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            // 1, 2, 3, 4
            case 'Q':
            case 'QQ':
              // 01, 02, 03, 04
              return parseNDigits(token.length, dateString);
            // 1st, 2nd, 3rd, 4th
            case 'Qo':
              return match.ordinalNumber(dateString, {
                unit: 'quarter'
              });
            // Q1, Q2, Q3, Q4
            case 'QQQ':
              return match.quarter(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.quarter(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case 'QQQQQ':
              return match.quarter(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // 1st quarter, 2nd quarter, ...
            case 'QQQQ':
            default:
              return match.quarter(dateString, {
                width: 'wide',
                context: 'formatting'
              }) || match.quarter(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.quarter(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 1 && value <= 4;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth((value - 1) * 3, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return QuarterParser;
    }(Parser);

    var StandAloneQuarterParser = /*#__PURE__*/function (_Parser) {
      _inherits(StandAloneQuarterParser, _Parser);
      var _super = _createSuper(StandAloneQuarterParser);
      function StandAloneQuarterParser() {
        var _this;
        _classCallCheck(this, StandAloneQuarterParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 120);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(StandAloneQuarterParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            // 1, 2, 3, 4
            case 'q':
            case 'qq':
              // 01, 02, 03, 04
              return parseNDigits(token.length, dateString);
            // 1st, 2nd, 3rd, 4th
            case 'qo':
              return match.ordinalNumber(dateString, {
                unit: 'quarter'
              });
            // Q1, Q2, Q3, Q4
            case 'qqq':
              return match.quarter(dateString, {
                width: 'abbreviated',
                context: 'standalone'
              }) || match.quarter(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case 'qqqqq':
              return match.quarter(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
            // 1st quarter, 2nd quarter, ...
            case 'qqqq':
            default:
              return match.quarter(dateString, {
                width: 'wide',
                context: 'standalone'
              }) || match.quarter(dateString, {
                width: 'abbreviated',
                context: 'standalone'
              }) || match.quarter(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 1 && value <= 4;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth((value - 1) * 3, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return StandAloneQuarterParser;
    }(Parser);

    var MonthParser = /*#__PURE__*/function (_Parser) {
      _inherits(MonthParser, _Parser);
      var _super = _createSuper(MonthParser);
      function MonthParser() {
        var _this;
        _classCallCheck(this, MonthParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
        _defineProperty(_assertThisInitialized(_this), "priority", 110);
        return _this;
      }
      _createClass(MonthParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          var valueCallback = function valueCallback(value) {
            return value - 1;
          };
          switch (token) {
            // 1, 2, ..., 12
            case 'M':
              return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
            // 01, 02, ..., 12
            case 'MM':
              return mapValue(parseNDigits(2, dateString), valueCallback);
            // 1st, 2nd, ..., 12th
            case 'Mo':
              return mapValue(match.ordinalNumber(dateString, {
                unit: 'month'
              }), valueCallback);
            // Jan, Feb, ..., Dec
            case 'MMM':
              return match.month(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.month(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // J, F, ..., D
            case 'MMMMM':
              return match.month(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // January, February, ..., December
            case 'MMMM':
            default:
              return match.month(dateString, {
                width: 'wide',
                context: 'formatting'
              }) || match.month(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.month(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 0 && value <= 11;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth(value, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return MonthParser;
    }(Parser);

    var StandAloneMonthParser = /*#__PURE__*/function (_Parser) {
      _inherits(StandAloneMonthParser, _Parser);
      var _super = _createSuper(StandAloneMonthParser);
      function StandAloneMonthParser() {
        var _this;
        _classCallCheck(this, StandAloneMonthParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 110);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(StandAloneMonthParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          var valueCallback = function valueCallback(value) {
            return value - 1;
          };
          switch (token) {
            // 1, 2, ..., 12
            case 'L':
              return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
            // 01, 02, ..., 12
            case 'LL':
              return mapValue(parseNDigits(2, dateString), valueCallback);
            // 1st, 2nd, ..., 12th
            case 'Lo':
              return mapValue(match.ordinalNumber(dateString, {
                unit: 'month'
              }), valueCallback);
            // Jan, Feb, ..., Dec
            case 'LLL':
              return match.month(dateString, {
                width: 'abbreviated',
                context: 'standalone'
              }) || match.month(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
            // J, F, ..., D
            case 'LLLLL':
              return match.month(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
            // January, February, ..., December
            case 'LLLL':
            default:
              return match.month(dateString, {
                width: 'wide',
                context: 'standalone'
              }) || match.month(dateString, {
                width: 'abbreviated',
                context: 'standalone'
              }) || match.month(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 0 && value <= 11;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth(value, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return StandAloneMonthParser;
    }(Parser);

    function setUTCWeek(dirtyDate, dirtyWeek, options) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var week = toInteger(dirtyWeek);
      var diff = getUTCWeek(date, options) - week;
      date.setUTCDate(date.getUTCDate() - diff * 7);
      return date;
    }

    var LocalWeekParser = /*#__PURE__*/function (_Parser) {
      _inherits(LocalWeekParser, _Parser);
      var _super = _createSuper(LocalWeekParser);
      function LocalWeekParser() {
        var _this;
        _classCallCheck(this, LocalWeekParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 100);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
        return _this;
      }
      _createClass(LocalWeekParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'w':
              return parseNumericPattern(numericPatterns.week, dateString);
            case 'wo':
              return match.ordinalNumber(dateString, {
                unit: 'week'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 1 && value <= 53;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value, options) {
          return startOfUTCWeek(setUTCWeek(date, value, options), options);
        }
      }]);
      return LocalWeekParser;
    }(Parser);

    function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var isoWeek = toInteger(dirtyISOWeek);
      var diff = getUTCISOWeek(date) - isoWeek;
      date.setUTCDate(date.getUTCDate() - diff * 7);
      return date;
    }

    var ISOWeekParser = /*#__PURE__*/function (_Parser) {
      _inherits(ISOWeekParser, _Parser);
      var _super = _createSuper(ISOWeekParser);
      function ISOWeekParser() {
        var _this;
        _classCallCheck(this, ISOWeekParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 100);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(ISOWeekParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'I':
              return parseNumericPattern(numericPatterns.week, dateString);
            case 'Io':
              return match.ordinalNumber(dateString, {
                unit: 'week'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 1 && value <= 53;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          return startOfUTCISOWeek(setUTCISOWeek(date, value));
        }
      }]);
      return ISOWeekParser;
    }(Parser);

    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    // Day of the month
    var DateParser = /*#__PURE__*/function (_Parser) {
      _inherits(DateParser, _Parser);
      var _super = _createSuper(DateParser);
      function DateParser() {
        var _this;
        _classCallCheck(this, DateParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 90);
        _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(DateParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'd':
              return parseNumericPattern(numericPatterns.date, dateString);
            case 'do':
              return match.ordinalNumber(dateString, {
                unit: 'date'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(date, value) {
          var year = date.getUTCFullYear();
          var isLeapYear = isLeapYearIndex$1(year);
          var month = date.getUTCMonth();
          if (isLeapYear) {
            return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
          } else {
            return value >= 1 && value <= DAYS_IN_MONTH[month];
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCDate(value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return DateParser;
    }(Parser);

    var DayOfYearParser = /*#__PURE__*/function (_Parser) {
      _inherits(DayOfYearParser, _Parser);
      var _super = _createSuper(DayOfYearParser);
      function DayOfYearParser() {
        var _this;
        _classCallCheck(this, DayOfYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 90);
        _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(DayOfYearParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'D':
            case 'DD':
              return parseNumericPattern(numericPatterns.dayOfYear, dateString);
            case 'Do':
              return match.ordinalNumber(dateString, {
                unit: 'date'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(date, value) {
          var year = date.getUTCFullYear();
          var isLeapYear = isLeapYearIndex$1(year);
          if (isLeapYear) {
            return value >= 1 && value <= 366;
          } else {
            return value >= 1 && value <= 365;
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth(0, value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return DayOfYearParser;
    }(Parser);

    function setUTCDay(dirtyDate, dirtyDay, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(2, arguments);
      var defaultOptions = getDefaultOptions();
      var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      var date = toDate(dirtyDate);
      var day = toInteger(dirtyDay);
      var currentDay = date.getUTCDay();
      var remainder = day % 7;
      var dayIndex = (remainder + 7) % 7;
      var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }

    var DayParser = /*#__PURE__*/function (_Parser) {
      _inherits(DayParser, _Parser);
      var _super = _createSuper(DayParser);
      function DayParser() {
        var _this;
        _classCallCheck(this, DayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 90);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(DayParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            // Tue
            case 'E':
            case 'EE':
            case 'EEE':
              return match.day(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'short',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // T
            case 'EEEEE':
              return match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // Tu
            case 'EEEEEE':
              return match.day(dateString, {
                width: 'short',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // Tuesday
            case 'EEEE':
            default:
              return match.day(dateString, {
                width: 'wide',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'short',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 0 && value <= 6;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value, options) {
          date = setUTCDay(date, value, options);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return DayParser;
    }(Parser);

    var LocalDayParser = /*#__PURE__*/function (_Parser) {
      _inherits(LocalDayParser, _Parser);
      var _super = _createSuper(LocalDayParser);
      function LocalDayParser() {
        var _this;
        _classCallCheck(this, LocalDayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 90);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
        return _this;
      }
      _createClass(LocalDayParser, [{
        key: "parse",
        value: function parse(dateString, token, match, options) {
          var valueCallback = function valueCallback(value) {
            var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
          };
          switch (token) {
            // 3
            case 'e':
            case 'ee':
              // 03
              return mapValue(parseNDigits(token.length, dateString), valueCallback);
            // 3rd
            case 'eo':
              return mapValue(match.ordinalNumber(dateString, {
                unit: 'day'
              }), valueCallback);
            // Tue
            case 'eee':
              return match.day(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'short',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // T
            case 'eeeee':
              return match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // Tu
            case 'eeeeee':
              return match.day(dateString, {
                width: 'short',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            // Tuesday
            case 'eeee':
            default:
              return match.day(dateString, {
                width: 'wide',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'short',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 0 && value <= 6;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value, options) {
          date = setUTCDay(date, value, options);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return LocalDayParser;
    }(Parser);

    var StandAloneLocalDayParser = /*#__PURE__*/function (_Parser) {
      _inherits(StandAloneLocalDayParser, _Parser);
      var _super = _createSuper(StandAloneLocalDayParser);
      function StandAloneLocalDayParser() {
        var _this;
        _classCallCheck(this, StandAloneLocalDayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 90);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
        return _this;
      }
      _createClass(StandAloneLocalDayParser, [{
        key: "parse",
        value: function parse(dateString, token, match, options) {
          var valueCallback = function valueCallback(value) {
            var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
          };
          switch (token) {
            // 3
            case 'c':
            case 'cc':
              // 03
              return mapValue(parseNDigits(token.length, dateString), valueCallback);
            // 3rd
            case 'co':
              return mapValue(match.ordinalNumber(dateString, {
                unit: 'day'
              }), valueCallback);
            // Tue
            case 'ccc':
              return match.day(dateString, {
                width: 'abbreviated',
                context: 'standalone'
              }) || match.day(dateString, {
                width: 'short',
                context: 'standalone'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
            // T
            case 'ccccc':
              return match.day(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
            // Tu
            case 'cccccc':
              return match.day(dateString, {
                width: 'short',
                context: 'standalone'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
            // Tuesday
            case 'cccc':
            default:
              return match.day(dateString, {
                width: 'wide',
                context: 'standalone'
              }) || match.day(dateString, {
                width: 'abbreviated',
                context: 'standalone'
              }) || match.day(dateString, {
                width: 'short',
                context: 'standalone'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'standalone'
              });
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 0 && value <= 6;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value, options) {
          date = setUTCDay(date, value, options);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return StandAloneLocalDayParser;
    }(Parser);

    function setUTCISODay(dirtyDate, dirtyDay) {
      requiredArgs(2, arguments);
      var day = toInteger(dirtyDay);
      if (day % 7 === 0) {
        day = day - 7;
      }
      var weekStartsOn = 1;
      var date = toDate(dirtyDate);
      var currentDay = date.getUTCDay();
      var remainder = day % 7;
      var dayIndex = (remainder + 7) % 7;
      var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }

    var ISODayParser = /*#__PURE__*/function (_Parser) {
      _inherits(ISODayParser, _Parser);
      var _super = _createSuper(ISODayParser);
      function ISODayParser() {
        var _this;
        _classCallCheck(this, ISODayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 90);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
        return _this;
      }
      _createClass(ISODayParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          var valueCallback = function valueCallback(value) {
            if (value === 0) {
              return 7;
            }
            return value;
          };
          switch (token) {
            // 2
            case 'i':
            case 'ii':
              // 02
              return parseNDigits(token.length, dateString);
            // 2nd
            case 'io':
              return match.ordinalNumber(dateString, {
                unit: 'day'
              });
            // Tue
            case 'iii':
              return mapValue(match.day(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'short',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              }), valueCallback);
            // T
            case 'iiiii':
              return mapValue(match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              }), valueCallback);
            // Tu
            case 'iiiiii':
              return mapValue(match.day(dateString, {
                width: 'short',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              }), valueCallback);
            // Tuesday
            case 'iiii':
            default:
              return mapValue(match.day(dateString, {
                width: 'wide',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'short',
                context: 'formatting'
              }) || match.day(dateString, {
                width: 'narrow',
                context: 'formatting'
              }), valueCallback);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 1 && value <= 7;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date = setUTCISODay(date, value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return ISODayParser;
    }(Parser);

    var AMPMParser = /*#__PURE__*/function (_Parser) {
      _inherits(AMPMParser, _Parser);
      var _super = _createSuper(AMPMParser);
      function AMPMParser() {
        var _this;
        _classCallCheck(this, AMPMParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 80);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
        return _this;
      }
      _createClass(AMPMParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'a':
            case 'aa':
            case 'aaa':
              return match.dayPeriod(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.dayPeriod(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            case 'aaaaa':
              return match.dayPeriod(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            case 'aaaa':
            default:
              return match.dayPeriod(dateString, {
                width: 'wide',
                context: 'formatting'
              }) || match.dayPeriod(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.dayPeriod(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
          return date;
        }
      }]);
      return AMPMParser;
    }(Parser);

    var AMPMMidnightParser = /*#__PURE__*/function (_Parser) {
      _inherits(AMPMMidnightParser, _Parser);
      var _super = _createSuper(AMPMMidnightParser);
      function AMPMMidnightParser() {
        var _this;
        _classCallCheck(this, AMPMMidnightParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 80);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
        return _this;
      }
      _createClass(AMPMMidnightParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'b':
            case 'bb':
            case 'bbb':
              return match.dayPeriod(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.dayPeriod(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            case 'bbbbb':
              return match.dayPeriod(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            case 'bbbb':
            default:
              return match.dayPeriod(dateString, {
                width: 'wide',
                context: 'formatting'
              }) || match.dayPeriod(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.dayPeriod(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
          return date;
        }
      }]);
      return AMPMMidnightParser;
    }(Parser);

    var DayPeriodParser = /*#__PURE__*/function (_Parser) {
      _inherits(DayPeriodParser, _Parser);
      var _super = _createSuper(DayPeriodParser);
      function DayPeriodParser() {
        var _this;
        _classCallCheck(this, DayPeriodParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 80);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
        return _this;
      }
      _createClass(DayPeriodParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'B':
            case 'BB':
            case 'BBB':
              return match.dayPeriod(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.dayPeriod(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            case 'BBBBB':
              return match.dayPeriod(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
            case 'BBBB':
            default:
              return match.dayPeriod(dateString, {
                width: 'wide',
                context: 'formatting'
              }) || match.dayPeriod(dateString, {
                width: 'abbreviated',
                context: 'formatting'
              }) || match.dayPeriod(dateString, {
                width: 'narrow',
                context: 'formatting'
              });
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
          return date;
        }
      }]);
      return DayPeriodParser;
    }(Parser);

    var Hour1to12Parser = /*#__PURE__*/function (_Parser) {
      _inherits(Hour1to12Parser, _Parser);
      var _super = _createSuper(Hour1to12Parser);
      function Hour1to12Parser() {
        var _this;
        _classCallCheck(this, Hour1to12Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 70);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
        return _this;
      }
      _createClass(Hour1to12Parser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'h':
              return parseNumericPattern(numericPatterns.hour12h, dateString);
            case 'ho':
              return match.ordinalNumber(dateString, {
                unit: 'hour'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 1 && value <= 12;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          var isPM = date.getUTCHours() >= 12;
          if (isPM && value < 12) {
            date.setUTCHours(value + 12, 0, 0, 0);
          } else if (!isPM && value === 12) {
            date.setUTCHours(0, 0, 0, 0);
          } else {
            date.setUTCHours(value, 0, 0, 0);
          }
          return date;
        }
      }]);
      return Hour1to12Parser;
    }(Parser);

    var Hour0to23Parser = /*#__PURE__*/function (_Parser) {
      _inherits(Hour0to23Parser, _Parser);
      var _super = _createSuper(Hour0to23Parser);
      function Hour0to23Parser() {
        var _this;
        _classCallCheck(this, Hour0to23Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 70);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
        return _this;
      }
      _createClass(Hour0to23Parser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'H':
              return parseNumericPattern(numericPatterns.hour23h, dateString);
            case 'Ho':
              return match.ordinalNumber(dateString, {
                unit: 'hour'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 0 && value <= 23;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCHours(value, 0, 0, 0);
          return date;
        }
      }]);
      return Hour0to23Parser;
    }(Parser);

    var Hour0To11Parser = /*#__PURE__*/function (_Parser) {
      _inherits(Hour0To11Parser, _Parser);
      var _super = _createSuper(Hour0To11Parser);
      function Hour0To11Parser() {
        var _this;
        _classCallCheck(this, Hour0To11Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 70);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
        return _this;
      }
      _createClass(Hour0To11Parser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'K':
              return parseNumericPattern(numericPatterns.hour11h, dateString);
            case 'Ko':
              return match.ordinalNumber(dateString, {
                unit: 'hour'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 0 && value <= 11;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          var isPM = date.getUTCHours() >= 12;
          if (isPM && value < 12) {
            date.setUTCHours(value + 12, 0, 0, 0);
          } else {
            date.setUTCHours(value, 0, 0, 0);
          }
          return date;
        }
      }]);
      return Hour0To11Parser;
    }(Parser);

    var Hour1To24Parser = /*#__PURE__*/function (_Parser) {
      _inherits(Hour1To24Parser, _Parser);
      var _super = _createSuper(Hour1To24Parser);
      function Hour1To24Parser() {
        var _this;
        _classCallCheck(this, Hour1To24Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 70);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
        return _this;
      }
      _createClass(Hour1To24Parser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'k':
              return parseNumericPattern(numericPatterns.hour24h, dateString);
            case 'ko':
              return match.ordinalNumber(dateString, {
                unit: 'hour'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 1 && value <= 24;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          var hours = value <= 24 ? value % 24 : value;
          date.setUTCHours(hours, 0, 0, 0);
          return date;
        }
      }]);
      return Hour1To24Parser;
    }(Parser);

    var MinuteParser = /*#__PURE__*/function (_Parser) {
      _inherits(MinuteParser, _Parser);
      var _super = _createSuper(MinuteParser);
      function MinuteParser() {
        var _this;
        _classCallCheck(this, MinuteParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 60);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
        return _this;
      }
      _createClass(MinuteParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 'm':
              return parseNumericPattern(numericPatterns.minute, dateString);
            case 'mo':
              return match.ordinalNumber(dateString, {
                unit: 'minute'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 0 && value <= 59;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMinutes(value, 0, 0);
          return date;
        }
      }]);
      return MinuteParser;
    }(Parser);

    var SecondParser = /*#__PURE__*/function (_Parser) {
      _inherits(SecondParser, _Parser);
      var _super = _createSuper(SecondParser);
      function SecondParser() {
        var _this;
        _classCallCheck(this, SecondParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 50);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
        return _this;
      }
      _createClass(SecondParser, [{
        key: "parse",
        value: function parse(dateString, token, match) {
          switch (token) {
            case 's':
              return parseNumericPattern(numericPatterns.second, dateString);
            case 'so':
              return match.ordinalNumber(dateString, {
                unit: 'second'
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate(_date, value) {
          return value >= 0 && value <= 59;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCSeconds(value, 0);
          return date;
        }
      }]);
      return SecondParser;
    }(Parser);

    var FractionOfSecondParser = /*#__PURE__*/function (_Parser) {
      _inherits(FractionOfSecondParser, _Parser);
      var _super = _createSuper(FractionOfSecondParser);
      function FractionOfSecondParser() {
        var _this;
        _classCallCheck(this, FractionOfSecondParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 30);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
        return _this;
      }
      _createClass(FractionOfSecondParser, [{
        key: "parse",
        value: function parse(dateString, token) {
          var valueCallback = function valueCallback(value) {
            return Math.floor(value * Math.pow(10, -token.length + 3));
          };
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMilliseconds(value);
          return date;
        }
      }]);
      return FractionOfSecondParser;
    }(Parser);

    var ISOTimezoneWithZParser = /*#__PURE__*/function (_Parser) {
      _inherits(ISOTimezoneWithZParser, _Parser);
      var _super = _createSuper(ISOTimezoneWithZParser);
      function ISOTimezoneWithZParser() {
        var _this;
        _classCallCheck(this, ISOTimezoneWithZParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 10);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'x']);
        return _this;
      }
      _createClass(ISOTimezoneWithZParser, [{
        key: "parse",
        value: function parse(dateString, token) {
          switch (token) {
            case 'X':
              return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
            case 'XX':
              return parseTimezonePattern(timezonePatterns.basic, dateString);
            case 'XXXX':
              return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
            case 'XXXXX':
              return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
            case 'XXX':
            default:
              return parseTimezonePattern(timezonePatterns.extended, dateString);
          }
        }
      }, {
        key: "set",
        value: function set(date, flags, value) {
          if (flags.timestampIsSet) {
            return date;
          }
          return new Date(date.getTime() - value);
        }
      }]);
      return ISOTimezoneWithZParser;
    }(Parser);

    var ISOTimezoneParser = /*#__PURE__*/function (_Parser) {
      _inherits(ISOTimezoneParser, _Parser);
      var _super = _createSuper(ISOTimezoneParser);
      function ISOTimezoneParser() {
        var _this;
        _classCallCheck(this, ISOTimezoneParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 10);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'X']);
        return _this;
      }
      _createClass(ISOTimezoneParser, [{
        key: "parse",
        value: function parse(dateString, token) {
          switch (token) {
            case 'x':
              return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
            case 'xx':
              return parseTimezonePattern(timezonePatterns.basic, dateString);
            case 'xxxx':
              return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
            case 'xxxxx':
              return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
            case 'xxx':
            default:
              return parseTimezonePattern(timezonePatterns.extended, dateString);
          }
        }
      }, {
        key: "set",
        value: function set(date, flags, value) {
          if (flags.timestampIsSet) {
            return date;
          }
          return new Date(date.getTime() - value);
        }
      }]);
      return ISOTimezoneParser;
    }(Parser);

    var TimestampSecondsParser = /*#__PURE__*/function (_Parser) {
      _inherits(TimestampSecondsParser, _Parser);
      var _super = _createSuper(TimestampSecondsParser);
      function TimestampSecondsParser() {
        var _this;
        _classCallCheck(this, TimestampSecondsParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 40);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
        return _this;
      }
      _createClass(TimestampSecondsParser, [{
        key: "parse",
        value: function parse(dateString) {
          return parseAnyDigitsSigned(dateString);
        }
      }, {
        key: "set",
        value: function set(_date, _flags, value) {
          return [new Date(value * 1000), {
            timestampIsSet: true
          }];
        }
      }]);
      return TimestampSecondsParser;
    }(Parser);

    var TimestampMillisecondsParser = /*#__PURE__*/function (_Parser) {
      _inherits(TimestampMillisecondsParser, _Parser);
      var _super = _createSuper(TimestampMillisecondsParser);
      function TimestampMillisecondsParser() {
        var _this;
        _classCallCheck(this, TimestampMillisecondsParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "priority", 20);
        _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
        return _this;
      }
      _createClass(TimestampMillisecondsParser, [{
        key: "parse",
        value: function parse(dateString) {
          return parseAnyDigitsSigned(dateString);
        }
      }, {
        key: "set",
        value: function set(_date, _flags, value) {
          return [new Date(value), {
            timestampIsSet: true
          }];
        }
      }]);
      return TimestampMillisecondsParser;
    }(Parser);

    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
     * |  p  |                                |  P  |                                |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     */
    var parsers = {
      G: new EraParser(),
      y: new YearParser(),
      Y: new LocalWeekYearParser(),
      R: new ISOWeekYearParser(),
      u: new ExtendedYearParser(),
      Q: new QuarterParser(),
      q: new StandAloneQuarterParser(),
      M: new MonthParser(),
      L: new StandAloneMonthParser(),
      w: new LocalWeekParser(),
      I: new ISOWeekParser(),
      d: new DateParser(),
      D: new DayOfYearParser(),
      E: new DayParser(),
      e: new LocalDayParser(),
      c: new StandAloneLocalDayParser(),
      i: new ISODayParser(),
      a: new AMPMParser(),
      b: new AMPMMidnightParser(),
      B: new DayPeriodParser(),
      h: new Hour1to12Parser(),
      H: new Hour0to23Parser(),
      K: new Hour0To11Parser(),
      k: new Hour1To24Parser(),
      m: new MinuteParser(),
      s: new SecondParser(),
      S: new FractionOfSecondParser(),
      X: new ISOTimezoneWithZParser(),
      x: new ISOTimezoneParser(),
      t: new TimestampSecondsParser(),
      T: new TimestampMillisecondsParser()
    };

    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

    // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var notWhitespaceRegExp = /\S/;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

    /**
     * @name parse
     * @category Common Helpers
     * @summary Parse the date.
     *
     * @description
     * Return the date parsed from string using the given format string.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * The characters in the format string wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     *
     * Format of the format string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 5 below the table).
     *
     * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
     * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
     *
     * ```javascript
     * parse('23 AM', 'HH a', new Date())
     * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
     * ```
     *
     * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
     *
     * Accepted format string patterns:
     * | Unit                            |Prior| Pattern | Result examples                   | Notes |
     * |---------------------------------|-----|---------|-----------------------------------|-------|
     * | Era                             | 140 | G..GGG  | AD, BC                            |       |
     * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 |     | GGGGG   | A, B                              |       |
     * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
     * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
     * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
     * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
     * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
     * |                                 |     | yyyyy   | ...                               | 2,4   |
     * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
     * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
     * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
     * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
     * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
     * |                                 |     | YYYYY   | ...                               | 2,4   |
     * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
     * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
     * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
     * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
     * |                                 |     | RRRRR   | ...                               | 2,4,5 |
     * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
     * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
     * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
     * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
     * |                                 |     | uuuuu   | ...                               | 2,4   |
     * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
     * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
     * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
     * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
     * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
     * |                                 |     | qq      | 01, 02, 03, 04                    |       |
     * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
     * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
     * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
     * |                                 |     | MM      | 01, 02, ..., 12                   |       |
     * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 |     | MMMM    | January, February, ..., December  | 2     |
     * |                                 |     | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
     * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
     * |                                 |     | LL      | 01, 02, ..., 12                   |       |
     * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 |     | LLLL    | January, February, ..., December  | 2     |
     * |                                 |     | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
     * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
     * |                                 |     | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
     * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
     * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
     * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
     * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
     * |                                 |     | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
     * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
     * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
     * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 |     | DDDD    | ...                               | 2     |
     * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
     * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
     * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
     * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
     * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
     * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
     * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
     * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
     * |                                 |     | ee      | 02, 03, ..., 01                   |       |
     * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
     * |                                 |     | cc      | 02, 03, ..., 01                   |       |
     * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
     * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
     * |                                 |     | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
     * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 |     | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
     * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
     * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
     * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
     * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
     * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
     * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
     * |                                 |     | mm      | 00, 01, ..., 59                   |       |
     * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
     * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
     * |                                 |     | ss      | 00, 01, ..., 59                   |       |
     * | Seconds timestamp               |  40 | t       | 512969520                         |       |
     * |                                 |     | tt      | ...                               | 2     |
     * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
     * |                                 |     | SS      | 00, 01, ..., 99                   |       |
     * |                                 |     | SSS     | 000, 001, ..., 999                |       |
     * |                                 |     | SSSS    | ...                               | 2     |
     * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
     * |                                 |     | TT      | ...                               | 2     |
     * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
     * |                                 |     | XX      | -0800, +0530, Z                   |       |
     * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
     * |                                 |     | xx      | -0800, +0530, +0000               |       |
     * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
     * |                                 |     | PP      | May 29, 1453                      |       |
     * |                                 |     | PPP     | May 29th, 1453                    |       |
     * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
     * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
     * |                                 |     | pp      | 12:00:00 AM                       |       |
     * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
     * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
     * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
     * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular.
     *    In `format` function, they will produce different result:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     *    `parse` will try to match both formatting and stand-alone units interchangably.
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table:
     *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
     *      as wide as the sequence
     *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
     *      These variations are marked with "2" in the last column of the table.
     *
     * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 4. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
     *
     *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
     *
     *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
     *
     *    while `uu` will just assign the year as is:
     *
     *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
     *
     *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
     *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
     *
     * 5. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
     *    on the given locale.
     *
     *    using `en-US` locale: `P` => `MM/dd/yyyy`
     *    using `en-US` locale: `p` => `hh:mm a`
     *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
     *    using `pt-BR` locale: `p` => `HH:mm`
     *
     * Values will be assigned to the date in the descending order of its unit's priority.
     * Units of an equal priority overwrite each other in the order of appearance.
     *
     * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
     * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
     *
     * `referenceDate` must be passed for correct work of the function.
     * If you're not sure which `referenceDate` to supply, create a new instance of Date:
     * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
     * In this case parsing will be done in the context of the current date.
     * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
     * then `Invalid Date` will be returned.
     *
     * The result may vary by locale.
     *
     * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
     *
     * If parsing failed, `Invalid Date` will be returned.
     * Invalid Date is a Date, whose time value is NaN.
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * @param {String} dateString - the string to parse
     * @param {String} formatString - the string of tokens
     * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @returns {Date} the parsed date
     * @throws {TypeError} 3 arguments required
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} `options.locale` must contain `match` property
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Parse 11 February 2014 from middle-endian format:
     * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
     * //=> Tue Feb 11 2014 00:00:00
     *
     * @example
     * // Parse 28th of February in Esperanto locale in the context of 2010 year:
     * import eo from 'date-fns/locale/eo'
     * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
     *   locale: eo
     * })
     * //=> Sun Feb 28 2010 00:00:00
     */
    function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
      var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
      requiredArgs(3, arguments);
      var dateString = String(dirtyDateString);
      var formatString = String(dirtyFormatString);
      var defaultOptions = getDefaultOptions();
      var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
      if (!locale.match) {
        throw new RangeError('locale must contain match property');
      }
      var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

      // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }
      var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      if (formatString === '') {
        if (dateString === '') {
          return toDate(dirtyReferenceDate);
        } else {
          return new Date(NaN);
        }
      }
      var subFnOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale
      };

      // If timezone isn't specified, it will be set to the system timezone
      var setters = [new DateToSystemTimezoneSetter()];
      var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
        var firstCharacter = substring[0];
        if (firstCharacter in longFormatters$2) {
          var longFormatter = longFormatters$2[firstCharacter];
          return longFormatter(substring, locale.formatLong);
        }
        return substring;
      }).join('').match(formattingTokensRegExp);
      var usedTokens = [];
      var _iterator = _createForOfIteratorHelper(tokens),
        _step;
      try {
        var _loop = function _loop() {
          var token = _step.value;
          if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
            throwProtectedError(token, formatString, dirtyDateString);
          }
          if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
            throwProtectedError(token, formatString, dirtyDateString);
          }
          var firstCharacter = token[0];
          var parser = parsers[firstCharacter];
          if (parser) {
            var incompatibleTokens = parser.incompatibleTokens;
            if (Array.isArray(incompatibleTokens)) {
              var incompatibleToken = usedTokens.find(function (usedToken) {
                return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
              });
              if (incompatibleToken) {
                throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
              }
            } else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
              throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
            }
            usedTokens.push({
              token: firstCharacter,
              fullToken: token
            });
            var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
            if (!parseResult) {
              return {
                v: new Date(NaN)
              };
            }
            setters.push(parseResult.setter);
            dateString = parseResult.rest;
          } else {
            if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
              throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
            }

            // Replace two single quote characters with one single quote character
            if (token === "''") {
              token = "'";
            } else if (firstCharacter === "'") {
              token = cleanEscapedString(token);
            }

            // Cut token from string, or, if string doesn't match the token, return Invalid Date
            if (dateString.indexOf(token) === 0) {
              dateString = dateString.slice(token.length);
            } else {
              return {
                v: new Date(NaN)
              };
            }
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _ret = _loop();
          if (_typeof(_ret) === "object") return _ret.v;
        }

        // Check if the remaining input contains something other than whitespace
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
        return new Date(NaN);
      }
      var uniquePrioritySetters = setters.map(function (setter) {
        return setter.priority;
      }).sort(function (a, b) {
        return b - a;
      }).filter(function (priority, index, array) {
        return array.indexOf(priority) === index;
      }).map(function (priority) {
        return setters.filter(function (setter) {
          return setter.priority === priority;
        }).sort(function (a, b) {
          return b.subPriority - a.subPriority;
        });
      }).map(function (setterArray) {
        return setterArray[0];
      });
      var date = toDate(dirtyReferenceDate);
      if (isNaN(date.getTime())) {
        return new Date(NaN);
      }

      // Convert the date in system timezone to the same date in UTC+00:00 timezone.
      var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
      var flags = {};
      var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var setter = _step2.value;
          if (!setter.validate(utcDate, subFnOptions)) {
            return new Date(NaN);
          }
          var result = setter.set(utcDate, flags, subFnOptions);
          // Result is tuple (date, flags)
          if (Array.isArray(result)) {
            utcDate = result[0];
            assign(flags, result[1]);
            // Result is date
          } else {
            utcDate = result;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return utcDate;
    }
    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }

    /**
     * @name setDate
     * @category Day Helpers
     * @summary Set the day of the month to the given date.
     *
     * @description
     * Set the day of the month to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} dayOfMonth - the day of the month of the new date
     * @returns {Date} the new date with the day of the month set
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Set the 30th day of the month to 1 September 2014:
     * const result = setDate(new Date(2014, 8, 1), 30)
     * //=> Tue Sep 30 2014 00:00:00
     */
    function setDate(dirtyDate, dirtyDayOfMonth) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var dayOfMonth = toInteger(dirtyDayOfMonth);
      date.setDate(dayOfMonth);
      return date;
    }

    /**
     * @name setHours
     * @category Hour Helpers
     * @summary Set the hours to the given date.
     *
     * @description
     * Set the hours to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} hours - the hours of the new date
     * @returns {Date} the new date with the hours set
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Set 4 hours to 1 September 2014 11:30:00:
     * const result = setHours(new Date(2014, 8, 1, 11, 30), 4)
     * //=> Mon Sep 01 2014 04:30:00
     */
    function setHours(dirtyDate, dirtyHours) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var hours = toInteger(dirtyHours);
      date.setHours(hours);
      return date;
    }

    /**
     * @name setMinutes
     * @category Minute Helpers
     * @summary Set the minutes to the given date.
     *
     * @description
     * Set the minutes to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} minutes - the minutes of the new date
     * @returns {Date} the new date with the minutes set
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Set 45 minutes to 1 September 2014 11:30:40:
     * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)
     * //=> Mon Sep 01 2014 11:45:40
     */
    function setMinutes(dirtyDate, dirtyMinutes) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var minutes = toInteger(dirtyMinutes);
      date.setMinutes(minutes);
      return date;
    }

    /**
     * @name setMonth
     * @category Month Helpers
     * @summary Set the month to the given date.
     *
     * @description
     * Set the month to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} month - the month of the new date
     * @returns {Date} the new date with the month set
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Set February to 1 September 2014:
     * const result = setMonth(new Date(2014, 8, 1), 1)
     * //=> Sat Feb 01 2014 00:00:00
     */
    function setMonth(dirtyDate, dirtyMonth) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var month = toInteger(dirtyMonth);
      var year = date.getFullYear();
      var day = date.getDate();
      var dateWithDesiredMonth = new Date(0);
      dateWithDesiredMonth.setFullYear(year, month, 15);
      dateWithDesiredMonth.setHours(0, 0, 0, 0);
      var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
      // Set the last day of the new month
      // if the original date was the last day of the longer month
      date.setMonth(month, Math.min(day, daysInMonth));
      return date;
    }

    /**
     * @name setSeconds
     * @category Second Helpers
     * @summary Set the seconds to the given date.
     *
     * @description
     * Set the seconds to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} seconds - the seconds of the new date
     * @returns {Date} the new date with the seconds set
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Set 45 seconds to 1 September 2014 11:30:40:
     * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)
     * //=> Mon Sep 01 2014 11:30:45
     */
    function setSeconds(dirtyDate, dirtySeconds) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var seconds = toInteger(dirtySeconds);
      date.setSeconds(seconds);
      return date;
    }

    /**
     * @name setMilliseconds
     * @category Millisecond Helpers
     * @summary Set the milliseconds to the given date.
     *
     * @description
     * Set the milliseconds to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} milliseconds - the milliseconds of the new date
     * @returns {Date} the new date with the milliseconds set
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Set 300 milliseconds to 1 September 2014 11:30:40.500:
     * const result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)
     * //=> Mon Sep 01 2014 11:30:40.300
     */
    function setMilliseconds(dirtyDate, dirtyMilliseconds) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var milliseconds = toInteger(dirtyMilliseconds);
      date.setMilliseconds(milliseconds);
      return date;
    }

    /**
     * @name setYear
     * @category Year Helpers
     * @summary Set the year to the given date.
     *
     * @description
     * Set the year to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} year - the year of the new date
     * @returns {Date} the new date with the year set
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Set year 2013 to 1 September 2014:
     * const result = setYear(new Date(2014, 8, 1), 2013)
     * //=> Sun Sep 01 2013 00:00:00
     */
    function setYear(dirtyDate, dirtyYear) {
      requiredArgs(2, arguments);
      var date = toDate(dirtyDate);
      var year = toInteger(dirtyYear);

      // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
      if (isNaN(date.getTime())) {
        return new Date(NaN);
      }
      date.setFullYear(year);
      return date;
    }

    /**
     * @name startOfMonth
     * @category Month Helpers
     * @summary Return the start of a month for the given date.
     *
     * @description
     * Return the start of a month for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a month
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a month for 2 September 2014 11:55:00:
     * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
     * //=> Mon Sep 01 2014 00:00:00
     */
    function startOfMonth(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    /**
     * @name startOfYear
     * @category Year Helpers
     * @summary Return the start of a year for the given date.
     *
     * @description
     * Return the start of a year for the given date.
     * The result will be in the local timezone.
     *
     * @param {Date|Number} date - the original date
     * @returns {Date} the start of a year
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // The start of a year for 2 September 2014 11:55:00:
     * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
     * //=> Wed Jan 01 2014 00:00:00
     */
    function startOfYear(dirtyDate) {
      requiredArgs(1, arguments);
      var cleanDate = toDate(dirtyDate);
      var date = new Date(0);
      date.setFullYear(cleanDate.getFullYear(), 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    /**
     * @name parseISO
     * @category Common Helpers
     * @summary Parse ISO string
     *
     * @description
     * Parse the given string in ISO 8601 format and return an instance of Date.
     *
     * Function accepts complete ISO 8601 formats as well as partial implementations.
     * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
     *
     * If the argument isn't a string, the function cannot parse the string or
     * the values are invalid, it returns Invalid Date.
     *
     * @param {String} argument - the value to convert
     * @param {Object} [options] - an object with options.
     * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
     *
     * @example
     * // Convert string '2014-02-11T11:30:30' to date:
     * const result = parseISO('2014-02-11T11:30:30')
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert string '+02014101' to date,
     * // if the additional number of digits in the extended year format is 1:
     * const result = parseISO('+02014101', { additionalDigits: 1 })
     * //=> Fri Apr 11 2014 00:00:00
     */
    function parseISO(argument, options) {
      var _options$additionalDi;
      requiredArgs(1, arguments);
      var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
      if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
        throw new RangeError('additionalDigits must be 0, 1 or 2');
      }
      if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
        return new Date(NaN);
      }
      var dateStrings = splitDateString(argument);
      var date;
      if (dateStrings.date) {
        var parseYearResult = parseYear(dateStrings.date, additionalDigits);
        date = parseDate(parseYearResult.restDateString, parseYearResult.year);
      }
      if (!date || isNaN(date.getTime())) {
        return new Date(NaN);
      }
      var timestamp = date.getTime();
      var time = 0;
      var offset;
      if (dateStrings.time) {
        time = parseTime(dateStrings.time);
        if (isNaN(time)) {
          return new Date(NaN);
        }
      }
      if (dateStrings.timezone) {
        offset = parseTimezone(dateStrings.timezone);
        if (isNaN(offset)) {
          return new Date(NaN);
        }
      } else {
        var dirtyDate = new Date(timestamp + time);
        // js parsed string assuming it's in UTC timezone
        // but we need it to be parsed in our timezone
        // so we use utc values to build date in our timezone.
        // Year values from 0 to 99 map to the years 1900 to 1999
        // so set year explicitly with setFullYear.
        var result = new Date(0);
        result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
        result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
        return result;
      }
      return new Date(timestamp + time + offset);
    }
    var patterns = {
      dateTimeDelimiter: /[T ]/,
      timeZoneDelimiter: /[Z ]/i,
      timezone: /([Z+-].*)$/
    };
    var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
    var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
    var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
    function splitDateString(dateString) {
      var dateStrings = {};
      var array = dateString.split(patterns.dateTimeDelimiter);
      var timeString;

      // The regex match should only return at maximum two array elements.
      // [date], [time], or [date, time].
      if (array.length > 2) {
        return dateStrings;
      }
      if (/:/.test(array[0])) {
        timeString = array[0];
      } else {
        dateStrings.date = array[0];
        timeString = array[1];
        if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
          dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
          timeString = dateString.substr(dateStrings.date.length, dateString.length);
        }
      }
      if (timeString) {
        var token = patterns.timezone.exec(timeString);
        if (token) {
          dateStrings.time = timeString.replace(token[1], '');
          dateStrings.timezone = token[1];
        } else {
          dateStrings.time = timeString;
        }
      }
      return dateStrings;
    }
    function parseYear(dateString, additionalDigits) {
      var regex = new RegExp('^(?:(\\d{4}|[+-]\\d{' + (4 + additionalDigits) + '})|(\\d{2}|[+-]\\d{' + (2 + additionalDigits) + '})$)');
      var captures = dateString.match(regex);
      // Invalid ISO-formatted year
      if (!captures) return {
        year: NaN,
        restDateString: ''
      };
      var year = captures[1] ? parseInt(captures[1]) : null;
      var century = captures[2] ? parseInt(captures[2]) : null;

      // either year or century is null, not both
      return {
        year: century === null ? year : century * 100,
        restDateString: dateString.slice((captures[1] || captures[2]).length)
      };
    }
    function parseDate(dateString, year) {
      // Invalid ISO-formatted year
      if (year === null) return new Date(NaN);
      var captures = dateString.match(dateRegex);
      // Invalid ISO-formatted string
      if (!captures) return new Date(NaN);
      var isWeekDate = !!captures[4];
      var dayOfYear = parseDateUnit(captures[1]);
      var month = parseDateUnit(captures[2]) - 1;
      var day = parseDateUnit(captures[3]);
      var week = parseDateUnit(captures[4]);
      var dayOfWeek = parseDateUnit(captures[5]) - 1;
      if (isWeekDate) {
        if (!validateWeekDate(year, week, dayOfWeek)) {
          return new Date(NaN);
        }
        return dayOfISOWeekYear(year, week, dayOfWeek);
      } else {
        var date = new Date(0);
        if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
          return new Date(NaN);
        }
        date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
        return date;
      }
    }
    function parseDateUnit(value) {
      return value ? parseInt(value) : 1;
    }
    function parseTime(timeString) {
      var captures = timeString.match(timeRegex);
      if (!captures) return NaN; // Invalid ISO-formatted time

      var hours = parseTimeUnit(captures[1]);
      var minutes = parseTimeUnit(captures[2]);
      var seconds = parseTimeUnit(captures[3]);
      if (!validateTime(hours, minutes, seconds)) {
        return NaN;
      }
      return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;
    }
    function parseTimeUnit(value) {
      return value && parseFloat(value.replace(',', '.')) || 0;
    }
    function parseTimezone(timezoneString) {
      if (timezoneString === 'Z') return 0;
      var captures = timezoneString.match(timezoneRegex);
      if (!captures) return 0;
      var sign = captures[1] === '+' ? -1 : 1;
      var hours = parseInt(captures[2]);
      var minutes = captures[3] && parseInt(captures[3]) || 0;
      if (!validateTimezone(hours, minutes)) {
        return NaN;
      }
      return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
    }
    function dayOfISOWeekYear(isoWeekYear, week, day) {
      var date = new Date(0);
      date.setUTCFullYear(isoWeekYear, 0, 4);
      var fourthOfJanuaryDay = date.getUTCDay() || 7;
      var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }

    // Validation functions

    // February is null to handle the leap year (using ||)
    var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function isLeapYearIndex(year) {
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
    function validateDate(year, month, date) {
      return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
    }
    function validateDayOfYearDate(year, dayOfYear) {
      return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
    }
    function validateWeekDate(_year, week, day) {
      return week >= 1 && week <= 53 && day >= 0 && day <= 6;
    }
    function validateTime(hours, minutes, seconds) {
      if (hours === 24) {
        return minutes === 0 && seconds === 0;
      }
      return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
    }
    function validateTimezone(_hours, minutes) {
      return minutes >= 0 && minutes <= 59;
    }

    /**
     * @name formatISO
     * @category Common Helpers
     * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).
     *
     * @description
     * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.
     *
     * @param {Date|Number} date - the original date
     * @param {Object} [options] - an object with options.
     * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.
     * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.
     * @returns {String} the formatted date string (in local time zone)
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.format` must be 'extended' or 'basic'
     * @throws {RangeError} `options.representation` must be 'date', 'time' or 'complete'
     *
     * @example
     * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):
     * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))
     * //=> '2019-09-18T19:00:52Z'
     *
     * @example
     * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):
     * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
     * //=> '20190918T190052'
     *
     * @example
     * // Represent 18 September 2019 in ISO 8601 format, date only:
     * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
     * //=> '2019-09-18'
     *
     * @example
     * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):
     * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
     * //=> '19:00:52Z'
     */
    function formatISO(date, options) {
      var _options$format, _options$representati;
      requiredArgs(1, arguments);
      var originalDate = toDate(date);
      if (isNaN(originalDate.getTime())) {
        throw new RangeError('Invalid time value');
      }
      var format = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : 'extended');
      var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : 'complete');
      if (format !== 'extended' && format !== 'basic') {
        throw new RangeError("format must be 'extended' or 'basic'");
      }
      if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {
        throw new RangeError("representation must be 'date', 'time', or 'complete'");
      }
      var result = '';
      var tzOffset = '';
      var dateDelimiter = format === 'extended' ? '-' : '';
      var timeDelimiter = format === 'extended' ? ':' : '';

      // Representation is either 'date' or 'complete'
      if (representation !== 'time') {
        var day = addLeadingZeros(originalDate.getDate(), 2);
        var month = addLeadingZeros(originalDate.getMonth() + 1, 2);
        var year = addLeadingZeros(originalDate.getFullYear(), 4);

        // yyyyMMdd or yyyy-MM-dd.
        result = "".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);
      }

      // Representation is either 'time' or 'complete'
      if (representation !== 'date') {
        // Add the timezone.
        var offset = originalDate.getTimezoneOffset();
        if (offset !== 0) {
          var absoluteOffset = Math.abs(offset);
          var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);
          var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);
          // If less than 0, the sign is +, because it is ahead of time.
          var sign = offset < 0 ? '+' : '-';
          tzOffset = "".concat(sign).concat(hourOffset, ":").concat(minuteOffset);
        } else {
          tzOffset = 'Z';
        }
        var hour = addLeadingZeros(originalDate.getHours(), 2);
        var minute = addLeadingZeros(originalDate.getMinutes(), 2);
        var second = addLeadingZeros(originalDate.getSeconds(), 2);

        // If there's also date, separate it with time with 'T'
        var separator = result === '' ? '' : 'T';

        // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.
        var time = [hour, minute, second].join(timeDelimiter);

        // HHmmss or HH:mm:ss.
        result = "".concat(result).concat(separator).concat(time).concat(tzOffset);
      }
      return result;
    }

    /**
     * @name isWithinInterval
     * @category Interval Helpers
     * @summary Is the given date within the interval?
     *
     * @description
     * Is the given date within the interval? (Including start and end.)
     *
     * @param {Date|Number} date - the date to check
     * @param {Interval} interval - the interval to check
     * @returns {Boolean} the date is within the interval
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} The start of an interval cannot be after its end
     * @throws {RangeError} Date in interval cannot be `Invalid Date`
     *
     * @example
     * // For the date within the interval:
     * isWithinInterval(new Date(2014, 0, 3), {
     *   start: new Date(2014, 0, 1),
     *   end: new Date(2014, 0, 7)
     * })
     * //=> true
     *
     * @example
     * // For the date outside of the interval:
     * isWithinInterval(new Date(2014, 0, 10), {
     *   start: new Date(2014, 0, 1),
     *   end: new Date(2014, 0, 7)
     * })
     * //=> false
     *
     * @example
     * // For date equal to interval start:
     * isWithinInterval(date, { start, end: date }) // => true
     *
     * @example
     * // For date equal to interval end:
     * isWithinInterval(date, { start: date, end }) // => true
     */
    function isWithinInterval(dirtyDate, interval) {
      requiredArgs(2, arguments);
      var time = toDate(dirtyDate).getTime();
      var startTime = toDate(interval.start).getTime();
      var endTime = toDate(interval.end).getTime();

      // Throw an exception if start date is after end date or if any date is `Invalid Date`
      if (!(startTime <= endTime)) {
        throw new RangeError('Invalid interval');
      }
      return time >= startTime && time <= endTime;
    }

    var longFormatters_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'P':
          return formatLong.date({
            width: 'short'
          });
        case 'PP':
          return formatLong.date({
            width: 'medium'
          });
        case 'PPP':
          return formatLong.date({
            width: 'long'
          });
        case 'PPPP':
        default:
          return formatLong.date({
            width: 'full'
          });
      }
    };
    var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'p':
          return formatLong.time({
            width: 'short'
          });
        case 'pp':
          return formatLong.time({
            width: 'medium'
          });
        case 'ppp':
          return formatLong.time({
            width: 'long'
          });
        case 'pppp':
        default:
          return formatLong.time({
            width: 'full'
          });
      }
    };
    var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/) || [];
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];
      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }
      var dateTimeFormat;
      switch (datePattern) {
        case 'P':
          dateTimeFormat = formatLong.dateTime({
            width: 'short'
          });
          break;
        case 'PP':
          dateTimeFormat = formatLong.dateTime({
            width: 'medium'
          });
          break;
        case 'PPP':
          dateTimeFormat = formatLong.dateTime({
            width: 'long'
          });
          break;
        case 'PPPP':
        default:
          dateTimeFormat = formatLong.dateTime({
            width: 'full'
          });
          break;
      }
      return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    };
    var longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };
    var _default = longFormatters;
    exports.default = _default;
    module.exports = exports.default;
    });

    var longFormatters = unwrapExports(longFormatters_1);

    const formatTokenMap = {
      // Year
      y: {
        sectionType: 'year',
        contentType: 'digit',
        maxLength: 4
      },
      yy: 'year',
      yyy: {
        sectionType: 'year',
        contentType: 'digit',
        maxLength: 4
      },
      yyyy: 'year',
      // Month
      M: {
        sectionType: 'month',
        contentType: 'digit',
        maxLength: 2
      },
      MM: 'month',
      MMMM: {
        sectionType: 'month',
        contentType: 'letter'
      },
      MMM: {
        sectionType: 'month',
        contentType: 'letter'
      },
      L: {
        sectionType: 'month',
        contentType: 'digit',
        maxLength: 2
      },
      LL: 'month',
      LLL: {
        sectionType: 'month',
        contentType: 'letter'
      },
      LLLL: {
        sectionType: 'month',
        contentType: 'letter'
      },
      // Day of the month
      d: {
        sectionType: 'day',
        contentType: 'digit',
        maxLength: 2
      },
      dd: 'day',
      do: {
        sectionType: 'day',
        contentType: 'digit-with-letter'
      },
      // Day of the week
      E: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      EE: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      EEE: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      EEEE: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      EEEEE: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      i: {
        sectionType: 'weekDay',
        contentType: 'digit',
        maxLength: 1
      },
      ii: 'weekDay',
      iii: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      iiii: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      e: {
        sectionType: 'weekDay',
        contentType: 'digit',
        maxLength: 1
      },
      ee: 'weekDay',
      eee: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      eeee: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      eeeee: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      eeeeee: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      c: {
        sectionType: 'weekDay',
        contentType: 'digit',
        maxLength: 1
      },
      cc: 'weekDay',
      ccc: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      cccc: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      ccccc: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      cccccc: {
        sectionType: 'weekDay',
        contentType: 'letter'
      },
      // Meridiem
      a: 'meridiem',
      aa: 'meridiem',
      aaa: 'meridiem',
      // Hours
      H: {
        sectionType: 'hours',
        contentType: 'digit',
        maxLength: 2
      },
      HH: 'hours',
      h: {
        sectionType: 'hours',
        contentType: 'digit',
        maxLength: 2
      },
      hh: 'hours',
      // Minutes
      m: {
        sectionType: 'minutes',
        contentType: 'digit',
        maxLength: 2
      },
      mm: 'minutes',
      // Seconds
      s: {
        sectionType: 'seconds',
        contentType: 'digit',
        maxLength: 2
      },
      ss: 'seconds'
    };
    const defaultFormats = {
      year: 'yyyy',
      month: 'LLLL',
      monthShort: 'MMM',
      dayOfMonth: 'd',
      weekday: 'EEEE',
      weekdayShort: 'EEE',
      hours24h: 'HH',
      hours12h: 'hh',
      meridiem: 'aa',
      minutes: 'mm',
      seconds: 'ss',
      fullDate: 'PP',
      fullDateWithWeekday: 'PPPP',
      keyboardDate: 'P',
      shortDate: 'MMM d',
      normalDate: 'd MMMM',
      normalDateWithWeekday: 'EEE, MMM d',
      monthAndYear: 'LLLL yyyy',
      monthAndDate: 'MMMM d',
      fullTime: 'p',
      fullTime12h: 'hh:mm aa',
      fullTime24h: 'HH:mm',
      fullDateTime: 'PP p',
      fullDateTime12h: 'PP hh:mm aa',
      fullDateTime24h: 'PP HH:mm',
      keyboardDateTime: 'P p',
      keyboardDateTime12h: 'P hh:mm aa',
      keyboardDateTime24h: 'P HH:mm'
    };

    /**
     * Based on `@date-io/date-fns`
     *
     * MIT License
     *
     * Copyright (c) 2017 Dmitriy Kovalenko
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    class AdapterDateFns {
      constructor({
        locale: _locale,
        formats
      } = {}) {
        this.isMUIAdapter = true;
        this.isTimezoneCompatible = false;
        this.lib = 'date-fns';
        this.locale = void 0;
        this.formats = void 0;
        this.formatTokenMap = formatTokenMap;
        this.escapedCharacters = {
          start: "'",
          end: "'"
        };
        this.date = value => {
          if (typeof value === 'undefined') {
            return new Date();
          }
          if (value === null) {
            return null;
          }
          return new Date(value);
        };
        this.dateWithTimezone = value => {
          return this.date(value);
        };
        this.getTimezone = () => {
          return 'default';
        };
        this.setTimezone = value => {
          return value;
        };
        this.toJsDate = value => {
          return value;
        };
        this.parseISO = isoString => {
          return parseISO(isoString);
        };
        this.toISO = value => {
          return formatISO(value, {
            format: 'extended'
          });
        };
        this.parse = (value, format) => {
          if (value === '') {
            return null;
          }
          return parse(value, format, new Date(), {
            locale: this.locale
          });
        };
        this.getCurrentLocaleCode = () => {
          var _this$locale;
          return ((_this$locale = this.locale) == null ? void 0 : _this$locale.code) || 'en-US';
        };
        // Note: date-fns input types are more lenient than this adapter, so we need to expose our more
        // strict signature and delegate to the more lenient signature. Otherwise, we have downstream type errors upon usage.
        this.is12HourCycleInCurrentLocale = () => {
          if (this.locale) {
            return /a/.test(this.locale.formatLong.time());
          }

          // By default, date-fns is using en-US locale with am/pm enabled
          return true;
        };
        this.expandFormat = format => {
          const longFormatRegexp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;

          // @see https://github.com/date-fns/date-fns/blob/master/src/format/index.js#L31
          return format.match(longFormatRegexp).map(token => {
            const firstCharacter = token[0];
            if (firstCharacter === 'p' || firstCharacter === 'P') {
              const longFormatter = longFormatters[firstCharacter];
              const locale = this.locale || defaultLocale;
              return longFormatter(token, locale.formatLong, {});
            }
            return token;
          }).join('');
        };
        this.getFormatHelperText = format => {
          return this.expandFormat(format).replace(/(aaa|aa|a)/g, '(a|p)m').toLocaleLowerCase();
        };
        this.isNull = value => {
          return value === null;
        };
        this.isValid = value => {
          return isValid(this.date(value));
        };
        this.format = (value, formatKey) => {
          return this.formatByString(value, this.formats[formatKey]);
        };
        this.formatByString = (value, formatString) => {
          return format(value, formatString, {
            locale: this.locale
          });
        };
        this.formatNumber = numberToFormat => {
          return numberToFormat;
        };
        this.getDiff = (value, comparing, unit) => {
          switch (unit) {
            case 'years':
              return differenceInYears(value, this.date(comparing));
            case 'quarters':
              return differenceInQuarters(value, this.date(comparing));
            case 'months':
              return differenceInMonths(value, this.date(comparing));
            case 'weeks':
              return differenceInWeeks(value, this.date(comparing));
            case 'days':
              return differenceInDays(value, this.date(comparing));
            case 'hours':
              return differenceInHours(value, this.date(comparing));
            case 'minutes':
              return differenceInMinutes(value, this.date(comparing));
            case 'seconds':
              return differenceInSeconds(value, this.date(comparing));
            default:
              {
                return differenceInMilliseconds(value, this.date(comparing));
              }
          }
        };
        this.isEqual = (value, comparing) => {
          if (value === null && comparing === null) {
            return true;
          }
          return isEqual(value, comparing);
        };
        this.isSameYear = (value, comparing) => {
          return isSameYear(value, comparing);
        };
        this.isSameMonth = (value, comparing) => {
          return isSameMonth(value, comparing);
        };
        this.isSameDay = (value, comparing) => {
          return isSameDay(value, comparing);
        };
        this.isSameHour = (value, comparing) => {
          return isSameHour(value, comparing);
        };
        this.isAfter = (value, comparing) => {
          return isAfter(value, comparing);
        };
        this.isAfterYear = (value, comparing) => {
          return isAfter(value, endOfYear(comparing));
        };
        this.isAfterDay = (value, comparing) => {
          return isAfter(value, endOfDay(comparing));
        };
        this.isBefore = (value, comparing) => {
          return isBefore(value, comparing);
        };
        this.isBeforeYear = (value, comparing) => {
          return isBefore(value, startOfYear(comparing));
        };
        this.isBeforeDay = (value, comparing) => {
          return isBefore(value, startOfDay(comparing));
        };
        this.isWithinRange = (value, [start, end]) => {
          return isWithinInterval(value, {
            start,
            end
          });
        };
        this.startOfYear = value => {
          return startOfYear(value);
        };
        this.startOfMonth = value => {
          return startOfMonth(value);
        };
        this.startOfWeek = value => {
          return startOfWeek(value, {
            locale: this.locale
          });
        };
        this.startOfDay = value => {
          return startOfDay(value);
        };
        this.endOfYear = value => {
          return endOfYear(value);
        };
        this.endOfMonth = value => {
          return endOfMonth(value);
        };
        this.endOfWeek = value => {
          return endOfWeek(value, {
            locale: this.locale
          });
        };
        this.endOfDay = value => {
          return endOfDay(value);
        };
        this.addYears = (value, amount) => {
          return addYears(value, amount);
        };
        this.addMonths = (value, amount) => {
          return addMonths(value, amount);
        };
        this.addWeeks = (value, amount) => {
          return addWeeks(value, amount);
        };
        this.addDays = (value, amount) => {
          return addDays(value, amount);
        };
        this.addHours = (value, amount) => {
          return addHours(value, amount);
        };
        this.addMinutes = (value, amount) => {
          return addMinutes(value, amount);
        };
        this.addSeconds = (value, amount) => {
          return addSeconds(value, amount);
        };
        this.getYear = value => {
          return getYear(value);
        };
        this.getMonth = value => {
          return getMonth(value);
        };
        this.getDate = value => {
          return getDate(value);
        };
        this.getHours = value => {
          return getHours(value);
        };
        this.getMinutes = value => {
          return getMinutes(value);
        };
        this.getSeconds = value => {
          return getSeconds(value);
        };
        this.getMilliseconds = value => {
          return getMilliseconds(value);
        };
        this.setYear = (value, year) => {
          return setYear(value, year);
        };
        this.setMonth = (value, month) => {
          return setMonth(value, month);
        };
        this.setDate = (value, date) => {
          return setDate(value, date);
        };
        this.setHours = (value, hours) => {
          return setHours(value, hours);
        };
        this.setMinutes = (value, minutes) => {
          return setMinutes(value, minutes);
        };
        this.setSeconds = (value, seconds) => {
          return setSeconds(value, seconds);
        };
        this.setMilliseconds = (value, milliseconds) => {
          return setMilliseconds(value, milliseconds);
        };
        this.getDaysInMonth = value => {
          return getDaysInMonth(value);
        };
        this.getNextMonth = value => {
          return addMonths(value, 1);
        };
        this.getPreviousMonth = value => {
          return addMonths(value, -1);
        };
        this.getMonthArray = value => {
          const firstMonth = startOfYear(value);
          const monthArray = [firstMonth];
          while (monthArray.length < 12) {
            const prevMonth = monthArray[monthArray.length - 1];
            monthArray.push(this.getNextMonth(prevMonth));
          }
          return monthArray;
        };
        this.mergeDateAndTime = (dateParam, timeParam) => {
          return this.setSeconds(this.setMinutes(this.setHours(dateParam, this.getHours(timeParam)), this.getMinutes(timeParam)), this.getSeconds(timeParam));
        };
        this.getWeekdays = () => {
          const now = new Date();
          return eachDayOfInterval({
            start: startOfWeek(now, {
              locale: this.locale
            }),
            end: endOfWeek(now, {
              locale: this.locale
            })
          }).map(day => this.formatByString(day, 'EEEEEE'));
        };
        this.getWeekArray = value => {
          const start = startOfWeek(startOfMonth(value), {
            locale: this.locale
          });
          const end = endOfWeek(endOfMonth(value), {
            locale: this.locale
          });
          let count = 0;
          let current = start;
          const nestedWeeks = [];
          while (isBefore(current, end)) {
            const weekNumber = Math.floor(count / 7);
            nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
            nestedWeeks[weekNumber].push(current);
            current = addDays(current, 1);
            count += 1;
          }
          return nestedWeeks;
        };
        this.getWeekNumber = value => {
          return getWeek(value, {
            locale: this.locale
          });
        };
        this.getYearRange = (start, end) => {
          const startDate = startOfYear(start);
          const endDate = endOfYear(end);
          const years = [];
          let current = startDate;
          while (isBefore(current, endDate)) {
            years.push(current);
            current = addYears(current, 1);
          }
          return years;
        };
        this.getMeridiemText = ampm => {
          return ampm === 'am' ? 'AM' : 'PM';
        };
        this.locale = _locale;
        this.formats = _extends({}, defaultFormats, formats);
      }
    }

    function FlowableTimePicker(props) {
        function insertViewProperties(format, amPmEnabled, timePickerAttributes) {
            if (amPmEnabled) {
                timePickerAttributes.format = format + " aa";
            }
            switch (format) {
                case "hh":
                    timePickerAttributes.views = ["hours"];
                    break;
                case "hh:mm":
                    timePickerAttributes.views = ["hours", "minutes"];
                    break;
                case "hh:mm:ss":
                    timePickerAttributes.views = ["hours", "minutes", "seconds"];
                    break;
            }
        }
        // const Label = props.Components.label;
        var config = props.config;
        var extraSettings = config.extraSettings, value = config.value, enabled = config.enabled, ignore = config.ignore; config.visible; var defaultValue = config.defaultValue;
        var timePickerAttributes = {};
        var pickerType = forms._.get(extraSettings, "pickerType", "digital");
        var ampmEnabled = forms._.get(extraSettings, "ampm", false);
        var interval = forms._.get(extraSettings, "interval", 5);
        var format = forms._.get(extraSettings, "format", "hh:mm");
        insertViewProperties(format, ampmEnabled, timePickerAttributes);
        // Used to generate style class names. See: https://getbem.com/introduction/
        var bem = forms._.bem("flowableTimePicker");
        var TimePickerComponent = pickerType === "digital" ? DesktopTimePicker : MobileTimePicker;
        if (value) {
            timePickerAttributes.defaultValue = parseISO(value);
        }
        else if (defaultValue) {
            timePickerAttributes.defaultValue = parseISO(defaultValue);
        }
        return (React.createElement(LocalizationProvider, { dateAdapter: AdapterDateFns }, !ignore &&
            React.createElement("div", null,
                React.createElement(TimePickerComponent, __assign({ tabIndex: -1, className: bem('picker'), label: "Basic time picker", onChange: function (v) { return props.onChange(v); }, ampm: ampmEnabled, timeSteps: { minutes: interval }, disabled: !enabled }, timePickerAttributes))))
        // <div>test   </div>
        );
    }

    var formComponents = [
        ["trainingHelloworld", HelloWorld],
        ["trainingFlowableMap", FlowableMap],
        ["trainingTimepicker", FlowableTimePicker]
    ];

    exports.formComponents = formComponents;

}));
//# sourceMappingURL=custom.js.map
